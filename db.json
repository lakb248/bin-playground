{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1473173162000},{"_id":"source/_posts/build-blog-with-hexo.md","hash":"b81a14f27003df2b7b6f7516132b266169efef64","modified":1473173162000},{"_id":"source/_posts/frontend-optimization-javascript-bottom.md","hash":"011fcaad37db4ca200791ff54be7ed61bb8eb36a","modified":1473173162000},{"_id":"source/_posts/frontend-optimization-javascript-async-load.md","hash":"610982964f5dd40135969ad8df3c3db301508e9c","modified":1473173162000},{"_id":"source/_posts/frontend-optimization-javascript-identifier.md","hash":"ab31d55caad2d4cb9e6116016c2ab446d3c66017","modified":1473173162000},{"_id":"source/_posts/frontend-undated-periodical-1.md","hash":"597c7c2f3833597236a473b50f44db100461d418","modified":1473173162000},{"_id":"source/_posts/frontend-optimization-javascript-dom.md","hash":"96cbe03168d5406e1891ed9b9bab88c55111c34c","modified":1473173162000},{"_id":"source/_posts/grunt-source-code-1.md","hash":"10ea04f6b68d885abbbe049437c0f5ded1525baa","modified":1473173162000},{"_id":"source/_posts/grunt-source-code-2.md","hash":"5bcb103eaf07dbeabc9d14a06a3ec54aabe36356","modified":1473173162000},{"_id":"source/_posts/grunt-source-code-3.md","hash":"a287c5b3f2802e2c8d86d8f44c5d51431649d151","modified":1473173162000},{"_id":"source/_posts/html5-offline-cache.md","hash":"f593dc27ae5ee2b75662c571d90c4e531b63eced","modified":1473173162000},{"_id":"source/_posts/overview-of-es6.md","hash":"979978c3a611b0f6c88c4dd372f69ac2250ac991","modified":1473173162000},{"_id":"source/_posts/overview-of-markdown.md","hash":"f0afe4ae875fed73081b10bdd57e10933647b9bf","modified":1473173162000},{"_id":"source/_posts/some-angular-practice.md","hash":"6796c923dc9248e65814aae9d4a74961ff3a42f7","modified":1473173162000},{"_id":"source/_posts/something-about-css.md","hash":"86d36ae63395d905d85c6cfacd9acfa920ef1806","modified":1473173162000},{"_id":"source/_posts/talk-about-javascript-prototype-inheritance.md","hash":"e0b90ed9b23f8c47d571b777fb4386bf2be4b952","modified":1473173162000},{"_id":"source/_posts/understand-promise-1.md","hash":"98cf941ff7640d2660083fcd560b474837cbbc6b","modified":1473173162000},{"_id":"source/_posts/understand-promise-2.md","hash":"41ddeb085e3c2c8041727c70222f43e6ab5634ec","modified":1473173162000},{"_id":"source/_posts/understand-promise-4.md","hash":"42d933cd4425f826deb90666a12cdb5c200d8e98","modified":1473173162000},{"_id":"source/_posts/understand-promise-3.md","hash":"f056e5cfdf0102d2e3bbe3963b32148851a3778c","modified":1473173162000},{"_id":"source/_posts/writing-a-friendly-readme.md","hash":"449c9b95a2b0aa2f069b5ad1eccc373b7e41307a","modified":1473174783000},{"_id":"source/_posts/use-travis-ci-and-codecov-with-github.md","hash":"2100e29b3ba1d37152e4a64ec38bd33e64a01a97","modified":1473173162000},{"_id":"source/_posts/understand-promise-5.md","hash":"2861ebc27c109a378b40c867ad1df92beffdf6ef","modified":1473173162000},{"_id":"source/_posts/why-prototype-important.md","hash":"01697a9b218c90fbe16b8ed97f3c946b9619b8e7","modified":1473173162000},{"_id":"public/async/posts/2016/04/12/frontend-undated-periodical-1.json","hash":"4d4482901ac9cd6b68742aaa07281ee9c1e77c0b","modified":1473173272703},{"_id":"public/async/posts/2016/02/04/use-travis-ci-and-codecov-with-github.json","hash":"8254d58ac05586b50ca0dca804c00d7be1b9a29f","modified":1473173272703},{"_id":"public/async/posts/2015/04/20/grunt-source-code-3.json","hash":"89c2d54522e50943039f17a9f951a35a515ee4d2","modified":1473173272703},{"_id":"public/async/posts/2015/04/19/grunt-source-code-2.json","hash":"b834c85b65cd9048c6634ae3a28c7ef35c081a0b","modified":1473173272703},{"_id":"public/async/posts/2015/04/07/grunt-source-code-1.json","hash":"c5a0d2b1ab4ed3c0a6f0a832dd2b53946ac4b43d","modified":1473173272703},{"_id":"public/async/posts/2015/03/14/why-prototype-important.json","hash":"6ee11482f049b08048eb882c8615bd9374d77de1","modified":1473173272703},{"_id":"public/async/posts/2015/03/10/some-angular-practice.json","hash":"4c13ff8d5121de72e0750add4dda3a7bca675564","modified":1473173272703},{"_id":"public/async/posts/2014/11/09/talk-about-javascript-prototype-inheritance.json","hash":"756a5566502e722a9b8f2930beff2ff55f9788a9","modified":1473173272704},{"_id":"public/async/posts/2014/10/21/html5-offline-cache.json","hash":"0142171d40502fd1532973acb8237ae20d3bed21","modified":1473173272704},{"_id":"public/async/posts/2014/08/02/something-about-css.json","hash":"eb7d6f5f8a1f0c0498b1f2bf09f03f83103a1109","modified":1473173272704},{"_id":"public/async/posts/2014/07/19/understand-promise-5.json","hash":"644a4306ccd0bd871f1e76d3d3d671376bd87010","modified":1473173272704},{"_id":"public/async/posts/2014/07/09/understand-promise-4.json","hash":"16abc703d08bcd381d665a7e2105a807cf614aaa","modified":1473173272704},{"_id":"public/async/posts/2014/07/02/understand-promise-3.json","hash":"ead92cb397a664b73a0acfa202bd9450d7591ab6","modified":1473173272704},{"_id":"public/async/posts/2014/06/29/understand-promise-2.json","hash":"7432db125ac6cb5c62f54ad2219dc41f72a7ecc8","modified":1473173272704},{"_id":"public/async/posts/2014/06/23/understand-promise-1.json","hash":"cb4e96eafa0fc30d2b38448308de6222a4a5941d","modified":1473173272705},{"_id":"public/async/posts/2014/06/16/frontend-optimization-javascript-dom.json","hash":"9a1abcb8e8dd36b11aaa87d2b95dd29194a1c810","modified":1473173272708},{"_id":"public/async/posts/2014/06/05/frontend-optimization-javascript-identifier.json","hash":"b9380cb2665e92e6914accf87ee9006ad8dab6d4","modified":1473173272708},{"_id":"public/async/posts/2014/06/02/frontend-optimization-javascript-async-load.json","hash":"d3d6dde450a632283a185e45a76a26453eb9a231","modified":1473173272710},{"_id":"public/async/posts/2014/05/24/frontend-optimization-javascript-bottom.json","hash":"e530a8b7fbc142b8ac075318f7bbe6a2a3c852c2","modified":1473173272710},{"_id":"public/async/posts/2014/05/24/build-blog-with-hexo.json","hash":"399644b0920c5758c94c461ab2516be4a47ab4c5","modified":1473173272710},{"_id":"public/async/posts/2014/05/24/overview-of-markdown.json","hash":"7cc9db1c1c1397fc4f022c44bdb122451c7f085f","modified":1473173272710},{"_id":"public/async/posts/2014/05/24/overview-of-es6.json","hash":"d0dd93762192f1a769991d48cb4cd3b12798481d","modified":1473173272710},{"_id":"public/async/tags/javascript.json","hash":"68e1c0bb5a1cc079f349a84fee2c1e39d1f8d469","modified":1473173272710},{"_id":"public/async/tags/前端优化.json","hash":"f0b6c65c985bdc73a7b10c1a0a89543626df2d13","modified":1473173272710},{"_id":"public/async/tags/hexo.json","hash":"1e1d3132c67bbd056f9fd6fca30446c41ccd583c","modified":1473173272710},{"_id":"public/async/tags/frontend.json","hash":"c6d604a0920f3e8033469f1ecfc802779b3dabd3","modified":1473173272710},{"_id":"public/async/tags/grunt.json","hash":"9e75a12e4d7b8b8d8687007153fedc0770890a18","modified":1473173272710},{"_id":"public/async/tags/es6.json","hash":"c1e7f6297654ec01dbaecf2d5b0c3fecc5b32c00","modified":1473173272710},{"_id":"public/async/tags/html5.json","hash":"7e7d45c109744eaaa7d586e62be28ffc8ff50aea","modified":1473173272710},{"_id":"public/async/tags/application-cache.json","hash":"da826a9c014108b83505309d660deaa70047d10f","modified":1473173272710},{"_id":"public/async/tags/markdown.json","hash":"39cc55d60a16fd557ede152e8786583a1d1ef982","modified":1473173272711},{"_id":"public/async/tags/angular.json","hash":"11bf2b3e8b36b72f6872aae12110abcc0d3b3559","modified":1473173272711},{"_id":"public/async/tags/css.json","hash":"1eb639e17d3d758f7e6d117c13fabeb167d1fafd","modified":1473173272711},{"_id":"public/async/tags/promise.json","hash":"df26f46631ec59d7abca05a4747f1302ed7b350a","modified":1473173272711},{"_id":"public/async/tags/github.json","hash":"e00b6e746cf948521e6f35bc873a1d33650c7be6","modified":1473173272711},{"_id":"public/async/tags/ci.json","hash":"cbdaca385286a7dfcecc238c6d2b6e1cffc1f0c1","modified":1473173272711},{"_id":"public/async/tags.json","hash":"7b4a9bebe0abf13733e03586314c8481a378b83f","modified":1473173571573},{"_id":"public/async/categories.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1473173272711},{"_id":"public/async/lists/list.json","hash":"7e46e15b05ebee56481ffaf96697829c896852d2","modified":1473173571574},{"_id":"public/async/lists/list-2.json","hash":"ae842e045adfd4f1dbecf6909895503ef0b0c341","modified":1473173571574},{"_id":"public/async/lists/list-3.json","hash":"514dacb2a4c5c86050f100b61fe70624fe9de8b4","modified":1473173571575},{"_id":"public/async/config.json","hash":"2ca1ee8f2a5c7a85192fae3b1a86f765321a59a1","modified":1473173272711},{"_id":"public/async/archives/2014/5/list.json","hash":"be1fdeca2ab246ac6ff15d9f7becf0c9604ebdcb","modified":1473173272711},{"_id":"public/async/archives/2014/6/list.json","hash":"8fd4b5e15020b2cfdbd860a95aedb356fbe79957","modified":1473173272711},{"_id":"public/async/archives/2014/7/list.json","hash":"f41f893a662917ea4a9bf9f48ce62bb17822354e","modified":1473173272711},{"_id":"public/async/archives/2014/8/list.json","hash":"0e204bd71830132625e97099cc10baa44c5d66de","modified":1473173272711},{"_id":"public/async/archives/2014/10/list.json","hash":"181bf64701b0c2ea7a1ca4966898465889bfb590","modified":1473173272711},{"_id":"public/async/archives/2014/11/list.json","hash":"6d46d5556d88c5944f512ca719f2d931f4a01786","modified":1473173272711},{"_id":"public/async/archives/2015/4/list.json","hash":"653142bf8e7f5b57a4e41720d5f69b424ff5d3be","modified":1473173272711},{"_id":"public/async/archives/2015/3/list.json","hash":"335c1eae394d50c22f173204a9dd72d7c9dc7bb4","modified":1473173272711},{"_id":"public/async/archives/2016/2/list.json","hash":"b2cccef5b69f9f6e3f4d4dd4d982f1c20a6f41f7","modified":1473173272711},{"_id":"public/async/archives/2016/4/list.json","hash":"431cfec62f9bd55acfe5bc2069a4c835eee17cdc","modified":1473173272711},{"_id":"public/async/archives.json","hash":"f83b1656b625e0ba5858fbeb8283b4cc7d71ee07","modified":1473173571575},{"_id":"public/content.json","hash":"83c3f34e32b13a4fdb45808075b3a162dd92d3a9","modified":1473174788212},{"_id":"public/2016/04/12/frontend-undated-periodical-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272716},{"_id":"public/2016/02/04/use-travis-ci-and-codecov-with-github/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272716},{"_id":"public/2015/04/20/grunt-source-code-3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272716},{"_id":"public/2015/04/19/grunt-source-code-2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2015/04/07/grunt-source-code-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2015/03/14/why-prototype-important/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2015/03/10/some-angular-practice/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2014/11/09/talk-about-javascript-prototype-inheritance/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2014/10/21/html5-offline-cache/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2014/08/02/something-about-css/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2014/07/19/understand-promise-5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2014/07/09/understand-promise-4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272717},{"_id":"public/2014/07/02/understand-promise-3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272718},{"_id":"public/2014/06/29/understand-promise-2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272718},{"_id":"public/2014/06/23/understand-promise-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272727},{"_id":"public/2014/06/16/frontend-optimization-javascript-dom/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/2014/06/05/frontend-optimization-javascript-identifier/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/2014/06/02/frontend-optimization-javascript-async-load/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/2014/05/24/frontend-optimization-javascript-bottom/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/2014/05/24/build-blog-with-hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/2014/05/24/overview-of-markdown/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/2014/05/24/overview-of-es6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/archives/2014/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272728},{"_id":"public/archives/2014/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2014/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2014/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2014/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2014/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2014/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2014/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2015/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2015/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2015/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2016/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/archives/2016/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/tags/javascript/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/tags/前端优化/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272729},{"_id":"public/tags/hexo/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/frontend/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/grunt/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/es6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/html5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/application-cache/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/markdown/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/angular/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/css/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/promise/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/github/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/tags/ci/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173272730},{"_id":"public/async/posts/2016/09/06/writing-a-friendly-readme.json","hash":"9f521443abb8c1233b1a3ebc170deb1e10cd7a4d","modified":1473174788212},{"_id":"public/async/tags/others.json","hash":"4e6448a436d10bcd1a6eb87f09b7d634a94da24d","modified":1473173571582},{"_id":"public/async/archives/2016/9/list.json","hash":"998d8a0ba75340f919d734e73cd8ffbd658d1d21","modified":1473173571582},{"_id":"public/2016/09/06/writing-a-friendly-readme/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173571583},{"_id":"public/archives/2016/09/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173571583},{"_id":"public/tags/others/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473173571583}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"前端优化-Javascript篇(1.脚本放在底部)","date":"2014-05-24T06:42:52.000Z","_content":"从本篇博客开始，我会跟大家分享下我关于前端优化方面的学习，由于时间原因每篇博客只能分享一小点内容，一点点深入前端优化的细节。\n　　做过前端的人都知道，前端优化是一个永远都不会停止的话题(当然，不管是哪个技术，优化总是无止境的)。在前端优化这个问题上，最被大家熟知的应该就是雅虎前端优化14条军规以及雅虎前端优化34条规则。大部分也都已经应用到了实际开发中。而我的分享并不是按照优化建议来进行的，我的计划是整个优化按照不同模块进行划分，分别是Javascript，CSS，HTML还有其他的一些细节。今天就先从Javascript开始。\n<!-- more -->\n　　Javascript开篇就跟大家分享一个比较简单的规则————脚本后置，这个是一个最基本的优化策略，我想大家都应该知道，可是我还是想通过实际的例子来加深一下自己的理解，也许在这个简单的事情后面可以挖掘出更多有意思的东西。\n　　为了验证脚本后置对前端优化究竟会有多大的影响，我把我的博客作为测试对象，在首页插入下面这个脚本:\n```javasctipt\nfunction doSomething(n){\n\t//模拟一个需要执行n秒的脚本\n    var start = new Date().getTime() ;\n    while((new Date().getTime() - start) < 1000 * n){}\n}\n//执行5秒\ndoSomething(5) ;\n```\n　　我把这个脚本命名为doSomething.js\n　　首先，先来看看脚本前置的情况，下图是脚本前置情况下的网络瀑布图\n　　![请输入图片描述][1]\n　　其次，再来看看脚本后置的情况，下图是脚本后置情况下的网络瀑布图\n　　![请输入图片描述][2]\n　　\n\n\n　　通过上面两幅图，结果已经很明显了，虽然现代浏览器已经支持资源的并行下载，但是当脚本阻塞时仍然会阻止其他图片资源和页面的加载，如果站点是一个有很多图片的网站那么这种情况将严重影响用户体验；而脚本后置的话，图片和脚本是并行下载，然后先加载图片和页面然后才执行耗时的脚本，这样就不会阻塞图片和页面的加载。\n　　从上面的瀑布图我们还可以看出很多浏览器加载策略方面的东西，通过对比不同浏览器的瀑布图也可以看出各自的加载策略，这方面的知识还需要在摸索，也希望有了解的人来说说不同浏览器之间加载策略的不同。\n\n\n  [1]: http://segmentfault.com/img/bVck5h\n  [2]: http://segmentfault.com/img/bVck5i\n","source":"_posts/frontend-optimization-javascript-bottom.md","raw":"title: 前端优化-Javascript篇(1.脚本放在底部)\ndate: 2014-05-24 14:42:52\ntags: ['javascript', '前端优化']\n---\n从本篇博客开始，我会跟大家分享下我关于前端优化方面的学习，由于时间原因每篇博客只能分享一小点内容，一点点深入前端优化的细节。\n　　做过前端的人都知道，前端优化是一个永远都不会停止的话题(当然，不管是哪个技术，优化总是无止境的)。在前端优化这个问题上，最被大家熟知的应该就是雅虎前端优化14条军规以及雅虎前端优化34条规则。大部分也都已经应用到了实际开发中。而我的分享并不是按照优化建议来进行的，我的计划是整个优化按照不同模块进行划分，分别是Javascript，CSS，HTML还有其他的一些细节。今天就先从Javascript开始。\n<!-- more -->\n　　Javascript开篇就跟大家分享一个比较简单的规则————脚本后置，这个是一个最基本的优化策略，我想大家都应该知道，可是我还是想通过实际的例子来加深一下自己的理解，也许在这个简单的事情后面可以挖掘出更多有意思的东西。\n　　为了验证脚本后置对前端优化究竟会有多大的影响，我把我的博客作为测试对象，在首页插入下面这个脚本:\n```javasctipt\nfunction doSomething(n){\n\t//模拟一个需要执行n秒的脚本\n    var start = new Date().getTime() ;\n    while((new Date().getTime() - start) < 1000 * n){}\n}\n//执行5秒\ndoSomething(5) ;\n```\n　　我把这个脚本命名为doSomething.js\n　　首先，先来看看脚本前置的情况，下图是脚本前置情况下的网络瀑布图\n　　![请输入图片描述][1]\n　　其次，再来看看脚本后置的情况，下图是脚本后置情况下的网络瀑布图\n　　![请输入图片描述][2]\n　　\n\n\n　　通过上面两幅图，结果已经很明显了，虽然现代浏览器已经支持资源的并行下载，但是当脚本阻塞时仍然会阻止其他图片资源和页面的加载，如果站点是一个有很多图片的网站那么这种情况将严重影响用户体验；而脚本后置的话，图片和脚本是并行下载，然后先加载图片和页面然后才执行耗时的脚本，这样就不会阻塞图片和页面的加载。\n　　从上面的瀑布图我们还可以看出很多浏览器加载策略方面的东西，通过对比不同浏览器的瀑布图也可以看出各自的加载策略，这方面的知识还需要在摸索，也希望有了解的人来说说不同浏览器之间加载策略的不同。\n\n\n  [1]: http://segmentfault.com/img/bVck5h\n  [2]: http://segmentfault.com/img/bVck5i\n","slug":"frontend-optimization-javascript-bottom","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvjj00000povlbhqh9ul","content":"<p>从本篇博客开始，我会跟大家分享下我关于前端优化方面的学习，由于时间原因每篇博客只能分享一小点内容，一点点深入前端优化的细节。<br>　　做过前端的人都知道，前端优化是一个永远都不会停止的话题(当然，不管是哪个技术，优化总是无止境的)。在前端优化这个问题上，最被大家熟知的应该就是雅虎前端优化14条军规以及雅虎前端优化34条规则。大部分也都已经应用到了实际开发中。而我的分享并不是按照优化建议来进行的，我的计划是整个优化按照不同模块进行划分，分别是Javascript，CSS，HTML还有其他的一些细节。今天就先从Javascript开始。<br><a id=\"more\"></a><br>　　Javascript开篇就跟大家分享一个比较简单的规则————脚本后置，这个是一个最基本的优化策略，我想大家都应该知道，可是我还是想通过实际的例子来加深一下自己的理解，也许在这个简单的事情后面可以挖掘出更多有意思的东西。<br>　　为了验证脚本后置对前端优化究竟会有多大的影响，我把我的博客作为测试对象，在首页插入下面这个脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function doSomething(n)&#123;</div><div class=\"line\">\t//模拟一个需要执行n秒的脚本</div><div class=\"line\">    var start = new Date().getTime() ;</div><div class=\"line\">    while((new Date().getTime() - start) &lt; 1000 * n)&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//执行5秒</div><div class=\"line\">doSomething(5) ;</div></pre></td></tr></table></figure></p>\n<p>　　我把这个脚本命名为doSomething.js<br>　　首先，先来看看脚本前置的情况，下图是脚本前置情况下的网络瀑布图<br>　　<img src=\"http://segmentfault.com/img/bVck5h\" alt=\"请输入图片描述\"><br>　　其次，再来看看脚本后置的情况，下图是脚本后置情况下的网络瀑布图<br>　　<img src=\"http://segmentfault.com/img/bVck5i\" alt=\"请输入图片描述\">\n　　</p>\n<p>　　通过上面两幅图，结果已经很明显了，虽然现代浏览器已经支持资源的并行下载，但是当脚本阻塞时仍然会阻止其他图片资源和页面的加载，如果站点是一个有很多图片的网站那么这种情况将严重影响用户体验；而脚本后置的话，图片和脚本是并行下载，然后先加载图片和页面然后才执行耗时的脚本，这样就不会阻塞图片和页面的加载。<br>　　从上面的瀑布图我们还可以看出很多浏览器加载策略方面的东西，通过对比不同浏览器的瀑布图也可以看出各自的加载策略，这方面的知识还需要在摸索，也希望有了解的人来说说不同浏览器之间加载策略的不同。</p>\n","excerpt":"<p>从本篇博客开始，我会跟大家分享下我关于前端优化方面的学习，由于时间原因每篇博客只能分享一小点内容，一点点深入前端优化的细节。<br>　　做过前端的人都知道，前端优化是一个永远都不会停止的话题(当然，不管是哪个技术，优化总是无止境的)。在前端优化这个问题上，最被大家熟知的应该就是雅虎前端优化14条军规以及雅虎前端优化34条规则。大部分也都已经应用到了实际开发中。而我的分享并不是按照优化建议来进行的，我的计划是整个优化按照不同模块进行划分，分别是Javascript，CSS，HTML还有其他的一些细节。今天就先从Javascript开始。<br>","more":"<br>　　Javascript开篇就跟大家分享一个比较简单的规则————脚本后置，这个是一个最基本的优化策略，我想大家都应该知道，可是我还是想通过实际的例子来加深一下自己的理解，也许在这个简单的事情后面可以挖掘出更多有意思的东西。<br>　　为了验证脚本后置对前端优化究竟会有多大的影响，我把我的博客作为测试对象，在首页插入下面这个脚本:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function doSomething(n)&#123;</div><div class=\"line\">\t//模拟一个需要执行n秒的脚本</div><div class=\"line\">    var start = new Date().getTime() ;</div><div class=\"line\">    while((new Date().getTime() - start) &lt; 1000 * n)&#123;&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//执行5秒</div><div class=\"line\">doSomething(5) ;</div></pre></td></tr></table></figure></p>\n<p>　　我把这个脚本命名为doSomething.js<br>　　首先，先来看看脚本前置的情况，下图是脚本前置情况下的网络瀑布图<br>　　<img src=\"http://segmentfault.com/img/bVck5h\" alt=\"请输入图片描述\"><br>　　其次，再来看看脚本后置的情况，下图是脚本后置情况下的网络瀑布图<br>　　<img src=\"http://segmentfault.com/img/bVck5i\" alt=\"请输入图片描述\">\n　　</p>\n<p>　　通过上面两幅图，结果已经很明显了，虽然现代浏览器已经支持资源的并行下载，但是当脚本阻塞时仍然会阻止其他图片资源和页面的加载，如果站点是一个有很多图片的网站那么这种情况将严重影响用户体验；而脚本后置的话，图片和脚本是并行下载，然后先加载图片和页面然后才执行耗时的脚本，这样就不会阻塞图片和页面的加载。<br>　　从上面的瀑布图我们还可以看出很多浏览器加载策略方面的东西，通过对比不同浏览器的瀑布图也可以看出各自的加载策略，这方面的知识还需要在摸索，也希望有了解的人来说说不同浏览器之间加载策略的不同。</p>"},{"title":"Hexo搭建个人博客","date":"2014-05-24T06:38:03.000Z","_content":"\n\n　　一直想搭建一个自己的博客来记录自己的一些学习笔记，由于是学生党经济上有些吃紧所以一直没办法搭建起自己的博客。最近在网上无意中看到了可以借助GitHub来搭建自己的个人博客，于是就折腾了起来。我搭建博客用到的是GitHub+Hexo的搭配，下面就让我来介绍下我的博客搭建的整个过程。\n<!--more-->\n# Hexo\n　　Hexo是一个基于Node.js的快速简单的静态博客框架，利用它通过简单的几个命令就可以搭建一个个人博客。\n\n> A fast, simple & powerful blog framework,powered by Node.js.\n\n# 安装Hexo\n　　我是在Windows上面进行搭建的，所以我这里就介绍下Windows上面的安装方法。安装Hexo首先需要下面两个条件:\n　　- Node.js\n　　- Git\n　　这两个的安装方法大家Google下就好了，一堆堆的。有了这些我们就可以利用npm命令来安装hexo了。\n```shell\n    npm install hexo -g\n```\n　　安装完hexo之后可以开始初始化博客了。\n　　\n# 初始化博客\n　　初始化Hexo博客只需要进入博客目录，然后执行下面这条命令就可以了\n```shell\n    hexo init\n```\n# 生成博客\n 　　初始化博客之后博客目录下会产生一些配置文件和模板文件，现在就要利用这些模板文件来生成我们的静态博客文件，通过下面这条命令就可以生成我们的博客\n```shell\n    hexo generate\n```\n　　执行完命令之后，在博客目录下会产生一个public文件夹，这里面存放的就是我们的博客静态文件。\n# 本地部署\n　　生成博客之后我们就可以开始在本地部署我们的博客\n```shell\n    hexo server\n```\n　　现在我们打开浏览器访问http://localhost:4000  就可以看到我们的博客了。\n# 部署到GitHub\n　　通过上面这些步骤我们只是在本地搭建起了博客，要让别人看到还需要把它部署到GitHub上。\n　　首先，当然是需要申请一个GitHub账号，然后新建一个Repository，接着在命名的时候需要注意，GitHubPage的名字必须用户名.github.com或者用户名.github.io。\n　　创建完Repository之后，我们要配置Hexo的github地址然后才可以把我们的博客部署到GitHub上面。在博客目录底下打开_congig.yml，这就是Hexo的配置文件。找到下面这段代码\n```yaml\n    # Deployment\n    ## Docs: http://hexo.io/docs/deployment.html\n    deploy:\n    type:\n```\n　　把上面的内容替换成你刚才创建的Repository地址，如下:\n```yaml\n    # Deployment\n    ## Docs: http://hexo.io/docs/deployment.html\n    deploy:\n    type: github\n    repository: https://github.com/用户名/用户名.github.io.git\n    branch: master\n```\n　　创建Repository并且修改配置文件之后我们就可以把我们的博客部署到GitHub上面了，通过下面这个命令，过程中需要输入Git账号和密码:\n```shell\n    hexo deploy\n```\n　　打开浏览器访问http://用户名.github.com 或者 http://用户名.github.io ，部署之后大约十分钟就可以看到博客效果了。\n# 配置博客\n　　通过上面的步骤我们完成了博客的基本搭建工作，我们还可以通过修改配置文件来进行博客的个性化定制。\n　　\n　　首先是***博客的标题以及作者***，通过修改_congig.yml中相应的字段就可以设置标题和作者，如下:\n\n```yaml\n    # Site\n    title: <h1>My Coding Life</h1> //标题\n    subtitle: Better Wife , Better Life //副标题\n    description: Better Wife , Better Life //描述内容\n    author: Bin //作者\n    email: lakb248@163.com //邮箱\n    language: zh-CN //语言\n```\n\n　　其次是***博客的主题***，Hexo有许多现成的主题可以选择，在[这里](https://github.com/tommy351/hexo/wiki/Themes)可以得到。下载相应的主题放到博客目录底下的themes文件夹底下。最后需要修改_config.yml中theme字段的值，如下:\n```yaml\n    # Extensions\n    ## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n    ## Themes: https://github.com/tommy351/hexo/wiki/Themes\n    theme: 主题名\n```\n\n　　通过上面这一系列步骤，我们的个人博客可以正式上线了。Hexo还有很多其他的功能，比如评论，RSS。更多内容大家请看[官方文档](http://hexo.io/docs/)。\n","source":"_posts/build-blog-with-hexo.md","raw":"title: Hexo搭建个人博客\ndate: 2014-05-24 14:38:03\ntags: ['hexo']\n---\n\n\n　　一直想搭建一个自己的博客来记录自己的一些学习笔记，由于是学生党经济上有些吃紧所以一直没办法搭建起自己的博客。最近在网上无意中看到了可以借助GitHub来搭建自己的个人博客，于是就折腾了起来。我搭建博客用到的是GitHub+Hexo的搭配，下面就让我来介绍下我的博客搭建的整个过程。\n<!--more-->\n# Hexo\n　　Hexo是一个基于Node.js的快速简单的静态博客框架，利用它通过简单的几个命令就可以搭建一个个人博客。\n\n> A fast, simple & powerful blog framework,powered by Node.js.\n\n# 安装Hexo\n　　我是在Windows上面进行搭建的，所以我这里就介绍下Windows上面的安装方法。安装Hexo首先需要下面两个条件:\n　　- Node.js\n　　- Git\n　　这两个的安装方法大家Google下就好了，一堆堆的。有了这些我们就可以利用npm命令来安装hexo了。\n```shell\n    npm install hexo -g\n```\n　　安装完hexo之后可以开始初始化博客了。\n　　\n# 初始化博客\n　　初始化Hexo博客只需要进入博客目录，然后执行下面这条命令就可以了\n```shell\n    hexo init\n```\n# 生成博客\n 　　初始化博客之后博客目录下会产生一些配置文件和模板文件，现在就要利用这些模板文件来生成我们的静态博客文件，通过下面这条命令就可以生成我们的博客\n```shell\n    hexo generate\n```\n　　执行完命令之后，在博客目录下会产生一个public文件夹，这里面存放的就是我们的博客静态文件。\n# 本地部署\n　　生成博客之后我们就可以开始在本地部署我们的博客\n```shell\n    hexo server\n```\n　　现在我们打开浏览器访问http://localhost:4000  就可以看到我们的博客了。\n# 部署到GitHub\n　　通过上面这些步骤我们只是在本地搭建起了博客，要让别人看到还需要把它部署到GitHub上。\n　　首先，当然是需要申请一个GitHub账号，然后新建一个Repository，接着在命名的时候需要注意，GitHubPage的名字必须用户名.github.com或者用户名.github.io。\n　　创建完Repository之后，我们要配置Hexo的github地址然后才可以把我们的博客部署到GitHub上面。在博客目录底下打开_congig.yml，这就是Hexo的配置文件。找到下面这段代码\n```yaml\n    # Deployment\n    ## Docs: http://hexo.io/docs/deployment.html\n    deploy:\n    type:\n```\n　　把上面的内容替换成你刚才创建的Repository地址，如下:\n```yaml\n    # Deployment\n    ## Docs: http://hexo.io/docs/deployment.html\n    deploy:\n    type: github\n    repository: https://github.com/用户名/用户名.github.io.git\n    branch: master\n```\n　　创建Repository并且修改配置文件之后我们就可以把我们的博客部署到GitHub上面了，通过下面这个命令，过程中需要输入Git账号和密码:\n```shell\n    hexo deploy\n```\n　　打开浏览器访问http://用户名.github.com 或者 http://用户名.github.io ，部署之后大约十分钟就可以看到博客效果了。\n# 配置博客\n　　通过上面的步骤我们完成了博客的基本搭建工作，我们还可以通过修改配置文件来进行博客的个性化定制。\n　　\n　　首先是***博客的标题以及作者***，通过修改_congig.yml中相应的字段就可以设置标题和作者，如下:\n\n```yaml\n    # Site\n    title: <h1>My Coding Life</h1> //标题\n    subtitle: Better Wife , Better Life //副标题\n    description: Better Wife , Better Life //描述内容\n    author: Bin //作者\n    email: lakb248@163.com //邮箱\n    language: zh-CN //语言\n```\n\n　　其次是***博客的主题***，Hexo有许多现成的主题可以选择，在[这里](https://github.com/tommy351/hexo/wiki/Themes)可以得到。下载相应的主题放到博客目录底下的themes文件夹底下。最后需要修改_config.yml中theme字段的值，如下:\n```yaml\n    # Extensions\n    ## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n    ## Themes: https://github.com/tommy351/hexo/wiki/Themes\n    theme: 主题名\n```\n\n　　通过上面这一系列步骤，我们的个人博客可以正式上线了。Hexo还有很多其他的功能，比如评论，RSS。更多内容大家请看[官方文档](http://hexo.io/docs/)。\n","slug":"build-blog-with-hexo","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvjp00010povqwrav3s3","content":"<p>　　一直想搭建一个自己的博客来记录自己的一些学习笔记，由于是学生党经济上有些吃紧所以一直没办法搭建起自己的博客。最近在网上无意中看到了可以借助GitHub来搭建自己的个人博客，于是就折腾了起来。我搭建博客用到的是GitHub+Hexo的搭配，下面就让我来介绍下我的博客搭建的整个过程。<br><a id=\"more\"></a></p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p>　　Hexo是一个基于Node.js的快速简单的静态博客框架，利用它通过简单的几个命令就可以搭建一个个人博客。</p>\n<blockquote>\n<p>A fast, simple &amp; powerful blog framework,powered by Node.js.</p>\n</blockquote>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p>　　我是在Windows上面进行搭建的，所以我这里就介绍下Windows上面的安装方法。安装Hexo首先需要下面两个条件:<br>　　- Node.js<br>　　- Git<br>　　这两个的安装方法大家Google下就好了，一堆堆的。有了这些我们就可以利用npm命令来安装hexo了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo -g</div></pre></td></tr></table></figure></p>\n<p>　　安装完hexo之后可以开始初始化博客了。\n　　</p>\n<h1 id=\"初始化博客\"><a href=\"#初始化博客\" class=\"headerlink\" title=\"初始化博客\"></a>初始化博客</h1><p>　　初始化Hexo博客只需要进入博客目录，然后执行下面这条命令就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<h1 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h1><p> 　　初始化博客之后博客目录下会产生一些配置文件和模板文件，现在就要利用这些模板文件来生成我们的静态博客文件，通过下面这条命令就可以生成我们的博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure></p>\n<p>　　执行完命令之后，在博客目录下会产生一个public文件夹，这里面存放的就是我们的博客静态文件。</p>\n<h1 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h1><p>　　生成博客之后我们就可以开始在本地部署我们的博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>　　现在我们打开浏览器访问<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a>  就可以看到我们的博客了。</p>\n<h1 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h1><p>　　通过上面这些步骤我们只是在本地搭建起了博客，要让别人看到还需要把它部署到GitHub上。<br>　　首先，当然是需要申请一个GitHub账号，然后新建一个Repository，接着在命名的时候需要注意，GitHubPage的名字必须用户名.github.com或者用户名.github.io。<br>　　创建完Repository之后，我们要配置Hexo的github地址然后才可以把我们的博客部署到GitHub上面。在博客目录底下打开_congig.yml，这就是Hexo的配置文件。找到下面这段代码<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span></div></pre></td></tr></table></figure></p>\n<p>　　把上面的内容替换成你刚才创建的Repository地址，如下:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span> github</div><div class=\"line\"><span class=\"attr\">repository:</span> https://github.com/用户名/用户名.github.io.git</div><div class=\"line\"><span class=\"attr\">branch:</span> master</div></pre></td></tr></table></figure></p>\n<p>　　创建Repository并且修改配置文件之后我们就可以把我们的博客部署到GitHub上面了，通过下面这个命令，过程中需要输入Git账号和密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure></p>\n<p>　　打开浏览器访问<a href=\"http://用户名.github.com\" target=\"_blank\" rel=\"external\">http://用户名.github.com</a> 或者 <a href=\"http://用户名.github.io\" target=\"_blank\" rel=\"external\">http://用户名.github.io</a> ，部署之后大约十分钟就可以看到博客效果了。</p>\n<h1 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h1><p>　　通过上面的步骤我们完成了博客的基本搭建工作，我们还可以通过修改配置文件来进行博客的个性化定制。<br>　　<br>　　首先是<strong><em>博客的标题以及作者</em></strong>，通过修改_congig.yml中相应的字段就可以设置标题和作者，如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> &lt;h1&gt;My Coding Life&lt;/h1&gt; //标题</div><div class=\"line\"><span class=\"attr\">subtitle:</span> Better Wife , Better Life //副标题</div><div class=\"line\"><span class=\"attr\">description:</span> Better Wife , Better Life //描述内容</div><div class=\"line\"><span class=\"attr\">author:</span> Bin //作者</div><div class=\"line\"><span class=\"attr\">email:</span> lakb248@<span class=\"number\">163.</span>com //邮箱</div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN //语言</div></pre></td></tr></table></figure>\n<p>　　其次是<strong><em>博客的主题</em></strong>，Hexo有许多现成的主题可以选择，在<a href=\"https://github.com/tommy351/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">这里</a>可以得到。下载相应的主题放到博客目录底下的themes文件夹底下。最后需要修改_config.yml中theme字段的值，如下:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></div><div class=\"line\"><span class=\"attr\">theme:</span> 主题名</div></pre></td></tr></table></figure></p>\n<p>　　通过上面这一系列步骤，我们的个人博客可以正式上线了。Hexo还有很多其他的功能，比如评论，RSS。更多内容大家请看<a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n","excerpt":"<p>　　一直想搭建一个自己的博客来记录自己的一些学习笔记，由于是学生党经济上有些吃紧所以一直没办法搭建起自己的博客。最近在网上无意中看到了可以借助GitHub来搭建自己的个人博客，于是就折腾了起来。我搭建博客用到的是GitHub+Hexo的搭配，下面就让我来介绍下我的博客搭建的整个过程。<br>","more":"</p>\n<h1 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h1><p>　　Hexo是一个基于Node.js的快速简单的静态博客框架，利用它通过简单的几个命令就可以搭建一个个人博客。</p>\n<blockquote>\n<p>A fast, simple &amp; powerful blog framework,powered by Node.js.</p>\n</blockquote>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><p>　　我是在Windows上面进行搭建的，所以我这里就介绍下Windows上面的安装方法。安装Hexo首先需要下面两个条件:<br>　　- Node.js<br>　　- Git<br>　　这两个的安装方法大家Google下就好了，一堆堆的。有了这些我们就可以利用npm命令来安装hexo了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo -g</div></pre></td></tr></table></figure></p>\n<p>　　安装完hexo之后可以开始初始化博客了。\n　　</p>\n<h1 id=\"初始化博客\"><a href=\"#初始化博客\" class=\"headerlink\" title=\"初始化博客\"></a>初始化博客</h1><p>　　初始化Hexo博客只需要进入博客目录，然后执行下面这条命令就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div></pre></td></tr></table></figure></p>\n<h1 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h1><p> 　　初始化博客之后博客目录下会产生一些配置文件和模板文件，现在就要利用这些模板文件来生成我们的静态博客文件，通过下面这条命令就可以生成我们的博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div></pre></td></tr></table></figure></p>\n<p>　　执行完命令之后，在博客目录下会产生一个public文件夹，这里面存放的就是我们的博客静态文件。</p>\n<h1 id=\"本地部署\"><a href=\"#本地部署\" class=\"headerlink\" title=\"本地部署\"></a>本地部署</h1><p>　　生成博客之后我们就可以开始在本地部署我们的博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure></p>\n<p>　　现在我们打开浏览器访问<a href=\"http://localhost:4000\">http://localhost:4000</a>  就可以看到我们的博客了。</p>\n<h1 id=\"部署到GitHub\"><a href=\"#部署到GitHub\" class=\"headerlink\" title=\"部署到GitHub\"></a>部署到GitHub</h1><p>　　通过上面这些步骤我们只是在本地搭建起了博客，要让别人看到还需要把它部署到GitHub上。<br>　　首先，当然是需要申请一个GitHub账号，然后新建一个Repository，接着在命名的时候需要注意，GitHubPage的名字必须用户名.github.com或者用户名.github.io。<br>　　创建完Repository之后，我们要配置Hexo的github地址然后才可以把我们的博客部署到GitHub上面。在博客目录底下打开_congig.yml，这就是Hexo的配置文件。找到下面这段代码<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span></div></pre></td></tr></table></figure></p>\n<p>　　把上面的内容替换成你刚才创建的Repository地址，如下:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: http://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">type:</span> github</div><div class=\"line\"><span class=\"attr\">repository:</span> https://github.com/用户名/用户名.github.io.git</div><div class=\"line\"><span class=\"attr\">branch:</span> master</div></pre></td></tr></table></figure></p>\n<p>　　创建Repository并且修改配置文件之后我们就可以把我们的博客部署到GitHub上面了，通过下面这个命令，过程中需要输入Git账号和密码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo deploy</div></pre></td></tr></table></figure></p>\n<p>　　打开浏览器访问<a href=\"http://用户名.github.com\">http://用户名.github.com</a> 或者 <a href=\"http://用户名.github.io\">http://用户名.github.io</a> ，部署之后大约十分钟就可以看到博客效果了。</p>\n<h1 id=\"配置博客\"><a href=\"#配置博客\" class=\"headerlink\" title=\"配置博客\"></a>配置博客</h1><p>　　通过上面的步骤我们完成了博客的基本搭建工作，我们还可以通过修改配置文件来进行博客的个性化定制。<br>　　<br>　　首先是<strong><em>博客的标题以及作者</em></strong>，通过修改_congig.yml中相应的字段就可以设置标题和作者，如下:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> &lt;h1&gt;My Coding Life&lt;/h1&gt; //标题</div><div class=\"line\"><span class=\"attr\">subtitle:</span> Better Wife , Better Life //副标题</div><div class=\"line\"><span class=\"attr\">description:</span> Better Wife , Better Life //描述内容</div><div class=\"line\"><span class=\"attr\">author:</span> Bin //作者</div><div class=\"line\"><span class=\"attr\">email:</span> lakb248@<span class=\"number\">163.</span>com //邮箱</div><div class=\"line\"><span class=\"attr\">language:</span> zh-CN //语言</div></pre></td></tr></table></figure>\n<p>　　其次是<strong><em>博客的主题</em></strong>，Hexo有许多现成的主题可以选择，在<a href=\"https://github.com/tommy351/hexo/wiki/Themes\">这里</a>可以得到。下载相应的主题放到博客目录底下的themes文件夹底下。最后需要修改_config.yml中theme字段的值，如下:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></div><div class=\"line\"><span class=\"attr\">theme:</span> 主题名</div></pre></td></tr></table></figure></p>\n<p>　　通过上面这一系列步骤，我们的个人博客可以正式上线了。Hexo还有很多其他的功能，比如评论，RSS。更多内容大家请看<a href=\"http://hexo.io/docs/\">官方文档</a>。</p>"},{"title":"前端优化-Javascript篇(2.异步加载脚本)","date":"2014-06-02T06:43:19.000Z","_content":"上篇博客说过脚本后置可以使页面更快的加载，可是这样的优化还是有限的，如果脚本需要执行一个耗时的操作，就算后置了它还是会阻塞后续脚本加载和执行并且阻塞整个页面。下面介绍非阻塞加载脚本技术也就是异步加载。\n<!-- more -->\n# 非阻塞加载脚本\n1.defer(关于defer的一篇[好文](https://hacks.mozilla.org/2009/06/defer/))\n　　目前所有浏览器都支持defer属性，但是Chrome和Firefox中只有在加载外部脚本时defer才会生效，行内脚本使用defer是没有作用的。而IE中不论什么情况，defer都有效。\n　　defer的作用就是阻止脚本在下载完成后立刻执行，它会让脚本延迟到所有脚本加载执行完成后，在DOMContentLoaded之前执行，通俗的说就是顺序加载延迟执行。虽然都是在DOMContentLoaded之前执行，但是在不同浏览器之间，执行的各种脚本执行的顺序还是不一样的。看下面这个例子：\n```html\n<html>\n  <meta charset=\"utf-8\">\n  <head>\n    <script type=\"text/javascript\">\n      var result = \"\" ;\n      var head = document.getElementsByTagName(\"head\")[0] ;\n      //DOMContentLoaded\n      if(window.addEventListener){\n        document.addEventListener(\"DOMContentLoaded\",function(){\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }else{\n        document.attachEvent(\"onDOMContentLoaded\",function(){\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }\n      window.onload = function(){\n      \tresult += \"window loaded\\n\";\n      \t//console.log(\"window loaded\") ;\n      } ;\n    </script>\n    <!--头部行内延迟脚本-->\n    <script type=\"text/javascript\" defer = \"defer\">\n      result += \"Head Inline Script defer\\n\" ;\n    </script>\n    <!--头部行内脚本-->\n    <script type=\"text/javascript\">\n      result += \"Head Inline Script\\n\" ;\n    </script>\n    <!--头部外部延迟脚本 External Head Script defer-->\n    <script type=\"text/javascript\" src = \"external_head_defer.js\" defer=\"defer\"></script>\n    <!--头部行内脚本 External Head Script-->\n    <script type=\"text/javascript\" src = \"external_head.js\"></script>\n  </head>\n  <body>\n    <button>SHOW</button>\n    <!--Body行内延迟脚本-->  \n    <script type=\"text/javascript\" defer = \"defer\">\n      result += \"Body Inline Script defer\\n\" ;\n    </script>\n    <!--Body行内脚本-->\n    <script type=\"text/javascript\">\n      result += \"Body Inline Script\\n\" ;\n    </script>\n    <!--Body外部延迟脚本 External Body Script defer-->\n    <script type=\"text/javascript\" defer = \"defer\" src = \"external_body_defer.js\"></script>\n    <!--Body外部脚本 External Body Script-->\n    <script type=\"text/javascript\" src = \"external_body.js\"></script>\n    <script type=\"text/javascript\">\n      document.getElementsByTagName(\"button\")[0].onclick = function(){console.log(result);} ;\n    </script>\n  </body>\n</html>\n```\n运行结果如下：\n![Defer][1]\n从上面可以看出几个问题：\n　　首先，IE9以下不支持DOMContentLoaded(后面会说明这个情况)\n　　其次，验证了上面说的Chrome和Firefox行内脚本不支持defer属性\n　　最后，defer确实达到了延迟执行的目的，没有阻塞后面脚本的加载和执行。但是耗时的操作还是会阻塞DOMContentLoaded事件，而大多数情况下大家都会把页面初始化的脚本附加在DOMContentLoaded事件上，所以defer方法还是不能很好解决这个问题。\n\n2.Script DOM\n　　这是最常用也是现在普遍的解决方法。它只需要简单几句话就可以实现脚本的异步加载，并且所有浏览器都支持这个方法。但是在每个浏览器中，执行还是略有不同。看下面这个例子：\n```html\n<html>\n  <meta charset=\"utf-8\">\n  <head>\n    <script type=\"text/javascript\">\n      var result = \"\\n\" ;\n      var head = document.getElementsByTagName(\"head\")[0] ;\n      //DOMContentLoaded\n      if(window.addEventListener){\n        document.addEventListener(\"DOMContentLoaded\",function(){\n          alert(\"DOMContentLoaded\") ;\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }else{\n        document.attachEvent(\"onDOMContentLoaded\",function(){\n          alert(\"DOMContentLoaded\") ;\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }\n      window.onload = function(){\n      \tresult += \"window loaded\\n\";\n      } ;\n    </script>\n    <!--头部外部延迟脚本 External Head Script defer-->\n    <script type=\"text/javascript\" src = \"external_head_defer.js\" defer=\"defer\"></script>\n    <!--头部行内脚本 External Head Script-->\n    <script type=\"text/javascript\" src = \"external_head.js\"></script>\n  </head>\n  <body>\n    <button>SHOW</button>\n    <script type=\"text/javascript\">\n      document.getElementsByTagName(\"button\")[0].onclick = function(){console.log(result);} ;\n    </script>\n    <script type=\"text/javascript\">\n      result += \"start\\n\" ;\n      var head = document.getElementsByTagName(\"head\")[0] ;\n      var script8 = document.createElement(\"script\") ;\n      script8.type = \"text/javascript\" ;\n      script8.onload = function(){alert(\"done\");} ;\n      script8.readystatechange = function(){\n      \tif(script8.readyState == \"loaded\" || script8.readyState == \"complete\"){\n      \t\talert(\"done\") ;\n      \t}\n      } ;\n      //Body Dynamic Script\n      script8.src = \"dynamic_body.js\" ;\n      head.appendChild(script8) ;\n      result += \"end\\n\" ;\n    </script>    \n  </body>\n</html>\n```\n运行结果如下:\n![ScriptDom][2]\n　　下面这张图是在ScriptDom脚本后面加入一个耗时的脚本，使得这个脚本执行完成后，保证ScriptDOM的脚本处于可执行状态：\n```javascript\n<script type=\"text/javascript\">\n    function doSomething(length){\n\t\tvar start = new Date().getTime() ;\n\t\twhile((new Date().getTime() - start) < 1000 * length){}\n\t}\n\tdoSomething(3) ;\n</script>  \n```\n结果如下：\n![ScriptDOM][3]\n运行结果同时也说明了几个问题：\n　　首先，ScriptDOM不会阻塞后续脚本的执行，根据start和end 的位置可以很容易看出。\n　　其次，在第二张图的情况下，ScriptDOM和defer同时都可以执行，在不同浏览器中它们的优先级的不一样的。在Firfox和Chrome中，ScriptDOM的优先级比defer低，而在IE中情况则相反。\n　　最后，通过两种情况的对比发现，在Chrome中ScriptDOM不会阻塞DOMContentLoaded事件但是会阻塞onload事件；在Firefox中ScriptDOM既会阻塞DOMContentLoaded事件也会阻塞onload事件；而在IE中，情况则要根据代码执行情况来决定。如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于可执行状态，那么就会阻塞两个事件；如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于不可执行状态，那么就不会阻塞两个事件。总结的来说就是在Chrome和IE中DOMContentLoaded事件不需要等待ScriptDOM执行，而在Firefox中需要等待ScriptDOM执行。\n\n　　通过上面两种方法的对比发现，defer和ScriptDOM都不会阻塞后续脚本的执行。但是相对来说，ScriptDOM在使用上更加灵活而且并不总是阻塞DOMContentLoaded事件，并且ScriptDOM的使用场景主要是在按需加载和模块加载器上，而一般使用这些技术的时候，页面已经处于加载完成的状态，所以对于性能不会有影响。\n　　\n# DOMContentLoaded\n　　上面说到DOMContentLoaded事件，DOMcontentLoaded是现代浏览器才支持的一个事件，万恶的IE从IE9开始才支持这个事件。那么在什么情况下才会触发DOMContentLoaded事件呢？DOMContentLoaded会在浏览器接收到服务器传过来的HTML文档，整个页面DOM结构加载完成并且所有行内脚本和外部脚本执行完成后触发 (通过上面异步脚本的例子可以看出，ScriptDOM异步加载脚本不会阻塞DOMContentLoaded，或者说DOMContentLoaded不需要等待ScriptDOM执行就可以出发) ，它跟onload事件的区别是，DOMContentLoaded事件不需要等待图片，ifram和样式表等资源加载完成就会触发，而onload事件需要等待整个页面都加载完成包括各种资源才会触发。所以对于我们来说DOMContentLoaded是一个更有用的事件，因为只要DOM结构加载完成，我们就可以通过Javasscript来操作页面上的DOM节点。\n　　但是上面关于DOMContentLoaded事件触发条件的定义只是官方文档的说法，具体情况并不总是这样。\n　　有时样式表的加载会阻塞脚本的执行从而阻塞DOMContentLoaded事件，这种情况一般出现在样式表后面跟着脚本。也就是说如果把脚本放在样式表后面，那么脚本就必须等到样式表加载完成才能开始执行，这样就会阻塞页面的DOMContentLoaded事件。但是这样做也是有道理的，因为有时候我们的脚本会处理DOM样式方面的东西。\n　　这种阻塞情况在不同浏览器上表现也会不一样。在IE和Firefox中，不管样式表后面跟着是行内脚本还是外部脚本，都会发生阻塞。在Chrome中，只有外部脚本才会发生阻塞。\n　　由于IE在IE9以下不支持DOMContentLoaded事件，所以我们需要用一些Hack技术来实现这个功能。分两种情况来实现：\n　　1.网页不嵌套在iframe中\n　　在IE中我们可以通过一个方式来判断DOM是否加载完成，就是doScroll方法。如果DOM加载完成，那么我们就可以调用document的doScroll方法，否则就会抛出异常。我们可以利用这个特性不断轮询来做Hack。\n```javascript\n    function bindReady(handle){\n        //判断是否在iframe中\n        try{\n            var isFrame = window.frameElement != null ;\n        }catch(e){}\n        if(document.documentElement.doScroll && !isFrame){\n            //轮询是否可以调用doScroll方法\n            function tryScroll(){\n                try{\n                    document.documentElement.doScroll(\"left\");\n                    handle() ;\n                }catch(e){\n                    setTimeout(tryScroll,10) ;\n                }\n            }\n            tryScroll() ;\n        }\n    }\n```\n　　2.网页嵌套在iframe中\n　　如果网页嵌套在iframe中，那么是无法通过doScroll的方法来Hack实现DOMContentLoaded的。我们可以通过另外一种方式来实现---readystatechange，代码如下：\n```javascript\n    function bindReady(handle){\n        document.onreadystatechange = function(){\n            if(document.readyState === \"complete\" || document.readyState === \"loaded\"){\n                handle() ;\n            }\n        }\n    }\n```\n　　结合上面的讨论，我们可以得出一个通用的bindReady方法。\n```javascript\n//绑定DOMContentLoaded事件，支持绑定多个处理函数\nvar handleList = [] ;\nfunction onReady(handle){\n    //按顺序执行处理函数\n    var doHandles = function(){\n        var length = handleList.length ;\n        for(var i = 0 ; i < length ; i ++){\n            handleList[i]() ;\n        }\n    }\n    if(handleList.length == 0){\n        //在还没有处理函数时，把doHandles注册到ready上，这样后面加入的处理函数就可以一并执行\n        bindReady(doHandles) ;\n    }\n    //把处理函数加入到函数列表中\n    handleList.push(handle) ;\n}\nfunction bindReady(handle){\n    var called = false ;\n    var ready = function(){\n        //防止重复调用\n        if(!called){\n            called = true ;\n            handle() ;\n        }\n    }\n    if(document.addEventListener){\n        //支持DOMcontentLoaded\n        document.addEventListener(\"DOMContentLoaded\",ready,false);\n    }else if(document.attachEvent){\n        //IE\n        try{\n            var isFrame = window.frameElement != null ;\n        }catch(e){}\n        //网页不在iframe中\n        if(document.documentElement.doScroll && !isFrame){\n            function tryScroll(){\n                try{\n                    document.documentElement.doScroll(\"left\") ;\n                    ready() ;\n                }catch(e){\n                    setTimeout(tryScroll,10) ;\n                }\n            }\n            tryScroll() ;\n        }else{\n            //网页在iframe中\n            document.onreadystatechange = function(){\n                if(document.readyState === \"complete\" || document.readyState === \"loaded\"){\n                    ready() ;\n                }\n            }\n        }\n    }\n    //老式浏览器不支持上面两种事件\n    if(window.addEventListener){\n        window.addEventListener(\"load\",ready,false) ;\n    }else if(window.attachEvent){\n        window.attachEvent(\"onload\",ready) ;\n    }else{\n        //允许绑定多个处理函数\n        var fn = window.onload ;\n        window.onload = function(){\n            fn && fn() ;\n            ready() ;\n        }\n    }\n}\n```\n# 说在最后\n　　说了这么多，虽然通过脚本后置和异步加载可以降低脚本加载对页面的影响，但是就算是实现了异步加载，但是由于浏览器的脚本解析的单线程的，所以脚本执行的时候仍然会阻塞整个页面(当然除了使用Web Worker)，这时候用户是无法完成正常交互的，所以要想真正彻底的优化页面加载，还需要从代码的优化开始。从下一篇开始，我会分享关于这方面的学习。\n\n  [1]: http://segmentfault.com/img/bVcn15\n  [2]: http://segmentfault.com/img/bVcn17\n  [3]: http://segmentfault.com/img/bVcn19\n","source":"_posts/frontend-optimization-javascript-async-load.md","raw":"title: 前端优化-Javascript篇(2.异步加载脚本)\ndate: 2014-06-02 14:43:19\ntags: ['javascript', '前端优化']\n---\n上篇博客说过脚本后置可以使页面更快的加载，可是这样的优化还是有限的，如果脚本需要执行一个耗时的操作，就算后置了它还是会阻塞后续脚本加载和执行并且阻塞整个页面。下面介绍非阻塞加载脚本技术也就是异步加载。\n<!-- more -->\n# 非阻塞加载脚本\n1.defer(关于defer的一篇[好文](https://hacks.mozilla.org/2009/06/defer/))\n　　目前所有浏览器都支持defer属性，但是Chrome和Firefox中只有在加载外部脚本时defer才会生效，行内脚本使用defer是没有作用的。而IE中不论什么情况，defer都有效。\n　　defer的作用就是阻止脚本在下载完成后立刻执行，它会让脚本延迟到所有脚本加载执行完成后，在DOMContentLoaded之前执行，通俗的说就是顺序加载延迟执行。虽然都是在DOMContentLoaded之前执行，但是在不同浏览器之间，执行的各种脚本执行的顺序还是不一样的。看下面这个例子：\n```html\n<html>\n  <meta charset=\"utf-8\">\n  <head>\n    <script type=\"text/javascript\">\n      var result = \"\" ;\n      var head = document.getElementsByTagName(\"head\")[0] ;\n      //DOMContentLoaded\n      if(window.addEventListener){\n        document.addEventListener(\"DOMContentLoaded\",function(){\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }else{\n        document.attachEvent(\"onDOMContentLoaded\",function(){\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }\n      window.onload = function(){\n      \tresult += \"window loaded\\n\";\n      \t//console.log(\"window loaded\") ;\n      } ;\n    </script>\n    <!--头部行内延迟脚本-->\n    <script type=\"text/javascript\" defer = \"defer\">\n      result += \"Head Inline Script defer\\n\" ;\n    </script>\n    <!--头部行内脚本-->\n    <script type=\"text/javascript\">\n      result += \"Head Inline Script\\n\" ;\n    </script>\n    <!--头部外部延迟脚本 External Head Script defer-->\n    <script type=\"text/javascript\" src = \"external_head_defer.js\" defer=\"defer\"></script>\n    <!--头部行内脚本 External Head Script-->\n    <script type=\"text/javascript\" src = \"external_head.js\"></script>\n  </head>\n  <body>\n    <button>SHOW</button>\n    <!--Body行内延迟脚本-->  \n    <script type=\"text/javascript\" defer = \"defer\">\n      result += \"Body Inline Script defer\\n\" ;\n    </script>\n    <!--Body行内脚本-->\n    <script type=\"text/javascript\">\n      result += \"Body Inline Script\\n\" ;\n    </script>\n    <!--Body外部延迟脚本 External Body Script defer-->\n    <script type=\"text/javascript\" defer = \"defer\" src = \"external_body_defer.js\"></script>\n    <!--Body外部脚本 External Body Script-->\n    <script type=\"text/javascript\" src = \"external_body.js\"></script>\n    <script type=\"text/javascript\">\n      document.getElementsByTagName(\"button\")[0].onclick = function(){console.log(result);} ;\n    </script>\n  </body>\n</html>\n```\n运行结果如下：\n![Defer][1]\n从上面可以看出几个问题：\n　　首先，IE9以下不支持DOMContentLoaded(后面会说明这个情况)\n　　其次，验证了上面说的Chrome和Firefox行内脚本不支持defer属性\n　　最后，defer确实达到了延迟执行的目的，没有阻塞后面脚本的加载和执行。但是耗时的操作还是会阻塞DOMContentLoaded事件，而大多数情况下大家都会把页面初始化的脚本附加在DOMContentLoaded事件上，所以defer方法还是不能很好解决这个问题。\n\n2.Script DOM\n　　这是最常用也是现在普遍的解决方法。它只需要简单几句话就可以实现脚本的异步加载，并且所有浏览器都支持这个方法。但是在每个浏览器中，执行还是略有不同。看下面这个例子：\n```html\n<html>\n  <meta charset=\"utf-8\">\n  <head>\n    <script type=\"text/javascript\">\n      var result = \"\\n\" ;\n      var head = document.getElementsByTagName(\"head\")[0] ;\n      //DOMContentLoaded\n      if(window.addEventListener){\n        document.addEventListener(\"DOMContentLoaded\",function(){\n          alert(\"DOMContentLoaded\") ;\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }else{\n        document.attachEvent(\"onDOMContentLoaded\",function(){\n          alert(\"DOMContentLoaded\") ;\n          result += \"DOMContentLoaded\\n\" ;\n        }) ;\n      }\n      window.onload = function(){\n      \tresult += \"window loaded\\n\";\n      } ;\n    </script>\n    <!--头部外部延迟脚本 External Head Script defer-->\n    <script type=\"text/javascript\" src = \"external_head_defer.js\" defer=\"defer\"></script>\n    <!--头部行内脚本 External Head Script-->\n    <script type=\"text/javascript\" src = \"external_head.js\"></script>\n  </head>\n  <body>\n    <button>SHOW</button>\n    <script type=\"text/javascript\">\n      document.getElementsByTagName(\"button\")[0].onclick = function(){console.log(result);} ;\n    </script>\n    <script type=\"text/javascript\">\n      result += \"start\\n\" ;\n      var head = document.getElementsByTagName(\"head\")[0] ;\n      var script8 = document.createElement(\"script\") ;\n      script8.type = \"text/javascript\" ;\n      script8.onload = function(){alert(\"done\");} ;\n      script8.readystatechange = function(){\n      \tif(script8.readyState == \"loaded\" || script8.readyState == \"complete\"){\n      \t\talert(\"done\") ;\n      \t}\n      } ;\n      //Body Dynamic Script\n      script8.src = \"dynamic_body.js\" ;\n      head.appendChild(script8) ;\n      result += \"end\\n\" ;\n    </script>    \n  </body>\n</html>\n```\n运行结果如下:\n![ScriptDom][2]\n　　下面这张图是在ScriptDom脚本后面加入一个耗时的脚本，使得这个脚本执行完成后，保证ScriptDOM的脚本处于可执行状态：\n```javascript\n<script type=\"text/javascript\">\n    function doSomething(length){\n\t\tvar start = new Date().getTime() ;\n\t\twhile((new Date().getTime() - start) < 1000 * length){}\n\t}\n\tdoSomething(3) ;\n</script>  \n```\n结果如下：\n![ScriptDOM][3]\n运行结果同时也说明了几个问题：\n　　首先，ScriptDOM不会阻塞后续脚本的执行，根据start和end 的位置可以很容易看出。\n　　其次，在第二张图的情况下，ScriptDOM和defer同时都可以执行，在不同浏览器中它们的优先级的不一样的。在Firfox和Chrome中，ScriptDOM的优先级比defer低，而在IE中情况则相反。\n　　最后，通过两种情况的对比发现，在Chrome中ScriptDOM不会阻塞DOMContentLoaded事件但是会阻塞onload事件；在Firefox中ScriptDOM既会阻塞DOMContentLoaded事件也会阻塞onload事件；而在IE中，情况则要根据代码执行情况来决定。如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于可执行状态，那么就会阻塞两个事件；如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于不可执行状态，那么就不会阻塞两个事件。总结的来说就是在Chrome和IE中DOMContentLoaded事件不需要等待ScriptDOM执行，而在Firefox中需要等待ScriptDOM执行。\n\n　　通过上面两种方法的对比发现，defer和ScriptDOM都不会阻塞后续脚本的执行。但是相对来说，ScriptDOM在使用上更加灵活而且并不总是阻塞DOMContentLoaded事件，并且ScriptDOM的使用场景主要是在按需加载和模块加载器上，而一般使用这些技术的时候，页面已经处于加载完成的状态，所以对于性能不会有影响。\n　　\n# DOMContentLoaded\n　　上面说到DOMContentLoaded事件，DOMcontentLoaded是现代浏览器才支持的一个事件，万恶的IE从IE9开始才支持这个事件。那么在什么情况下才会触发DOMContentLoaded事件呢？DOMContentLoaded会在浏览器接收到服务器传过来的HTML文档，整个页面DOM结构加载完成并且所有行内脚本和外部脚本执行完成后触发 (通过上面异步脚本的例子可以看出，ScriptDOM异步加载脚本不会阻塞DOMContentLoaded，或者说DOMContentLoaded不需要等待ScriptDOM执行就可以出发) ，它跟onload事件的区别是，DOMContentLoaded事件不需要等待图片，ifram和样式表等资源加载完成就会触发，而onload事件需要等待整个页面都加载完成包括各种资源才会触发。所以对于我们来说DOMContentLoaded是一个更有用的事件，因为只要DOM结构加载完成，我们就可以通过Javasscript来操作页面上的DOM节点。\n　　但是上面关于DOMContentLoaded事件触发条件的定义只是官方文档的说法，具体情况并不总是这样。\n　　有时样式表的加载会阻塞脚本的执行从而阻塞DOMContentLoaded事件，这种情况一般出现在样式表后面跟着脚本。也就是说如果把脚本放在样式表后面，那么脚本就必须等到样式表加载完成才能开始执行，这样就会阻塞页面的DOMContentLoaded事件。但是这样做也是有道理的，因为有时候我们的脚本会处理DOM样式方面的东西。\n　　这种阻塞情况在不同浏览器上表现也会不一样。在IE和Firefox中，不管样式表后面跟着是行内脚本还是外部脚本，都会发生阻塞。在Chrome中，只有外部脚本才会发生阻塞。\n　　由于IE在IE9以下不支持DOMContentLoaded事件，所以我们需要用一些Hack技术来实现这个功能。分两种情况来实现：\n　　1.网页不嵌套在iframe中\n　　在IE中我们可以通过一个方式来判断DOM是否加载完成，就是doScroll方法。如果DOM加载完成，那么我们就可以调用document的doScroll方法，否则就会抛出异常。我们可以利用这个特性不断轮询来做Hack。\n```javascript\n    function bindReady(handle){\n        //判断是否在iframe中\n        try{\n            var isFrame = window.frameElement != null ;\n        }catch(e){}\n        if(document.documentElement.doScroll && !isFrame){\n            //轮询是否可以调用doScroll方法\n            function tryScroll(){\n                try{\n                    document.documentElement.doScroll(\"left\");\n                    handle() ;\n                }catch(e){\n                    setTimeout(tryScroll,10) ;\n                }\n            }\n            tryScroll() ;\n        }\n    }\n```\n　　2.网页嵌套在iframe中\n　　如果网页嵌套在iframe中，那么是无法通过doScroll的方法来Hack实现DOMContentLoaded的。我们可以通过另外一种方式来实现---readystatechange，代码如下：\n```javascript\n    function bindReady(handle){\n        document.onreadystatechange = function(){\n            if(document.readyState === \"complete\" || document.readyState === \"loaded\"){\n                handle() ;\n            }\n        }\n    }\n```\n　　结合上面的讨论，我们可以得出一个通用的bindReady方法。\n```javascript\n//绑定DOMContentLoaded事件，支持绑定多个处理函数\nvar handleList = [] ;\nfunction onReady(handle){\n    //按顺序执行处理函数\n    var doHandles = function(){\n        var length = handleList.length ;\n        for(var i = 0 ; i < length ; i ++){\n            handleList[i]() ;\n        }\n    }\n    if(handleList.length == 0){\n        //在还没有处理函数时，把doHandles注册到ready上，这样后面加入的处理函数就可以一并执行\n        bindReady(doHandles) ;\n    }\n    //把处理函数加入到函数列表中\n    handleList.push(handle) ;\n}\nfunction bindReady(handle){\n    var called = false ;\n    var ready = function(){\n        //防止重复调用\n        if(!called){\n            called = true ;\n            handle() ;\n        }\n    }\n    if(document.addEventListener){\n        //支持DOMcontentLoaded\n        document.addEventListener(\"DOMContentLoaded\",ready,false);\n    }else if(document.attachEvent){\n        //IE\n        try{\n            var isFrame = window.frameElement != null ;\n        }catch(e){}\n        //网页不在iframe中\n        if(document.documentElement.doScroll && !isFrame){\n            function tryScroll(){\n                try{\n                    document.documentElement.doScroll(\"left\") ;\n                    ready() ;\n                }catch(e){\n                    setTimeout(tryScroll,10) ;\n                }\n            }\n            tryScroll() ;\n        }else{\n            //网页在iframe中\n            document.onreadystatechange = function(){\n                if(document.readyState === \"complete\" || document.readyState === \"loaded\"){\n                    ready() ;\n                }\n            }\n        }\n    }\n    //老式浏览器不支持上面两种事件\n    if(window.addEventListener){\n        window.addEventListener(\"load\",ready,false) ;\n    }else if(window.attachEvent){\n        window.attachEvent(\"onload\",ready) ;\n    }else{\n        //允许绑定多个处理函数\n        var fn = window.onload ;\n        window.onload = function(){\n            fn && fn() ;\n            ready() ;\n        }\n    }\n}\n```\n# 说在最后\n　　说了这么多，虽然通过脚本后置和异步加载可以降低脚本加载对页面的影响，但是就算是实现了异步加载，但是由于浏览器的脚本解析的单线程的，所以脚本执行的时候仍然会阻塞整个页面(当然除了使用Web Worker)，这时候用户是无法完成正常交互的，所以要想真正彻底的优化页面加载，还需要从代码的优化开始。从下一篇开始，我会分享关于这方面的学习。\n\n  [1]: http://segmentfault.com/img/bVcn15\n  [2]: http://segmentfault.com/img/bVcn17\n  [3]: http://segmentfault.com/img/bVcn19\n","slug":"frontend-optimization-javascript-async-load","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvjw00030povn42bt94w","content":"<p>上篇博客说过脚本后置可以使页面更快的加载，可是这样的优化还是有限的，如果脚本需要执行一个耗时的操作，就算后置了它还是会阻塞后续脚本加载和执行并且阻塞整个页面。下面介绍非阻塞加载脚本技术也就是异步加载。<br><a id=\"more\"></a></p>\n<h1 id=\"非阻塞加载脚本\"><a href=\"#非阻塞加载脚本\" class=\"headerlink\" title=\"非阻塞加载脚本\"></a>非阻塞加载脚本</h1><p>1.defer(关于defer的一篇<a href=\"https://hacks.mozilla.org/2009/06/defer/\" target=\"_blank\" rel=\"external\">好文</a>)<br>　　目前所有浏览器都支持defer属性，但是Chrome和Firefox中只有在加载外部脚本时defer才会生效，行内脚本使用defer是没有作用的。而IE中不论什么情况，defer都有效。<br>　　defer的作用就是阻止脚本在下载完成后立刻执行，它会让脚本延迟到所有脚本加载执行完成后，在DOMContentLoaded之前执行，通俗的说就是顺序加载延迟执行。虽然都是在DOMContentLoaded之前执行，但是在不同浏览器之间，执行的各种脚本执行的顺序还是不一样的。看下面这个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      var result = \"\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      //DOMContentLoaded</div><div class=\"line\">      if(window.addEventListener)&#123;</div><div class=\"line\">        document.addEventListener(\"DOMContentLoaded\",function()&#123;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;else&#123;</div><div class=\"line\">        document.attachEvent(\"onDOMContentLoaded\",function()&#123;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      window.onload = function()&#123;</div><div class=\"line\">      \tresult += \"window loaded\\n\";</div><div class=\"line\">      \t//console.log(\"window loaded\") ;</div><div class=\"line\">      &#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内延迟脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Head Inline Script defer\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Head Inline Script\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部外部延迟脚本 External Head Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head_defer.js\"</span> <span class=\"attr\">defer</span>=<span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本 External Head Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>SHOW<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body行内延迟脚本--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Body Inline Script defer\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body行内脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Body Inline Script\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body外部延迟脚本 External Body Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_body_defer.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body外部脚本 External Body Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_body.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      document.getElementsByTagName(\"button\")[0].onclick = function()&#123;console.log(result);&#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><img src=\"http://segmentfault.com/img/bVcn15\" alt=\"Defer\"><br>从上面可以看出几个问题：<br>　　首先，IE9以下不支持DOMContentLoaded(后面会说明这个情况)<br>　　其次，验证了上面说的Chrome和Firefox行内脚本不支持defer属性<br>　　最后，defer确实达到了延迟执行的目的，没有阻塞后面脚本的加载和执行。但是耗时的操作还是会阻塞DOMContentLoaded事件，而大多数情况下大家都会把页面初始化的脚本附加在DOMContentLoaded事件上，所以defer方法还是不能很好解决这个问题。</p>\n<p>2.Script DOM<br>　　这是最常用也是现在普遍的解决方法。它只需要简单几句话就可以实现脚本的异步加载，并且所有浏览器都支持这个方法。但是在每个浏览器中，执行还是略有不同。看下面这个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      var result = \"\\n\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      //DOMContentLoaded</div><div class=\"line\">      if(window.addEventListener)&#123;</div><div class=\"line\">        document.addEventListener(\"DOMContentLoaded\",function()&#123;</div><div class=\"line\">          alert(\"DOMContentLoaded\") ;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;else&#123;</div><div class=\"line\">        document.attachEvent(\"onDOMContentLoaded\",function()&#123;</div><div class=\"line\">          alert(\"DOMContentLoaded\") ;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      window.onload = function()&#123;</div><div class=\"line\">      \tresult += \"window loaded\\n\";</div><div class=\"line\">      &#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部外部延迟脚本 External Head Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head_defer.js\"</span> <span class=\"attr\">defer</span>=<span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本 External Head Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>SHOW<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      document.getElementsByTagName(\"button\")[0].onclick = function()&#123;console.log(result);&#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"start\\n\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      var script8 = document.createElement(\"script\") ;</div><div class=\"line\">      script8.type = \"text/javascript\" ;</div><div class=\"line\">      script8.onload = function()&#123;alert(\"done\");&#125; ;</div><div class=\"line\">      script8.readystatechange = function()&#123;</div><div class=\"line\">      \tif(script8.readyState == \"loaded\" || script8.readyState == \"complete\")&#123;</div><div class=\"line\">      \t\talert(\"done\") ;</div><div class=\"line\">      \t&#125;</div><div class=\"line\">      &#125; ;</div><div class=\"line\">      //Body Dynamic Script</div><div class=\"line\">      script8.src = \"dynamic_body.js\" ;</div><div class=\"line\">      head.appendChild(script8) ;</div><div class=\"line\">      result += \"end\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行结果如下:<br><img src=\"http://segmentfault.com/img/bVcn17\" alt=\"ScriptDom\"><br>　　下面这张图是在ScriptDom脚本后面加入一个耗时的脚本，使得这个脚本执行完成后，保证ScriptDOM的脚本处于可执行状态：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">length</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>((<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start) &lt; <span class=\"number\">1000</span> * length)&#123;&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdoSomething(<span class=\"number\">3</span>) ;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>结果如下：<br><img src=\"http://segmentfault.com/img/bVcn19\" alt=\"ScriptDOM\"><br>运行结果同时也说明了几个问题：<br>　　首先，ScriptDOM不会阻塞后续脚本的执行，根据start和end 的位置可以很容易看出。<br>　　其次，在第二张图的情况下，ScriptDOM和defer同时都可以执行，在不同浏览器中它们的优先级的不一样的。在Firfox和Chrome中，ScriptDOM的优先级比defer低，而在IE中情况则相反。<br>　　最后，通过两种情况的对比发现，在Chrome中ScriptDOM不会阻塞DOMContentLoaded事件但是会阻塞onload事件；在Firefox中ScriptDOM既会阻塞DOMContentLoaded事件也会阻塞onload事件；而在IE中，情况则要根据代码执行情况来决定。如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于可执行状态，那么就会阻塞两个事件；如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于不可执行状态，那么就不会阻塞两个事件。总结的来说就是在Chrome和IE中DOMContentLoaded事件不需要等待ScriptDOM执行，而在Firefox中需要等待ScriptDOM执行。</p>\n<p>　　通过上面两种方法的对比发现，defer和ScriptDOM都不会阻塞后续脚本的执行。但是相对来说，ScriptDOM在使用上更加灵活而且并不总是阻塞DOMContentLoaded事件，并且ScriptDOM的使用场景主要是在按需加载和模块加载器上，而一般使用这些技术的时候，页面已经处于加载完成的状态，所以对于性能不会有影响。\n　　</p>\n<h1 id=\"DOMContentLoaded\"><a href=\"#DOMContentLoaded\" class=\"headerlink\" title=\"DOMContentLoaded\"></a>DOMContentLoaded</h1><p>　　上面说到DOMContentLoaded事件，DOMcontentLoaded是现代浏览器才支持的一个事件，万恶的IE从IE9开始才支持这个事件。那么在什么情况下才会触发DOMContentLoaded事件呢？DOMContentLoaded会在浏览器接收到服务器传过来的HTML文档，整个页面DOM结构加载完成并且所有行内脚本和外部脚本执行完成后触发 (通过上面异步脚本的例子可以看出，ScriptDOM异步加载脚本不会阻塞DOMContentLoaded，或者说DOMContentLoaded不需要等待ScriptDOM执行就可以出发) ，它跟onload事件的区别是，DOMContentLoaded事件不需要等待图片，ifram和样式表等资源加载完成就会触发，而onload事件需要等待整个页面都加载完成包括各种资源才会触发。所以对于我们来说DOMContentLoaded是一个更有用的事件，因为只要DOM结构加载完成，我们就可以通过Javasscript来操作页面上的DOM节点。<br>　　但是上面关于DOMContentLoaded事件触发条件的定义只是官方文档的说法，具体情况并不总是这样。<br>　　有时样式表的加载会阻塞脚本的执行从而阻塞DOMContentLoaded事件，这种情况一般出现在样式表后面跟着脚本。也就是说如果把脚本放在样式表后面，那么脚本就必须等到样式表加载完成才能开始执行，这样就会阻塞页面的DOMContentLoaded事件。但是这样做也是有道理的，因为有时候我们的脚本会处理DOM样式方面的东西。<br>　　这种阻塞情况在不同浏览器上表现也会不一样。在IE和Firefox中，不管样式表后面跟着是行内脚本还是外部脚本，都会发生阻塞。在Chrome中，只有外部脚本才会发生阻塞。<br>　　由于IE在IE9以下不支持DOMContentLoaded事件，所以我们需要用一些Hack技术来实现这个功能。分两种情况来实现：<br>　　1.网页不嵌套在iframe中<br>　　在IE中我们可以通过一个方式来判断DOM是否加载完成，就是doScroll方法。如果DOM加载完成，那么我们就可以调用document的doScroll方法，否则就会抛出异常。我们可以利用这个特性不断轮询来做Hack。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断是否在iframe中</span></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> isFrame = <span class=\"built_in\">window</span>.frameElement != <span class=\"literal\">null</span> ;</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.doScroll &amp;&amp; !isFrame)&#123;</div><div class=\"line\">        <span class=\"comment\">//轮询是否可以调用doScroll方法</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryScroll</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>);</div><div class=\"line\">                handle() ;</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">                setTimeout(tryScroll,<span class=\"number\">10</span>) ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        tryScroll() ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　2.网页嵌套在iframe中<br>　　如果网页嵌套在iframe中，那么是无法通过doScroll的方法来Hack实现DOMContentLoaded的。我们可以通过另外一种方式来实现—readystatechange，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span> || <span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"loaded\"</span>)&#123;</div><div class=\"line\">            handle() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　结合上面的讨论，我们可以得出一个通用的bindReady方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绑定DOMContentLoaded事件，支持绑定多个处理函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> handleList = [] ;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//按顺序执行处理函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> doHandles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> length = handleList.length ;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;</div><div class=\"line\">            handleList[i]() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(handleList.length == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//在还没有处理函数时，把doHandles注册到ready上，这样后面加入的处理函数就可以一并执行</span></div><div class=\"line\">        bindReady(doHandles) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//把处理函数加入到函数列表中</span></div><div class=\"line\">    handleList.push(handle) ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> called = <span class=\"literal\">false</span> ;</div><div class=\"line\">    <span class=\"keyword\">var</span> ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//防止重复调用</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!called)&#123;</div><div class=\"line\">            called = <span class=\"literal\">true</span> ;</div><div class=\"line\">            handle() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"comment\">//支持DOMcontentLoaded</span></div><div class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,ready,<span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"comment\">//IE</span></div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> isFrame = <span class=\"built_in\">window</span>.frameElement != <span class=\"literal\">null</span> ;</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</div><div class=\"line\">        <span class=\"comment\">//网页不在iframe中</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.doScroll &amp;&amp; !isFrame)&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryScroll</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                    <span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>) ;</div><div class=\"line\">                    ready() ;</div><div class=\"line\">                &#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">                    setTimeout(tryScroll,<span class=\"number\">10</span>) ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            tryScroll() ;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//网页在iframe中</span></div><div class=\"line\">            <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span> || <span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"loaded\"</span>)&#123;</div><div class=\"line\">                    ready() ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//老式浏览器不支持上面两种事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>,ready,<span class=\"literal\">false</span>) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.attachEvent(<span class=\"string\">\"onload\"</span>,ready) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//允许绑定多个处理函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"built_in\">window</span>.onload ;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            fn &amp;&amp; fn() ;</div><div class=\"line\">            ready() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"说在最后\"><a href=\"#说在最后\" class=\"headerlink\" title=\"说在最后\"></a>说在最后</h1><p>　　说了这么多，虽然通过脚本后置和异步加载可以降低脚本加载对页面的影响，但是就算是实现了异步加载，但是由于浏览器的脚本解析的单线程的，所以脚本执行的时候仍然会阻塞整个页面(当然除了使用Web Worker)，这时候用户是无法完成正常交互的，所以要想真正彻底的优化页面加载，还需要从代码的优化开始。从下一篇开始，我会分享关于这方面的学习。</p>\n","excerpt":"<p>上篇博客说过脚本后置可以使页面更快的加载，可是这样的优化还是有限的，如果脚本需要执行一个耗时的操作，就算后置了它还是会阻塞后续脚本加载和执行并且阻塞整个页面。下面介绍非阻塞加载脚本技术也就是异步加载。<br>","more":"</p>\n<h1 id=\"非阻塞加载脚本\"><a href=\"#非阻塞加载脚本\" class=\"headerlink\" title=\"非阻塞加载脚本\"></a>非阻塞加载脚本</h1><p>1.defer(关于defer的一篇<a href=\"https://hacks.mozilla.org/2009/06/defer/\">好文</a>)<br>　　目前所有浏览器都支持defer属性，但是Chrome和Firefox中只有在加载外部脚本时defer才会生效，行内脚本使用defer是没有作用的。而IE中不论什么情况，defer都有效。<br>　　defer的作用就是阻止脚本在下载完成后立刻执行，它会让脚本延迟到所有脚本加载执行完成后，在DOMContentLoaded之前执行，通俗的说就是顺序加载延迟执行。虽然都是在DOMContentLoaded之前执行，但是在不同浏览器之间，执行的各种脚本执行的顺序还是不一样的。看下面这个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      var result = \"\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      //DOMContentLoaded</div><div class=\"line\">      if(window.addEventListener)&#123;</div><div class=\"line\">        document.addEventListener(\"DOMContentLoaded\",function()&#123;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;else&#123;</div><div class=\"line\">        document.attachEvent(\"onDOMContentLoaded\",function()&#123;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      window.onload = function()&#123;</div><div class=\"line\">      \tresult += \"window loaded\\n\";</div><div class=\"line\">      \t//console.log(\"window loaded\") ;</div><div class=\"line\">      &#125; ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内延迟脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      result += \"Head Inline Script defer\\n\" ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      result += \"Head Inline Script\\n\" ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部外部延迟脚本 External Head Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head_defer.js\"</span> <span class=\"attr\">defer</span>=<span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本 External Head Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>SHOW<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body行内延迟脚本--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      result += \"Body Inline Script defer\\n\" ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body行内脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      result += \"Body Inline Script\\n\" ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body外部延迟脚本 External Body Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_body_defer.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body外部脚本 External Body Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_body.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      document.getElementsByTagName(\"button\")[0].onclick = function()&#123;console.log(result);&#125; ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><img src=\"http://segmentfault.com/img/bVcn15\" alt=\"Defer\"><br>从上面可以看出几个问题：<br>　　首先，IE9以下不支持DOMContentLoaded(后面会说明这个情况)<br>　　其次，验证了上面说的Chrome和Firefox行内脚本不支持defer属性<br>　　最后，defer确实达到了延迟执行的目的，没有阻塞后面脚本的加载和执行。但是耗时的操作还是会阻塞DOMContentLoaded事件，而大多数情况下大家都会把页面初始化的脚本附加在DOMContentLoaded事件上，所以defer方法还是不能很好解决这个问题。</p>\n<p>2.Script DOM<br>　　这是最常用也是现在普遍的解决方法。它只需要简单几句话就可以实现脚本的异步加载，并且所有浏览器都支持这个方法。但是在每个浏览器中，执行还是略有不同。看下面这个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      var result = \"\\n\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      //DOMContentLoaded</div><div class=\"line\">      if(window.addEventListener)&#123;</div><div class=\"line\">        document.addEventListener(\"DOMContentLoaded\",function()&#123;</div><div class=\"line\">          alert(\"DOMContentLoaded\") ;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;else&#123;</div><div class=\"line\">        document.attachEvent(\"onDOMContentLoaded\",function()&#123;</div><div class=\"line\">          alert(\"DOMContentLoaded\") ;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      window.onload = function()&#123;</div><div class=\"line\">      \tresult += \"window loaded\\n\";</div><div class=\"line\">      &#125; ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部外部延迟脚本 External Head Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head_defer.js\"</span> <span class=\"attr\">defer</span>=<span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本 External Head Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>SHOW<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      document.getElementsByTagName(\"button\")[0].onclick = function()&#123;console.log(result);&#125; ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">      result += \"start\\n\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      var script8 = document.createElement(\"script\") ;</div><div class=\"line\">      script8.type = \"text/javascript\" ;</div><div class=\"line\">      script8.onload = function()&#123;alert(\"done\");&#125; ;</div><div class=\"line\">      script8.readystatechange = function()&#123;</div><div class=\"line\">      \tif(script8.readyState == \"loaded\" || script8.readyState == \"complete\")&#123;</div><div class=\"line\">      \t\talert(\"done\") ;</div><div class=\"line\">      \t&#125;</div><div class=\"line\">      &#125; ;</div><div class=\"line\">      //Body Dynamic Script</div><div class=\"line\">      script8.src = \"dynamic_body.js\" ;</div><div class=\"line\">      head.appendChild(script8) ;</div><div class=\"line\">      result += \"end\\n\" ;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行结果如下:<br><img src=\"http://segmentfault.com/img/bVcn17\" alt=\"ScriptDom\"><br>　　下面这张图是在ScriptDom脚本后面加入一个耗时的脚本，使得这个脚本执行完成后，保证ScriptDOM的脚本处于可执行状态：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">length</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>((<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start) &lt; <span class=\"number\">1000</span> * length)&#123;&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdoSomething(<span class=\"number\">3</span>) ;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>结果如下：<br><img src=\"http://segmentfault.com/img/bVcn19\" alt=\"ScriptDOM\"><br>运行结果同时也说明了几个问题：<br>　　首先，ScriptDOM不会阻塞后续脚本的执行，根据start和end 的位置可以很容易看出。<br>　　其次，在第二张图的情况下，ScriptDOM和defer同时都可以执行，在不同浏览器中它们的优先级的不一样的。在Firfox和Chrome中，ScriptDOM的优先级比defer低，而在IE中情况则相反。<br>　　最后，通过两种情况的对比发现，在Chrome中ScriptDOM不会阻塞DOMContentLoaded事件但是会阻塞onload事件；在Firefox中ScriptDOM既会阻塞DOMContentLoaded事件也会阻塞onload事件；而在IE中，情况则要根据代码执行情况来决定。如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于可执行状态，那么就会阻塞两个事件；如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于不可执行状态，那么就不会阻塞两个事件。总结的来说就是在Chrome和IE中DOMContentLoaded事件不需要等待ScriptDOM执行，而在Firefox中需要等待ScriptDOM执行。</p>\n<p>　　通过上面两种方法的对比发现，defer和ScriptDOM都不会阻塞后续脚本的执行。但是相对来说，ScriptDOM在使用上更加灵活而且并不总是阻塞DOMContentLoaded事件，并且ScriptDOM的使用场景主要是在按需加载和模块加载器上，而一般使用这些技术的时候，页面已经处于加载完成的状态，所以对于性能不会有影响。\n　　</p>\n<h1 id=\"DOMContentLoaded\"><a href=\"#DOMContentLoaded\" class=\"headerlink\" title=\"DOMContentLoaded\"></a>DOMContentLoaded</h1><p>　　上面说到DOMContentLoaded事件，DOMcontentLoaded是现代浏览器才支持的一个事件，万恶的IE从IE9开始才支持这个事件。那么在什么情况下才会触发DOMContentLoaded事件呢？DOMContentLoaded会在浏览器接收到服务器传过来的HTML文档，整个页面DOM结构加载完成并且所有行内脚本和外部脚本执行完成后触发 (通过上面异步脚本的例子可以看出，ScriptDOM异步加载脚本不会阻塞DOMContentLoaded，或者说DOMContentLoaded不需要等待ScriptDOM执行就可以出发) ，它跟onload事件的区别是，DOMContentLoaded事件不需要等待图片，ifram和样式表等资源加载完成就会触发，而onload事件需要等待整个页面都加载完成包括各种资源才会触发。所以对于我们来说DOMContentLoaded是一个更有用的事件，因为只要DOM结构加载完成，我们就可以通过Javasscript来操作页面上的DOM节点。<br>　　但是上面关于DOMContentLoaded事件触发条件的定义只是官方文档的说法，具体情况并不总是这样。<br>　　有时样式表的加载会阻塞脚本的执行从而阻塞DOMContentLoaded事件，这种情况一般出现在样式表后面跟着脚本。也就是说如果把脚本放在样式表后面，那么脚本就必须等到样式表加载完成才能开始执行，这样就会阻塞页面的DOMContentLoaded事件。但是这样做也是有道理的，因为有时候我们的脚本会处理DOM样式方面的东西。<br>　　这种阻塞情况在不同浏览器上表现也会不一样。在IE和Firefox中，不管样式表后面跟着是行内脚本还是外部脚本，都会发生阻塞。在Chrome中，只有外部脚本才会发生阻塞。<br>　　由于IE在IE9以下不支持DOMContentLoaded事件，所以我们需要用一些Hack技术来实现这个功能。分两种情况来实现：<br>　　1.网页不嵌套在iframe中<br>　　在IE中我们可以通过一个方式来判断DOM是否加载完成，就是doScroll方法。如果DOM加载完成，那么我们就可以调用document的doScroll方法，否则就会抛出异常。我们可以利用这个特性不断轮询来做Hack。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断是否在iframe中</span></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> isFrame = <span class=\"built_in\">window</span>.frameElement != <span class=\"literal\">null</span> ;</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.doScroll &amp;&amp; !isFrame)&#123;</div><div class=\"line\">        <span class=\"comment\">//轮询是否可以调用doScroll方法</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryScroll</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>);</div><div class=\"line\">                handle() ;</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">                setTimeout(tryScroll,<span class=\"number\">10</span>) ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        tryScroll() ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　2.网页嵌套在iframe中<br>　　如果网页嵌套在iframe中，那么是无法通过doScroll的方法来Hack实现DOMContentLoaded的。我们可以通过另外一种方式来实现—readystatechange，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span> || <span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"loaded\"</span>)&#123;</div><div class=\"line\">            handle() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　结合上面的讨论，我们可以得出一个通用的bindReady方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绑定DOMContentLoaded事件，支持绑定多个处理函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> handleList = [] ;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//按顺序执行处理函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> doHandles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> length = handleList.length ;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;</div><div class=\"line\">            handleList[i]() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(handleList.length == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//在还没有处理函数时，把doHandles注册到ready上，这样后面加入的处理函数就可以一并执行</span></div><div class=\"line\">        bindReady(doHandles) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//把处理函数加入到函数列表中</span></div><div class=\"line\">    handleList.push(handle) ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> called = <span class=\"literal\">false</span> ;</div><div class=\"line\">    <span class=\"keyword\">var</span> ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//防止重复调用</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!called)&#123;</div><div class=\"line\">            called = <span class=\"literal\">true</span> ;</div><div class=\"line\">            handle() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"comment\">//支持DOMcontentLoaded</span></div><div class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,ready,<span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"comment\">//IE</span></div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> isFrame = <span class=\"built_in\">window</span>.frameElement != <span class=\"literal\">null</span> ;</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</div><div class=\"line\">        <span class=\"comment\">//网页不在iframe中</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.doScroll &amp;&amp; !isFrame)&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryScroll</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                    <span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>) ;</div><div class=\"line\">                    ready() ;</div><div class=\"line\">                &#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">                    setTimeout(tryScroll,<span class=\"number\">10</span>) ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            tryScroll() ;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//网页在iframe中</span></div><div class=\"line\">            <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span> || <span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"loaded\"</span>)&#123;</div><div class=\"line\">                    ready() ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//老式浏览器不支持上面两种事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>,ready,<span class=\"literal\">false</span>) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.attachEvent(<span class=\"string\">\"onload\"</span>,ready) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//允许绑定多个处理函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"built_in\">window</span>.onload ;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            fn &amp;&amp; fn() ;</div><div class=\"line\">            ready() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"说在最后\"><a href=\"#说在最后\" class=\"headerlink\" title=\"说在最后\"></a>说在最后</h1><p>　　说了这么多，虽然通过脚本后置和异步加载可以降低脚本加载对页面的影响，但是就算是实现了异步加载，但是由于浏览器的脚本解析的单线程的，所以脚本执行的时候仍然会阻塞整个页面(当然除了使用Web Worker)，这时候用户是无法完成正常交互的，所以要想真正彻底的优化页面加载，还需要从代码的优化开始。从下一篇开始，我会分享关于这方面的学习。</p>"},{"title":"前端优化-Javascript篇(3.标识符查找优化)","date":"2014-06-05T06:43:45.000Z","_content":"\n前面两篇文章介绍了Javascript文件在页面中位置以及异步加载问题对前端性能的影响。不过受限于单线程的原因，不管采用哪种方法，只要Javascript进行了耗时的工作，就都会引起页面的阻塞。所以在写代码的过程中应该注意一些会影响代码性能的问题，这样才能让我们的优化尽量做到极致。下面我跟大家分享关于标识符查找方面的优化问题。\n<!-- more -->\n## 函数中变量的查找\n\n### 作用域链\n　　每个函数都有一个[[Scope]]属性，指向函数的作用域链，作用域链由多个变量对象组成。这个作用域链在函数定义的时候被创建，在函数定义时，会创建一个变量对象，这个变量对象包括了函数包含块所能访问到的变量，其实就是函数包含块的执行上下文。这个变量对象会首先被放入作用域链中。\n```javascript\nfunction add(num1,num2){\n    var sum = num1 + num2 ;\n    return sum ;\n}\n```\n![请输入图片描述][1]\n　　在函数执行的时候，会创建一个叫做执行上下文的对象，这个执行上下文会用来进行函数的变量查找。执行上下文也有一个作用域链，这个作用域链就是用来进行变量查找的。当执行上下文创建时，它的作用域链会用函数的[[Scope]]属性来初始化。创建完执行上下文之后，又会创建一个叫做活动对象的变量对象并且放入作用域链的头部。这个活动对象包括所有局部变量，函数参数，arguments和this。**这也说明了一个问题，就是this的值是在运行的时候决定的，而不是定义的时候。**\n```javascript\nvar sum = add(1,2) ;\n```\n![请输入图片描述][2]\n　　每次进行变量查找时，我们都要遍历执行上下文的作用域链，直到找到为止或者返回undefined。在这个过程中，变量查找的深度就会对性能产生影响。变量查找得越深，性能就越低。\n　　由于现代浏览器对于JS的执行已经进行了优化，所以经过我的测试发现，变量查找的优化对于性能的提升不会产生太大的影响。虽然这么说，但是关于变量查找的优化方法还是可以借鉴的。\n### 作用域扩大\n　　对于正常的情况，函数执行上下文的作用域在函数执行的时候是不会发生变化的，但是有几个特例情况会使作用域发生变化，这种现象叫做动态作用域。\n#### with\n　　　with语句用来在特定作用域中引入变量对象，比如下面这段代码:\n```javascript\nfunction test(){\n    with(document){\n        var link = getElementsByTagName(\"a\") ;\n    }\n}\n```\n　　通过with语句，在with作用域内的代码都可以直接访问document中的属性和方法。这个方法虽然可以方便得访问属性，但是也带来了一些副作用。在使用with语句时，会向函数执行上下文的作用域链的头部插入一个变量对象，这个变量对象的值就是with中包含的对象，这就意味着原来在作用域中的变量对象都被往后移了一位，也就是说查找这些变量要遍历更深一层作用域链。所以我们应该尽量避免使用with语句，可以通过声明局部变量然后赋值为document的方式来取代with语句。\n#### try catch\n　　try catch语句跟with一样，也会产生同样的影响，只是这次插入到作用域链中的变量对象是catch括号中的对象，一般就是错误对象e。\n#### eval\n　　eval函数的坏处我想大家都应该知道了，通过eval执行的代码会污染全局变量,进而也会拉长变量的查找深度。\n\n## 对象属性查找\n\n### 原型和原型链\n　　每个对象都有一个指向原型prototype的属性`__proto__`，多个对象的继承就形成了原型链。下图是一个关于原型和原型链的图：\n![请输入图片描述][3]\n　　关于原型链的介绍网上已经有很多了，我这里就不做介绍了。Javascript中的继承是通过原型链实现的，这就会导致一个问题，就是经过多次继承之后，原型链会变得很长，然后对于对象属性的查找就需要遍历更长的原型链，而遍历的越深效率必然就会越低。这就是对象属性查找的时候需要优化的一个地方。\n![请输入图片描述][4]\n　　上图是一个book对象的原型继承图，很容易发现如果要访问title属性那么只要直接再book对象上查找就可以了，但是如果要访问toString方法的话，那么就需要遍历到原型链最深处，这样的话效率肯定更低。一个常用的优化的方法就是用局部变量来保存对象的属性，后面只要直接访问这个局部变量就可以了。这方法跟函数中变量查找是一个道理。\n　　现代浏览器对于对象属性的查找同样进行了优化，所以通过测试性能方面也没有太大的差别。\n　　\n## 总结\n　　上面所说的是Javascript代码优化方面常见的两个问题，虽然现代浏览器对它们都进行了优化，但是如果要适配一些比较老旧的浏览器的话，还是需要注意的。而且上面说到的优化策略也是一个很好的编程规范。\n\n  [1]: http://segmentfault.com/img/bVco7d\n  [2]: http://segmentfault.com/img/bVco7e\n  [3]: http://segmentfault.com/img/bVco7f\n  [4]: http://segmentfault.com/img/bVco7g\n","source":"_posts/frontend-optimization-javascript-identifier.md","raw":"title: 前端优化-Javascript篇(3.标识符查找优化)\ndate: 2014-06-05 14:43:45\ntags: ['javascript', '前端优化']\n---\n\n前面两篇文章介绍了Javascript文件在页面中位置以及异步加载问题对前端性能的影响。不过受限于单线程的原因，不管采用哪种方法，只要Javascript进行了耗时的工作，就都会引起页面的阻塞。所以在写代码的过程中应该注意一些会影响代码性能的问题，这样才能让我们的优化尽量做到极致。下面我跟大家分享关于标识符查找方面的优化问题。\n<!-- more -->\n## 函数中变量的查找\n\n### 作用域链\n　　每个函数都有一个[[Scope]]属性，指向函数的作用域链，作用域链由多个变量对象组成。这个作用域链在函数定义的时候被创建，在函数定义时，会创建一个变量对象，这个变量对象包括了函数包含块所能访问到的变量，其实就是函数包含块的执行上下文。这个变量对象会首先被放入作用域链中。\n```javascript\nfunction add(num1,num2){\n    var sum = num1 + num2 ;\n    return sum ;\n}\n```\n![请输入图片描述][1]\n　　在函数执行的时候，会创建一个叫做执行上下文的对象，这个执行上下文会用来进行函数的变量查找。执行上下文也有一个作用域链，这个作用域链就是用来进行变量查找的。当执行上下文创建时，它的作用域链会用函数的[[Scope]]属性来初始化。创建完执行上下文之后，又会创建一个叫做活动对象的变量对象并且放入作用域链的头部。这个活动对象包括所有局部变量，函数参数，arguments和this。**这也说明了一个问题，就是this的值是在运行的时候决定的，而不是定义的时候。**\n```javascript\nvar sum = add(1,2) ;\n```\n![请输入图片描述][2]\n　　每次进行变量查找时，我们都要遍历执行上下文的作用域链，直到找到为止或者返回undefined。在这个过程中，变量查找的深度就会对性能产生影响。变量查找得越深，性能就越低。\n　　由于现代浏览器对于JS的执行已经进行了优化，所以经过我的测试发现，变量查找的优化对于性能的提升不会产生太大的影响。虽然这么说，但是关于变量查找的优化方法还是可以借鉴的。\n### 作用域扩大\n　　对于正常的情况，函数执行上下文的作用域在函数执行的时候是不会发生变化的，但是有几个特例情况会使作用域发生变化，这种现象叫做动态作用域。\n#### with\n　　　with语句用来在特定作用域中引入变量对象，比如下面这段代码:\n```javascript\nfunction test(){\n    with(document){\n        var link = getElementsByTagName(\"a\") ;\n    }\n}\n```\n　　通过with语句，在with作用域内的代码都可以直接访问document中的属性和方法。这个方法虽然可以方便得访问属性，但是也带来了一些副作用。在使用with语句时，会向函数执行上下文的作用域链的头部插入一个变量对象，这个变量对象的值就是with中包含的对象，这就意味着原来在作用域中的变量对象都被往后移了一位，也就是说查找这些变量要遍历更深一层作用域链。所以我们应该尽量避免使用with语句，可以通过声明局部变量然后赋值为document的方式来取代with语句。\n#### try catch\n　　try catch语句跟with一样，也会产生同样的影响，只是这次插入到作用域链中的变量对象是catch括号中的对象，一般就是错误对象e。\n#### eval\n　　eval函数的坏处我想大家都应该知道了，通过eval执行的代码会污染全局变量,进而也会拉长变量的查找深度。\n\n## 对象属性查找\n\n### 原型和原型链\n　　每个对象都有一个指向原型prototype的属性`__proto__`，多个对象的继承就形成了原型链。下图是一个关于原型和原型链的图：\n![请输入图片描述][3]\n　　关于原型链的介绍网上已经有很多了，我这里就不做介绍了。Javascript中的继承是通过原型链实现的，这就会导致一个问题，就是经过多次继承之后，原型链会变得很长，然后对于对象属性的查找就需要遍历更长的原型链，而遍历的越深效率必然就会越低。这就是对象属性查找的时候需要优化的一个地方。\n![请输入图片描述][4]\n　　上图是一个book对象的原型继承图，很容易发现如果要访问title属性那么只要直接再book对象上查找就可以了，但是如果要访问toString方法的话，那么就需要遍历到原型链最深处，这样的话效率肯定更低。一个常用的优化的方法就是用局部变量来保存对象的属性，后面只要直接访问这个局部变量就可以了。这方法跟函数中变量查找是一个道理。\n　　现代浏览器对于对象属性的查找同样进行了优化，所以通过测试性能方面也没有太大的差别。\n　　\n## 总结\n　　上面所说的是Javascript代码优化方面常见的两个问题，虽然现代浏览器对它们都进行了优化，但是如果要适配一些比较老旧的浏览器的话，还是需要注意的。而且上面说到的优化策略也是一个很好的编程规范。\n\n  [1]: http://segmentfault.com/img/bVco7d\n  [2]: http://segmentfault.com/img/bVco7e\n  [3]: http://segmentfault.com/img/bVco7f\n  [4]: http://segmentfault.com/img/bVco7g\n","slug":"frontend-optimization-javascript-identifier","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvjx00040povxl3mvyf1","content":"<p>前面两篇文章介绍了Javascript文件在页面中位置以及异步加载问题对前端性能的影响。不过受限于单线程的原因，不管采用哪种方法，只要Javascript进行了耗时的工作，就都会引起页面的阻塞。所以在写代码的过程中应该注意一些会影响代码性能的问题，这样才能让我们的优化尽量做到极致。下面我跟大家分享关于标识符查找方面的优化问题。<br><a id=\"more\"></a></p>\n<h2 id=\"函数中变量的查找\"><a href=\"#函数中变量的查找\" class=\"headerlink\" title=\"函数中变量的查找\"></a>函数中变量的查找</h2><h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>　　每个函数都有一个[[Scope]]属性，指向函数的作用域链，作用域链由多个变量对象组成。这个作用域链在函数定义的时候被创建，在函数定义时，会创建一个变量对象，这个变量对象包括了函数包含块所能访问到的变量，其实就是函数包含块的执行上下文。这个变量对象会首先被放入作用域链中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = num1 + num2 ;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://segmentfault.com/img/bVco7d\" alt=\"请输入图片描述\"><br>　　在函数执行的时候，会创建一个叫做执行上下文的对象，这个执行上下文会用来进行函数的变量查找。执行上下文也有一个作用域链，这个作用域链就是用来进行变量查找的。当执行上下文创建时，它的作用域链会用函数的[[Scope]]属性来初始化。创建完执行上下文之后，又会创建一个叫做活动对象的变量对象并且放入作用域链的头部。这个活动对象包括所有局部变量，函数参数，arguments和this。<strong>这也说明了一个问题，就是this的值是在运行的时候决定的，而不是定义的时候。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = add(<span class=\"number\">1</span>,<span class=\"number\">2</span>) ;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://segmentfault.com/img/bVco7e\" alt=\"请输入图片描述\"><br>　　每次进行变量查找时，我们都要遍历执行上下文的作用域链，直到找到为止或者返回undefined。在这个过程中，变量查找的深度就会对性能产生影响。变量查找得越深，性能就越低。<br>　　由于现代浏览器对于JS的执行已经进行了优化，所以经过我的测试发现，变量查找的优化对于性能的提升不会产生太大的影响。虽然这么说，但是关于变量查找的优化方法还是可以借鉴的。</p>\n<h3 id=\"作用域扩大\"><a href=\"#作用域扩大\" class=\"headerlink\" title=\"作用域扩大\"></a>作用域扩大</h3><p>　　对于正常的情况，函数执行上下文的作用域在函数执行的时候是不会发生变化的，但是有几个特例情况会使作用域发生变化，这种现象叫做动态作用域。</p>\n<h4 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h4><p>　　　with语句用来在特定作用域中引入变量对象，比如下面这段代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">with</span>(<span class=\"built_in\">document</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> link = getElementsByTagName(<span class=\"string\">\"a\"</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　通过with语句，在with作用域内的代码都可以直接访问document中的属性和方法。这个方法虽然可以方便得访问属性，但是也带来了一些副作用。在使用with语句时，会向函数执行上下文的作用域链的头部插入一个变量对象，这个变量对象的值就是with中包含的对象，这就意味着原来在作用域中的变量对象都被往后移了一位，也就是说查找这些变量要遍历更深一层作用域链。所以我们应该尽量避免使用with语句，可以通过声明局部变量然后赋值为document的方式来取代with语句。</p>\n<h4 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try catch\"></a>try catch</h4><p>　　try catch语句跟with一样，也会产生同样的影响，只是这次插入到作用域链中的变量对象是catch括号中的对象，一般就是错误对象e。</p>\n<h4 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h4><p>　　eval函数的坏处我想大家都应该知道了，通过eval执行的代码会污染全局变量,进而也会拉长变量的查找深度。</p>\n<h2 id=\"对象属性查找\"><a href=\"#对象属性查找\" class=\"headerlink\" title=\"对象属性查找\"></a>对象属性查找</h2><h3 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h3><p>　　每个对象都有一个指向原型prototype的属性<code>__proto__</code>，多个对象的继承就形成了原型链。下图是一个关于原型和原型链的图：<br><img src=\"http://segmentfault.com/img/bVco7f\" alt=\"请输入图片描述\"><br>　　关于原型链的介绍网上已经有很多了，我这里就不做介绍了。Javascript中的继承是通过原型链实现的，这就会导致一个问题，就是经过多次继承之后，原型链会变得很长，然后对于对象属性的查找就需要遍历更长的原型链，而遍历的越深效率必然就会越低。这就是对象属性查找的时候需要优化的一个地方。<br><img src=\"http://segmentfault.com/img/bVco7g\" alt=\"请输入图片描述\"><br>　　上图是一个book对象的原型继承图，很容易发现如果要访问title属性那么只要直接再book对象上查找就可以了，但是如果要访问toString方法的话，那么就需要遍历到原型链最深处，这样的话效率肯定更低。一个常用的优化的方法就是用局部变量来保存对象的属性，后面只要直接访问这个局部变量就可以了。这方法跟函数中变量查找是一个道理。<br>　　现代浏览器对于对象属性的查找同样进行了优化，所以通过测试性能方面也没有太大的差别。\n　　</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　上面所说的是Javascript代码优化方面常见的两个问题，虽然现代浏览器对它们都进行了优化，但是如果要适配一些比较老旧的浏览器的话，还是需要注意的。而且上面说到的优化策略也是一个很好的编程规范。</p>\n","excerpt":"<p>前面两篇文章介绍了Javascript文件在页面中位置以及异步加载问题对前端性能的影响。不过受限于单线程的原因，不管采用哪种方法，只要Javascript进行了耗时的工作，就都会引起页面的阻塞。所以在写代码的过程中应该注意一些会影响代码性能的问题，这样才能让我们的优化尽量做到极致。下面我跟大家分享关于标识符查找方面的优化问题。<br>","more":"</p>\n<h2 id=\"函数中变量的查找\"><a href=\"#函数中变量的查找\" class=\"headerlink\" title=\"函数中变量的查找\"></a>函数中变量的查找</h2><h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><p>　　每个函数都有一个[[Scope]]属性，指向函数的作用域链，作用域链由多个变量对象组成。这个作用域链在函数定义的时候被创建，在函数定义时，会创建一个变量对象，这个变量对象包括了函数包含块所能访问到的变量，其实就是函数包含块的执行上下文。这个变量对象会首先被放入作用域链中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">num1,num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sum = num1 + num2 ;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://segmentfault.com/img/bVco7d\" alt=\"请输入图片描述\"><br>　　在函数执行的时候，会创建一个叫做执行上下文的对象，这个执行上下文会用来进行函数的变量查找。执行上下文也有一个作用域链，这个作用域链就是用来进行变量查找的。当执行上下文创建时，它的作用域链会用函数的[[Scope]]属性来初始化。创建完执行上下文之后，又会创建一个叫做活动对象的变量对象并且放入作用域链的头部。这个活动对象包括所有局部变量，函数参数，arguments和this。<strong>这也说明了一个问题，就是this的值是在运行的时候决定的，而不是定义的时候。</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = add(<span class=\"number\">1</span>,<span class=\"number\">2</span>) ;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://segmentfault.com/img/bVco7e\" alt=\"请输入图片描述\"><br>　　每次进行变量查找时，我们都要遍历执行上下文的作用域链，直到找到为止或者返回undefined。在这个过程中，变量查找的深度就会对性能产生影响。变量查找得越深，性能就越低。<br>　　由于现代浏览器对于JS的执行已经进行了优化，所以经过我的测试发现，变量查找的优化对于性能的提升不会产生太大的影响。虽然这么说，但是关于变量查找的优化方法还是可以借鉴的。</p>\n<h3 id=\"作用域扩大\"><a href=\"#作用域扩大\" class=\"headerlink\" title=\"作用域扩大\"></a>作用域扩大</h3><p>　　对于正常的情况，函数执行上下文的作用域在函数执行的时候是不会发生变化的，但是有几个特例情况会使作用域发生变化，这种现象叫做动态作用域。</p>\n<h4 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h4><p>　　　with语句用来在特定作用域中引入变量对象，比如下面这段代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">with</span>(<span class=\"built_in\">document</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> link = getElementsByTagName(<span class=\"string\">\"a\"</span>) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　通过with语句，在with作用域内的代码都可以直接访问document中的属性和方法。这个方法虽然可以方便得访问属性，但是也带来了一些副作用。在使用with语句时，会向函数执行上下文的作用域链的头部插入一个变量对象，这个变量对象的值就是with中包含的对象，这就意味着原来在作用域中的变量对象都被往后移了一位，也就是说查找这些变量要遍历更深一层作用域链。所以我们应该尽量避免使用with语句，可以通过声明局部变量然后赋值为document的方式来取代with语句。</p>\n<h4 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try catch\"></a>try catch</h4><p>　　try catch语句跟with一样，也会产生同样的影响，只是这次插入到作用域链中的变量对象是catch括号中的对象，一般就是错误对象e。</p>\n<h4 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h4><p>　　eval函数的坏处我想大家都应该知道了，通过eval执行的代码会污染全局变量,进而也会拉长变量的查找深度。</p>\n<h2 id=\"对象属性查找\"><a href=\"#对象属性查找\" class=\"headerlink\" title=\"对象属性查找\"></a>对象属性查找</h2><h3 id=\"原型和原型链\"><a href=\"#原型和原型链\" class=\"headerlink\" title=\"原型和原型链\"></a>原型和原型链</h3><p>　　每个对象都有一个指向原型prototype的属性<code>__proto__</code>，多个对象的继承就形成了原型链。下图是一个关于原型和原型链的图：<br><img src=\"http://segmentfault.com/img/bVco7f\" alt=\"请输入图片描述\"><br>　　关于原型链的介绍网上已经有很多了，我这里就不做介绍了。Javascript中的继承是通过原型链实现的，这就会导致一个问题，就是经过多次继承之后，原型链会变得很长，然后对于对象属性的查找就需要遍历更长的原型链，而遍历的越深效率必然就会越低。这就是对象属性查找的时候需要优化的一个地方。<br><img src=\"http://segmentfault.com/img/bVco7g\" alt=\"请输入图片描述\"><br>　　上图是一个book对象的原型继承图，很容易发现如果要访问title属性那么只要直接再book对象上查找就可以了，但是如果要访问toString方法的话，那么就需要遍历到原型链最深处，这样的话效率肯定更低。一个常用的优化的方法就是用局部变量来保存对象的属性，后面只要直接访问这个局部变量就可以了。这方法跟函数中变量查找是一个道理。<br>　　现代浏览器对于对象属性的查找同样进行了优化，所以通过测试性能方面也没有太大的差别。\n　　</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　上面所说的是Javascript代码优化方面常见的两个问题，虽然现代浏览器对它们都进行了优化，但是如果要适配一些比较老旧的浏览器的话，还是需要注意的。而且上面说到的优化策略也是一个很好的编程规范。</p>"},{"title":"前端不定期刊(1)","date":"2016-04-12T06:47:39.000Z","_content":"自己的RSS已经订阅了很多博客了，里面不乏一些Javascript Weekly之类的订阅，想到自己每天也\n看到很多不错的博客，也可以通过类似的方式分享出来，所以开设了这么一个东西。就像标题一样这个分享是不定期的，不想用一个时间把自己限定死，只要看到的好文章积累到足够的时候就会发出来跟大家分享，尽量保证文章的质量，今天是第一期，总共九篇文章。\n<!-- more -->\n1.Functional Programming for Javascript People\n\n[https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504#.ctixu2ipj](https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504)\n介绍Javascript函数式编程的一个文章，讲的比较通俗，也不是很深入，可以作为入门\n\n2.深入理解GraphGL\n\n[http://taobaofed.org/blog/2016/03/10/graphql-in-depth/](http://taobaofed.org/blog/2016/03/10/graphql-in-depth/)\n淘宝前端团队介绍GraphQL的系列文章，这篇是第一篇，大家可以关注下上面的文章，毕竟大厂文章质量还是有保障的，大家也可以了解下GraphQL，平时开发的时候可以借鉴下\n\n3.Canvas vs SVG: Choosing the Right Tool for the Job\n\n[http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/](http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/)\n对SVG和Canvas做了一个对比，分别说了对应的应用场景，在做动画的时候可以考虑一下\n\n4.前端文本截断\n\n[http://efe.baidu.com/blog/text-truncating/](http://efe.baidu.com/blog/text-truncating/)\n总结了前端开发过程中解决文本截断的方法，文本截断是平时开发过程中经常会遇到的问题，视觉设计稿经常只是给出了字符定宽的情况下显示的效果，我们在开发过程中还要考虑文本超长的情况，这篇文章给出了很好的解决方法。\n\n5.Why Everyone is Talking About Isomorphic/Universal Javascript and Why it Matters\n\n[https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905](https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905)\n同构应用越来越多的被大家提到，前后端同用一套代码，同时可以利用后端渲染在加速首页的加载，这篇文章介绍了同构应用的由来以及解决的问题。\n\n6.Exploring Angular 1.5:Lifecycle Hooks\n\n[http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html](http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html)\nAngular1.5作为一个向Angular2过渡的版本，里面加入了许多Angular2的特性，比如Component。这篇文章主要介绍Angular1.5中引入的组件生命周期相关的钩子，虽然Angular2相比较Angular1.X变化很大，但我觉得这并不会影响Angular2普及的速度\n\n7.Top 10 ReactJS Articles From Last Month\n\n[https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b](https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b)\n无意中在Medium上看到了这个Top 10的系列，每个月都会发各种Top 10的Web开发博客，大家可以关注下，另外Medium上的文章质量都不错\n\n8.揭秘微信红包：架构、抢红包算法、高并发和降级方案\n\n[http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture](http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture)\n这篇文章中整体架构上介绍了微信红包如何抗住除夕全天80.8亿个红包的，作为前端可以简单的了解一下\n\n9.CSS Modules 详解及 React 中实践\n\n[https://github.com/camsong/blog/issues/5](https://github.com/camsong/blog/issues/5)\nCSS Modules是最近比较火的CSS模块化方案，为了解决CSS模块化组件化过程中遇到的问题，有兴趣的可以看看这篇介绍：[CSS Modules:Welcome to the Future](http://glenmaddern.com/articles/css-modules)\n","source":"_posts/frontend-undated-periodical-1.md","raw":"title: 前端不定期刊(1)\ndate: 2016-04-12 14:47:39\ntags: ['frontend']\n---\n自己的RSS已经订阅了很多博客了，里面不乏一些Javascript Weekly之类的订阅，想到自己每天也\n看到很多不错的博客，也可以通过类似的方式分享出来，所以开设了这么一个东西。就像标题一样这个分享是不定期的，不想用一个时间把自己限定死，只要看到的好文章积累到足够的时候就会发出来跟大家分享，尽量保证文章的质量，今天是第一期，总共九篇文章。\n<!-- more -->\n1.Functional Programming for Javascript People\n\n[https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504#.ctixu2ipj](https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504)\n介绍Javascript函数式编程的一个文章，讲的比较通俗，也不是很深入，可以作为入门\n\n2.深入理解GraphGL\n\n[http://taobaofed.org/blog/2016/03/10/graphql-in-depth/](http://taobaofed.org/blog/2016/03/10/graphql-in-depth/)\n淘宝前端团队介绍GraphQL的系列文章，这篇是第一篇，大家可以关注下上面的文章，毕竟大厂文章质量还是有保障的，大家也可以了解下GraphQL，平时开发的时候可以借鉴下\n\n3.Canvas vs SVG: Choosing the Right Tool for the Job\n\n[http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/](http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/)\n对SVG和Canvas做了一个对比，分别说了对应的应用场景，在做动画的时候可以考虑一下\n\n4.前端文本截断\n\n[http://efe.baidu.com/blog/text-truncating/](http://efe.baidu.com/blog/text-truncating/)\n总结了前端开发过程中解决文本截断的方法，文本截断是平时开发过程中经常会遇到的问题，视觉设计稿经常只是给出了字符定宽的情况下显示的效果，我们在开发过程中还要考虑文本超长的情况，这篇文章给出了很好的解决方法。\n\n5.Why Everyone is Talking About Isomorphic/Universal Javascript and Why it Matters\n\n[https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905](https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905)\n同构应用越来越多的被大家提到，前后端同用一套代码，同时可以利用后端渲染在加速首页的加载，这篇文章介绍了同构应用的由来以及解决的问题。\n\n6.Exploring Angular 1.5:Lifecycle Hooks\n\n[http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html](http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html)\nAngular1.5作为一个向Angular2过渡的版本，里面加入了许多Angular2的特性，比如Component。这篇文章主要介绍Angular1.5中引入的组件生命周期相关的钩子，虽然Angular2相比较Angular1.X变化很大，但我觉得这并不会影响Angular2普及的速度\n\n7.Top 10 ReactJS Articles From Last Month\n\n[https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b](https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b)\n无意中在Medium上看到了这个Top 10的系列，每个月都会发各种Top 10的Web开发博客，大家可以关注下，另外Medium上的文章质量都不错\n\n8.揭秘微信红包：架构、抢红包算法、高并发和降级方案\n\n[http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture](http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture)\n这篇文章中整体架构上介绍了微信红包如何抗住除夕全天80.8亿个红包的，作为前端可以简单的了解一下\n\n9.CSS Modules 详解及 React 中实践\n\n[https://github.com/camsong/blog/issues/5](https://github.com/camsong/blog/issues/5)\nCSS Modules是最近比较火的CSS模块化方案，为了解决CSS模块化组件化过程中遇到的问题，有兴趣的可以看看这篇介绍：[CSS Modules:Welcome to the Future](http://glenmaddern.com/articles/css-modules)\n","slug":"frontend-undated-periodical-1","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvjz00060povvhlispjt","content":"<p>自己的RSS已经订阅了很多博客了，里面不乏一些Javascript Weekly之类的订阅，想到自己每天也<br>看到很多不错的博客，也可以通过类似的方式分享出来，所以开设了这么一个东西。就像标题一样这个分享是不定期的，不想用一个时间把自己限定死，只要看到的好文章积累到足够的时候就会发出来跟大家分享，尽量保证文章的质量，今天是第一期，总共九篇文章。<br><a id=\"more\"></a><br>1.Functional Programming for Javascript People</p>\n<p><a href=\"https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504\" target=\"_blank\" rel=\"external\">https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504#.ctixu2ipj</a><br>介绍Javascript函数式编程的一个文章，讲的比较通俗，也不是很深入，可以作为入门</p>\n<p>2.深入理解GraphGL</p>\n<p><a href=\"http://taobaofed.org/blog/2016/03/10/graphql-in-depth/\" target=\"_blank\" rel=\"external\">http://taobaofed.org/blog/2016/03/10/graphql-in-depth/</a><br>淘宝前端团队介绍GraphQL的系列文章，这篇是第一篇，大家可以关注下上面的文章，毕竟大厂文章质量还是有保障的，大家也可以了解下GraphQL，平时开发的时候可以借鉴下</p>\n<p>3.Canvas vs SVG: Choosing the Right Tool for the Job</p>\n<p><a href=\"http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/\" target=\"_blank\" rel=\"external\">http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/</a><br>对SVG和Canvas做了一个对比，分别说了对应的应用场景，在做动画的时候可以考虑一下</p>\n<p>4.前端文本截断</p>\n<p><a href=\"http://efe.baidu.com/blog/text-truncating/\" target=\"_blank\" rel=\"external\">http://efe.baidu.com/blog/text-truncating/</a><br>总结了前端开发过程中解决文本截断的方法，文本截断是平时开发过程中经常会遇到的问题，视觉设计稿经常只是给出了字符定宽的情况下显示的效果，我们在开发过程中还要考虑文本超长的情况，这篇文章给出了很好的解决方法。</p>\n<p>5.Why Everyone is Talking About Isomorphic/Universal Javascript and Why it Matters</p>\n<p><a href=\"https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905\" target=\"_blank\" rel=\"external\">https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905</a><br>同构应用越来越多的被大家提到，前后端同用一套代码，同时可以利用后端渲染在加速首页的加载，这篇文章介绍了同构应用的由来以及解决的问题。</p>\n<p>6.Exploring Angular 1.5:Lifecycle Hooks</p>\n<p><a href=\"http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html\" target=\"_blank\" rel=\"external\">http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html</a><br>Angular1.5作为一个向Angular2过渡的版本，里面加入了许多Angular2的特性，比如Component。这篇文章主要介绍Angular1.5中引入的组件生命周期相关的钩子，虽然Angular2相比较Angular1.X变化很大，但我觉得这并不会影响Angular2普及的速度</p>\n<p>7.Top 10 ReactJS Articles From Last Month</p>\n<p><a href=\"https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b\" target=\"_blank\" rel=\"external\">https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b</a><br>无意中在Medium上看到了这个Top 10的系列，每个月都会发各种Top 10的Web开发博客，大家可以关注下，另外Medium上的文章质量都不错</p>\n<p>8.揭秘微信红包：架构、抢红包算法、高并发和降级方案</p>\n<p><a href=\"http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture</a><br>这篇文章中整体架构上介绍了微信红包如何抗住除夕全天80.8亿个红包的，作为前端可以简单的了解一下</p>\n<p>9.CSS Modules 详解及 React 中实践</p>\n<p><a href=\"https://github.com/camsong/blog/issues/5\" target=\"_blank\" rel=\"external\">https://github.com/camsong/blog/issues/5</a><br>CSS Modules是最近比较火的CSS模块化方案，为了解决CSS模块化组件化过程中遇到的问题，有兴趣的可以看看这篇介绍：<a href=\"http://glenmaddern.com/articles/css-modules\" target=\"_blank\" rel=\"external\">CSS Modules:Welcome to the Future</a></p>\n","excerpt":"<p>自己的RSS已经订阅了很多博客了，里面不乏一些Javascript Weekly之类的订阅，想到自己每天也<br>看到很多不错的博客，也可以通过类似的方式分享出来，所以开设了这么一个东西。就像标题一样这个分享是不定期的，不想用一个时间把自己限定死，只要看到的好文章积累到足够的时候就会发出来跟大家分享，尽量保证文章的质量，今天是第一期，总共九篇文章。<br>","more":"<br>1.Functional Programming for Javascript People</p>\n<p><a href=\"https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504\">https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504#.ctixu2ipj</a><br>介绍Javascript函数式编程的一个文章，讲的比较通俗，也不是很深入，可以作为入门</p>\n<p>2.深入理解GraphGL</p>\n<p><a href=\"http://taobaofed.org/blog/2016/03/10/graphql-in-depth/\">http://taobaofed.org/blog/2016/03/10/graphql-in-depth/</a><br>淘宝前端团队介绍GraphQL的系列文章，这篇是第一篇，大家可以关注下上面的文章，毕竟大厂文章质量还是有保障的，大家也可以了解下GraphQL，平时开发的时候可以借鉴下</p>\n<p>3.Canvas vs SVG: Choosing the Right Tool for the Job</p>\n<p><a href=\"http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/\">http://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/</a><br>对SVG和Canvas做了一个对比，分别说了对应的应用场景，在做动画的时候可以考虑一下</p>\n<p>4.前端文本截断</p>\n<p><a href=\"http://efe.baidu.com/blog/text-truncating/\">http://efe.baidu.com/blog/text-truncating/</a><br>总结了前端开发过程中解决文本截断的方法，文本截断是平时开发过程中经常会遇到的问题，视觉设计稿经常只是给出了字符定宽的情况下显示的效果，我们在开发过程中还要考虑文本超长的情况，这篇文章给出了很好的解决方法。</p>\n<p>5.Why Everyone is Talking About Isomorphic/Universal Javascript and Why it Matters</p>\n<p><a href=\"https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905\">https://medium.com/capital-one-developers/why-everyone-is-talking-about-isomorphic-universal-javascript-and-why-it-matters-38c07c87905</a><br>同构应用越来越多的被大家提到，前后端同用一套代码，同时可以利用后端渲染在加速首页的加载，这篇文章介绍了同构应用的由来以及解决的问题。</p>\n<p>6.Exploring Angular 1.5:Lifecycle Hooks</p>\n<p><a href=\"http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html\">http://blog.thoughtram.io/angularjs/2016/03/29/exploring-angular-1.5-lifecycle-hooks.html</a><br>Angular1.5作为一个向Angular2过渡的版本，里面加入了许多Angular2的特性，比如Component。这篇文章主要介绍Angular1.5中引入的组件生命周期相关的钩子，虽然Angular2相比较Angular1.X变化很大，但我觉得这并不会影响Angular2普及的速度</p>\n<p>7.Top 10 ReactJS Articles From Last Month</p>\n<p><a href=\"https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b\">https://medium.mybridge.co/top-10-reactjs-articles-from-last-month-98978b</a><br>无意中在Medium上看到了这个Top 10的系列，每个月都会发各种Top 10的Web开发博客，大家可以关注下，另外Medium上的文章质量都不错</p>\n<p>8.揭秘微信红包：架构、抢红包算法、高并发和降级方案</p>\n<p><a href=\"http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture\">http://www.infoq.com/cn/articles/2016-hongbao-weixin-archtecture</a><br>这篇文章中整体架构上介绍了微信红包如何抗住除夕全天80.8亿个红包的，作为前端可以简单的了解一下</p>\n<p>9.CSS Modules 详解及 React 中实践</p>\n<p><a href=\"https://github.com/camsong/blog/issues/5\">https://github.com/camsong/blog/issues/5</a><br>CSS Modules是最近比较火的CSS模块化方案，为了解决CSS模块化组件化过程中遇到的问题，有兴趣的可以看看这篇介绍：<a href=\"http://glenmaddern.com/articles/css-modules\">CSS Modules:Welcome to the Future</a></p>"},{"title":"看看 Grunt 的源码（二）：grunt 任务运行相关源码解析","date":"2015-04-19T06:46:55.000Z","_content":"上一篇分享了关于grunt-cli的源码解析，这篇开始grunt核心部分代码的解析，还是从上一篇结束部分开始。\n<!-- more -->\n```javascript\n//调用grunt执行任务\nrequire(gruntpath).cli();\n```\n  `gruntpath`是通过解析得到的grunt.js的文件路径，通过`require`方法加载grunt模块然后调用模块的`cli`方法来运行命令行最后运行命令行中的任务。\n\n  我们先从大体上看看grunt从输入命令行到任务运行完毕整个过程中都经过了哪些步骤。下图是我根据源码得出的一个流程图。\n\n![图片描述][1]\n\n1. 首先，我们输入命令行之后调用`require(gruntpath).cli()`方法，在cli方法中会初始化命令行的默认参数列表，解析输入命令行的参数以及任务名称\n2. 然后调用`grunt.tasks`方法，将任务参数和名称传入。在`grunt.tasks`方法中，会进一步对参数进行解析，初始化log功能，如果参数带有version或者help选项那么直接执行相应的函数，否则就解析任务名称。\n3. 接着调用`task.init`方法。加载`Gruntfile.js`文件，注册任务信息以及配置信息。\n4. 接着调用`task.run`方法。`task.run`方法并不会运行任务，而是把任务相关信息添加到任务队列中。\n5. 最后才是调用`task.start`方法来依次运行任务队列中的任务。\n下面来一步步解析grunt核心源码。首先，来看看`lib/grunt/cli.js`文件中的代码。\n```javascript\n// 执行命令行时执行的函数\nvar cli = module.exports = function(options, done) {\n  // 利用传递的参数设置cli.options对象，但是不覆盖命令行的参数\n  if (options) {\n    Object.keys(options).forEach(function(key) {\n      if (!(key in cli.options)) {\n        // 如果输入的命令行中不存在这个参数，那么把它加入到cli的options属性中\n        cli.options[key] = options[key];\n      } else if (cli.optlist[key].type === Array) {\n        // 如果输入的命令行中存在这个参数，并且参数的类型是数组，那么把它加入到数组尾部\n        [].push.apply(cli.options[key], options[key]);\n      }\n    });\n  }\n\n  // 运行任务\n  grunt.tasks(cli.tasks, cli.options, done);\n};\n\n// 默认的参数选项列表\nvar optlist = cli.optlist = {\n  help: {\n    short: 'h',\n    info: 'Display this help text.',\n    type: Boolean\n  },\n  base: {\n    info: 'Specify an alternate base path. By default, all file paths are relative to the Gruntfile. ' +\n          '(grunt.file.setBase) *',\n    type: path\n  },\n  color: {\n    info: 'Disable colored output.',\n    type: Boolean,\n    negate: true\n  },\n  gruntfile: {\n    info: 'Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories ' +\n          'for the nearest Gruntfile.js or Gruntfile.coffee file.',\n    type: path\n  },\n  debug: {\n    short: 'd',\n    info: 'Enable debugging mode for tasks that support it.',\n    type: [Number, Boolean]\n  },\n  stack: {\n    info: 'Print a stack trace when exiting with a warning or fatal error.',\n    type: Boolean\n  },\n  force: {\n    short: 'f',\n    info: 'A way to force your way past warnings. Want a suggestion? Don\\'t use this option, fix your code.',\n    type: Boolean\n  },\n  tasks: {\n    info: 'Additional directory paths to scan for task and \"extra\" files. (grunt.loadTasks) *',\n    type: Array\n  },\n  npm: {\n    info: 'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *',\n    type: Array\n  },\n  write: {\n    info: 'Disable writing files (dry run).',\n    type: Boolean,\n    negate: true\n  },\n  verbose: {\n    short: 'v',\n    info: 'Verbose mode. A lot more information output.',\n    type: Boolean\n  },\n  version: {\n    short: 'V',\n    info: 'Print the grunt version. Combine with --verbose for more info.',\n    type: Boolean\n  },\n  completion: {\n    info: 'Output shell auto-completion rules. See the grunt-cli documentation for more information.',\n    type: String\n  },\n};\n\n// 利用optlist列表初始化aliases和known对象\n// 传递给nopt模块进行命令行参数解析\n// nopt是一个用来解析命令行参数的第三方模块\nvar aliases = {};\nvar known = {};\n\nObject.keys(optlist).forEach(function(key) {\n  var short = optlist[key].short;\n  if (short) {\n    aliases[short] = '--' + key;\n  }\n  known[key] = optlist[key].type;\n});\n\nvar parsed = nopt(known, aliases, process.argv, 2);\n// 获取命令行中的任务名称\ncli.tasks = parsed.argv.remain;\n// 获得命令行中的参数\ncli.options = parsed;\ndelete parsed.argv;\n\n// 初始化类型为数组但是还没被初始化的参数，比如npm和task\nObject.keys(optlist).forEach(function(key) {\n  if (optlist[key].type === Array && !(key in cli.options)) {\n    cli.options[key] = [];\n  }\n});\n```\n这段代码相对比较简单，主要功能就是解析任务名和参数然后传递给`grunt.tasks`方法进行调用。\n下面来看看`grunt.js`中关于`grunt.tasks`方法的代码。\n```javascript\n\n// 这个tasks方法一般只在grunt内部调用\n// tasks方法用来将任务添加到任务队列中，并且运行任务\ngrunt.tasks = function(tasks, options, done) {\n  // option模块对命令行参数进行包装\n  // init方法对参数进行了初始化，在方法内部判断传入参数是否为空\n  // 如果为空则初始化为空对象否则使用传入的对象进行初始化\n  option.init(options);\n\n  var _tasks, _options;\n  // option方法接受可变属性的参数，\n  // 如果传入一个参数则在参数对象中找出对于的参数，\n  // 如果传入两个参数则根据这两个参数设置key-value键值对，并value\n  // 同时方法内部会用正则匹配no-color、no-write的情况，\n  // 如果出现则设置option['color']或option['write']为false，并返回false\n  if (option('version')) {\n    // 如果带有version参数\n    // 输出版本信息\n    log.writeln('grunt v' + grunt.version);\n\n    if (option('verbose')) {\n      // //输出详细信息，包括grunt的路径\n      verbose.writeln('Install path: ' + path.resolve(__dirname, '..'));\n\n      grunt.log.muted = true;\n      // 初始化任务系统，解析gruntfile以便输出所有可用的任务\n      grunt.task.init([], {help: true});\n      grunt.log.muted = false;\n\n      // 输出可用的任务信息\n      _tasks = Object.keys(grunt.task._tasks).sort();\n      verbose.writeln('Available tasks: ' + _tasks.join(' '));\n\n      // 输出所有可用参数的详细信息\n      _options = [];\n      Object.keys(grunt.cli.optlist).forEach(function(long) {\n        var o = grunt.cli.optlist[long];\n        _options.push('--' + (o.negate ? 'no-' : '') + long);\n        if (o.short) { _options.push('-' + o.short); }\n      });\n      verbose.writeln('Available options: ' + _options.join(' '));\n    }\n\n    return;\n  }\n\n  // 初始化log的着色功能\n  log.initColors();\n\n  // 如果参数带有help则输出帮助信息\n  if (option('help')) {\n    help.display();\n    return;\n  }\n\n  // 根据option输出命令行参数，flags方法会过滤掉值为空的参数\n  verbose.header('Initializing').writeflags(option.flags(), 'Command-line options');\n\n  // 判断是否有传入tasks参数并且任务长度大于0\n  var tasksSpecified = tasks && tasks.length > 0;\n  //将传入参数进行转换，转换为任务数组，如果没有传入有效的任务那么使用默认default任务\n  tasks = task.parseArgs([tasksSpecified ? tasks : 'default']);\n\n  // 根据传入的tasks参数初始化任务\n  // 在方法中加载gruntfile.js文件，进行任务注册和配置的解析\n  // 也就是加载我们编写的任务代码\n  task.init(tasks, options);\n\n  verbose.writeln();\n  if (!tasksSpecified) {\n    verbose.writeln('No tasks specified, running default tasks.');\n  }\n  verbose.writeflags(tasks, 'Running tasks');\n\n  // 注册异常处理函数，输出异常信息\n  var uncaughtHandler = function(e) {\n    fail.fatal(e, fail.code.TASK_FAILURE);\n  };\n  process.on('uncaughtException', uncaughtHandler);\n\n  task.options({\n    error: function(e) {\n      fail.warn(e, fail.code.TASK_FAILURE);\n    },\n    done: function() {\n      // 当任务完成之后移除异常监听函数，减少多余的开销\n      process.removeListener('uncaughtException', uncaughtHandler);\n\n      // 输出最后的运行结果，失败或者成功\n      fail.report();\n\n      if (done) {\n        // 如果存在done函数的话，当完成任务时执行done函数\n        done();\n      } else {\n        // 如果没有done函数直接结束进程\n        util.exit(0);\n      }\n    }\n  });\n\n  // 将任务依次加入内部的任务队列中，run方法并不会运行任务，只是加入到队列中\n  tasks.forEach(function(name) { task.run(name); });\n  // 开始运行任务队列中的任务\n  task.start({asyncDone:true});\n};\n```\n在`grunt.tasks`代码中，首先会进行参数的初始化，接着判断参数是否带有version或者help选项，如果带有这两个选项就进行相应的工作而不运行任务任务，否则解析任务名进行任务初始化并添加到任务队列中，最后运行任务。\n在`grunt.tasks`方法中比较重要的三个方法就是`task.init`，`task.run`和`task.start`方法。下面看看`task.init`方法的具体实现。这个方法位于`lib/grunt/task.js`文件中。\n```javascript\n// 初始化任务\ntask.init = function(tasks, options) {\n  if (!options) { options = {}; }\n\n  // 拥有init方法说明task是初始化任务，比如第三方插件\n  var allInit = tasks.length > 0 && tasks.every(function(name) {\n    var obj = task._taskPlusArgs(name).task;\n    return obj && obj.init;\n  });\n\n  // 获取gruntfile.js路径，如果有指定路径那么直接使用否则在当前目录及父目录中查找\n  var gruntfile, msg;\n  if (allInit || options.gruntfile === false) {\n    gruntfile = null;\n  } else {\n    gruntfile = grunt.option('gruntfile') ||\n      grunt.file.findup('Gruntfile.{js,coffee}', {nocase: true});\n    msg = 'Reading \"' + (gruntfile ? path.basename(gruntfile) : '???') + '\" Gruntfile...';\n  }\n  // 如果参数中将gruntfile设为false，那么说明任务是一个插件或者库\n  // 不做任何操作\n  if (options.gruntfile === false) {\n    // Grunt was run as a lib with {gruntfile: false}.\n  } else if (gruntfile && grunt.file.exists(gruntfile)) {\n    // 如果存在gruntfile\n    grunt.verbose.writeln().write(msg).ok();\n    // 修改进程的操作目录，如果有指定base那么使用base目录否则就使用gruntfile所在的目录\n    process.chdir(grunt.option('base') || path.dirname(gruntfile));\n    // 在verbose情况下输出Registering Gruntfile tasks信息\n    loadTasksMessage('Gruntfile');\n    // 加载gruntfile中的任务\n    loadTask(gruntfile);\n  } else if (options.help || allInit) {\n    // 如果没找到grunt但是有help参数的话，那么不做任何操作\n  } else if (grunt.option('gruntfile')) {\n    // 如果指定了gruntfile参数但是找不到文件那么输出错误信息\n    grunt.log.writeln().write(msg).error();\n    grunt.fatal('Unable to find \"' + gruntfile + '\" Gruntfile.', grunt.fail.code.MISSING_GRUNTFILE);\n  } else if (!grunt.option('help')) {\n    grunt.verbose.writeln().write(msg).error();\n    grunt.log.writelns(\n      'A valid Gruntfile could not be found. Please see the getting ' +\n      'started guide for more information on how to configure grunt: ' +\n      'http://gruntjs.com/getting-started'\n    );\n    grunt.fatal('Unable to find Gruntfile.', grunt.fail.code.MISSING_GRUNTFILE);\n  }\n\n  // 加载用户指定的npm包\n  (grunt.option('npm') || []).forEach(task.loadNpmTasks);\n  // 加载用户指定的任务\n  (grunt.option('tasks') || []).forEach(task.loadTasks);\n};\n```\n在初始化任务之后`grunt.tasks`方法会调用`task.run`方法，将任务添加到任务队列中等待执行。下面是`task.run`方法的代码，它也是位于`lib/util/task.js`文件中。\n```javascript\n// 将任务加入到队列中\nTask.prototype.run = function() {\n  // 将参数转换为数组并且根据参数构建任务对象\n  var things = this.parseArgs(arguments).map(this._taskPlusArgs, this);\n  // 找出无法构建的任务\n  var fails = things.filter(function(thing) { return !thing.task; });\n  if (fails.length > 0) {\n    // 如果存在无法构建的任务，抛出错误并返回\n    this._throwIfRunning(new Error('Task \"' + fails[0].nameArgs + '\" not found.'));\n    return this;\n  }\n\n  // 将任务加入到任务队列相应的位置\n  this._push(things);\n  // 支持链式调用\n  return this;\n};\n// 将任务名分离为真实运行的任务名和参数的对象，比如：\n// 'foo'          ==>  任务名为foo，没有参数\n// 'foo:bar:baz'  ==>  如果'foo:bar:baz'任务存在，那么任务名为'foo:bar:baz'，没有参数\n//                ==>  如果'foo:bar'任务存在，那么任务名为'foo:bar'，参数为'baz'\n//                ==>  如果'foo'任务存在，那么任务名为'foo'，参数为'bar'和'baz'\nTask.prototype._taskPlusArgs = function(name) {\n  // 将传入的任务名根据冒号转换为数组\n  var parts = this.splitArgs(name);\n  // 从数组最后开始遍历数组\n  var i = parts.length;\n  var task;\n  do {\n    // 将0到i的数组转换为任务名，用冒号隔开\n    // 然后根据得到的任务名从任务缓存中得到相应的任务\n    task = this._tasks[parts.slice(0, i).join(':')];\n    // 如果相应任务不存在，那么i减1，知道i等于0\n  } while (!task && --i > 0);\n  // 除了任务名以外的部分属于参数\n  var args = parts.slice(i);\n  // 根据参数列表，得到相应的boolean型标记\n  var flags = {};\n  args.forEach(function(arg) { flags[arg] = true; });\n  // 返回构建的任务对象，包括任务名和任务参数\n  return {task: task, nameArgs: name, args: args, flags: flags};\n};\n```\n在`task.run`方法中，首先将参数进行分离，分隔出任务名和参数，然后利用任务名和参数构建一个任务对象，最后将这个对象放入任务队列中，参数分离的实现方法为`_taskPlusArgs`。调用`task.run`之后，`grunt.tasks`方法马上就会调用`task.start`方法运行任务队列中的任务。`task.start`方法的实现也在`lib/util/task.js`文件中，如下：\n```javascript\n// 开始运行任务队列中的任务\nTask.prototype.start = function(opts) {\n  //初始化opts对象\n  if (!opts) {\n    opts = {};\n  }\n  // 如果任务正在运行则退出\n  if (this._running) { return false; }\n  // 通过nextTask依次运行队列中的任务\n  var nextTask = function() {\n    // 用来保存从队列中取出的任务对象\n    var thing;\n    // 取出队列中的元素，直到取出的元素不是placeholder和marker\n    // placeholder用来处理嵌套任务的情况\n    do {\n      //取出队列中的任务对象\n      thing = this._queue.shift();\n    } while (thing === this._placeholder || thing === this._marker);\n    // 如果队列为空，那么完成任务，执行可选的done函数并返回\n    if (!thing) {\n      this._running = false;\n      if (this._options.done) {\n        this._options.done();\n      }\n      return;\n    }\n    // 向队列中插入一个placeholder\n    this._queue.unshift(this._placeholder);\n\n    // 使用取出的任务对象构造任务函数的上下文对象\n    var context = {\n      // 任务名称:target名称:参数\n      nameArgs: thing.nameArgs,\n      // 任务名称\n      name: thing.task.name,\n      // 任务参数，这个参数包括了除了任务名以外的东西，包括target名称和参数\n      args: thing.args,\n      // 以args为键的键值对，值为true\n      flags: thing.flags\n    };\n\n    // 运行任务的注册函数，上下文设置为上面构造的context函数\n    this.runTaskFn(context, function() {\n      return thing.task.fn.apply(this, this.args);\n    }, nextTask, !!opts.asyncDone);\n\n  }.bind(this);\n\n  // 把任务标记为正在运行\n  this._running = true;\n  // 运行任务队列中的下一个任务\n  nextTask();\n};\n// 运行任务的注册函数\nTask.prototype.runTaskFn = function(context, fn, done, asyncDone) {\n  // 标记是否异步\n  var async = false;\n\n  // 执行函数完成之后的工作，更新任务状态，执行done函数也就是运行下一个任务\n  var complete = function(success) {\n    var err = null;\n    if (success === false) {\n      // 任务运行失败，创建错误对象\n      err = new Error('Task \"' + context.nameArgs + '\" failed.');\n    } else if (success instanceof Error || {}.toString.call(success) === '[object Error]') {\n      // 如果传入的是错误对象，表示任务执行失败\n      err = success;\n      success = false;\n    } else {\n      // 任务运行成功\n      success = true;\n    }\n    // 任务结束后重置当前运行任务\n    this.current = {};\n    // 记录任务执行结构\n    this._success[context.nameArgs] = success;\n    // 如果任务失败则调用错误处理函数\n    if (!success && this._options.error) {\n      this._options.error.call({name: context.name, nameArgs: context.nameArgs}, err);\n    }\n    // 如果指定了异步执行，那么使用node自带的nextTick来运行done\n    // 否则直接运行done\n    if (asyncDone) {\n      process.nextTick(function() {\n        done(err, success);\n      });\n    } else {\n      done(err, success);\n    }\n  }.bind(this);\n\n  // 用来支持异步任务，也就是this.async()方法的实现，\n  // 返回函数在异步任务完成时被调用执行complete方法\n  context.async = function() {\n    async = true;\n    // 返回的函数在任务中的异步工作完成后被调用\n    return function(success) {\n      setTimeout(function() { complete(success); }, 1);\n    };\n  };\n\n  // 记录当前正在运行的任务上下文\n  this.current = context;\n\n  try {\n    // 执行任务的注册函数\n    var success = fn.call(context);\n    // 如果没有使用this.async\n    // 也就是说async标记为false时在任务完成之后直接调用complete方法\n    if (!async) {\n      complete(success);\n    }\n  } catch (err) {\n    complete(err);\n  }\n};\n```\n在`task.start`方法中定义了一个`nextTask`方法，方法的作用是依次执行任务队列中的任务，从任务队列中取出任务对象，利用任务对象构建一个上下文对象，然后在这个上下文中执行任务的注册函数，执行完注册函数之后执行队列中的下一个任务。执行注册函数的功能有`task.runTaskFn`方法实现。在这个方法中定义了一个`complele`方法，会在任务注册函数执行完成后备调用，进行错误处理工作。同时在`task.runTaskFn`方法中还向上下文对象`context`中添加了一个`async`方法，这个方法就是当我们需要在任务中进行一些异步操作是首先需要调用的方法，调用这个方法之后会返回一个函数，这个函数会异步执行`complete`方法，如果没有`async`方法，那么在我们任务中的异步操作还未返回时，grunt内部就会调用`complete`方法，这样就会造成错误。有了`async`方法，我们就可以确保`complete`方法是在我们任务完成之后才被调用。\n\n上面所涉及到的几个方法就是grunt中运行任务过程中主要的几个方法。大家肯定还觉得少了点什么，想要运行任务首先需要在`gruntfile.js`中注册任务，所以下一次我将和大家分享任务注册相关的源码解析，敬请期待。\n\n  [1]: /img/bVlrNU\n","source":"_posts/grunt-source-code-2.md","raw":"title: 看看 Grunt 的源码（二）：grunt 任务运行相关源码解析\ndate: 2015-04-19 14:46:55\ntags: ['grunt']\n---\n上一篇分享了关于grunt-cli的源码解析，这篇开始grunt核心部分代码的解析，还是从上一篇结束部分开始。\n<!-- more -->\n```javascript\n//调用grunt执行任务\nrequire(gruntpath).cli();\n```\n  `gruntpath`是通过解析得到的grunt.js的文件路径，通过`require`方法加载grunt模块然后调用模块的`cli`方法来运行命令行最后运行命令行中的任务。\n\n  我们先从大体上看看grunt从输入命令行到任务运行完毕整个过程中都经过了哪些步骤。下图是我根据源码得出的一个流程图。\n\n![图片描述][1]\n\n1. 首先，我们输入命令行之后调用`require(gruntpath).cli()`方法，在cli方法中会初始化命令行的默认参数列表，解析输入命令行的参数以及任务名称\n2. 然后调用`grunt.tasks`方法，将任务参数和名称传入。在`grunt.tasks`方法中，会进一步对参数进行解析，初始化log功能，如果参数带有version或者help选项那么直接执行相应的函数，否则就解析任务名称。\n3. 接着调用`task.init`方法。加载`Gruntfile.js`文件，注册任务信息以及配置信息。\n4. 接着调用`task.run`方法。`task.run`方法并不会运行任务，而是把任务相关信息添加到任务队列中。\n5. 最后才是调用`task.start`方法来依次运行任务队列中的任务。\n下面来一步步解析grunt核心源码。首先，来看看`lib/grunt/cli.js`文件中的代码。\n```javascript\n// 执行命令行时执行的函数\nvar cli = module.exports = function(options, done) {\n  // 利用传递的参数设置cli.options对象，但是不覆盖命令行的参数\n  if (options) {\n    Object.keys(options).forEach(function(key) {\n      if (!(key in cli.options)) {\n        // 如果输入的命令行中不存在这个参数，那么把它加入到cli的options属性中\n        cli.options[key] = options[key];\n      } else if (cli.optlist[key].type === Array) {\n        // 如果输入的命令行中存在这个参数，并且参数的类型是数组，那么把它加入到数组尾部\n        [].push.apply(cli.options[key], options[key]);\n      }\n    });\n  }\n\n  // 运行任务\n  grunt.tasks(cli.tasks, cli.options, done);\n};\n\n// 默认的参数选项列表\nvar optlist = cli.optlist = {\n  help: {\n    short: 'h',\n    info: 'Display this help text.',\n    type: Boolean\n  },\n  base: {\n    info: 'Specify an alternate base path. By default, all file paths are relative to the Gruntfile. ' +\n          '(grunt.file.setBase) *',\n    type: path\n  },\n  color: {\n    info: 'Disable colored output.',\n    type: Boolean,\n    negate: true\n  },\n  gruntfile: {\n    info: 'Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories ' +\n          'for the nearest Gruntfile.js or Gruntfile.coffee file.',\n    type: path\n  },\n  debug: {\n    short: 'd',\n    info: 'Enable debugging mode for tasks that support it.',\n    type: [Number, Boolean]\n  },\n  stack: {\n    info: 'Print a stack trace when exiting with a warning or fatal error.',\n    type: Boolean\n  },\n  force: {\n    short: 'f',\n    info: 'A way to force your way past warnings. Want a suggestion? Don\\'t use this option, fix your code.',\n    type: Boolean\n  },\n  tasks: {\n    info: 'Additional directory paths to scan for task and \"extra\" files. (grunt.loadTasks) *',\n    type: Array\n  },\n  npm: {\n    info: 'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *',\n    type: Array\n  },\n  write: {\n    info: 'Disable writing files (dry run).',\n    type: Boolean,\n    negate: true\n  },\n  verbose: {\n    short: 'v',\n    info: 'Verbose mode. A lot more information output.',\n    type: Boolean\n  },\n  version: {\n    short: 'V',\n    info: 'Print the grunt version. Combine with --verbose for more info.',\n    type: Boolean\n  },\n  completion: {\n    info: 'Output shell auto-completion rules. See the grunt-cli documentation for more information.',\n    type: String\n  },\n};\n\n// 利用optlist列表初始化aliases和known对象\n// 传递给nopt模块进行命令行参数解析\n// nopt是一个用来解析命令行参数的第三方模块\nvar aliases = {};\nvar known = {};\n\nObject.keys(optlist).forEach(function(key) {\n  var short = optlist[key].short;\n  if (short) {\n    aliases[short] = '--' + key;\n  }\n  known[key] = optlist[key].type;\n});\n\nvar parsed = nopt(known, aliases, process.argv, 2);\n// 获取命令行中的任务名称\ncli.tasks = parsed.argv.remain;\n// 获得命令行中的参数\ncli.options = parsed;\ndelete parsed.argv;\n\n// 初始化类型为数组但是还没被初始化的参数，比如npm和task\nObject.keys(optlist).forEach(function(key) {\n  if (optlist[key].type === Array && !(key in cli.options)) {\n    cli.options[key] = [];\n  }\n});\n```\n这段代码相对比较简单，主要功能就是解析任务名和参数然后传递给`grunt.tasks`方法进行调用。\n下面来看看`grunt.js`中关于`grunt.tasks`方法的代码。\n```javascript\n\n// 这个tasks方法一般只在grunt内部调用\n// tasks方法用来将任务添加到任务队列中，并且运行任务\ngrunt.tasks = function(tasks, options, done) {\n  // option模块对命令行参数进行包装\n  // init方法对参数进行了初始化，在方法内部判断传入参数是否为空\n  // 如果为空则初始化为空对象否则使用传入的对象进行初始化\n  option.init(options);\n\n  var _tasks, _options;\n  // option方法接受可变属性的参数，\n  // 如果传入一个参数则在参数对象中找出对于的参数，\n  // 如果传入两个参数则根据这两个参数设置key-value键值对，并value\n  // 同时方法内部会用正则匹配no-color、no-write的情况，\n  // 如果出现则设置option['color']或option['write']为false，并返回false\n  if (option('version')) {\n    // 如果带有version参数\n    // 输出版本信息\n    log.writeln('grunt v' + grunt.version);\n\n    if (option('verbose')) {\n      // //输出详细信息，包括grunt的路径\n      verbose.writeln('Install path: ' + path.resolve(__dirname, '..'));\n\n      grunt.log.muted = true;\n      // 初始化任务系统，解析gruntfile以便输出所有可用的任务\n      grunt.task.init([], {help: true});\n      grunt.log.muted = false;\n\n      // 输出可用的任务信息\n      _tasks = Object.keys(grunt.task._tasks).sort();\n      verbose.writeln('Available tasks: ' + _tasks.join(' '));\n\n      // 输出所有可用参数的详细信息\n      _options = [];\n      Object.keys(grunt.cli.optlist).forEach(function(long) {\n        var o = grunt.cli.optlist[long];\n        _options.push('--' + (o.negate ? 'no-' : '') + long);\n        if (o.short) { _options.push('-' + o.short); }\n      });\n      verbose.writeln('Available options: ' + _options.join(' '));\n    }\n\n    return;\n  }\n\n  // 初始化log的着色功能\n  log.initColors();\n\n  // 如果参数带有help则输出帮助信息\n  if (option('help')) {\n    help.display();\n    return;\n  }\n\n  // 根据option输出命令行参数，flags方法会过滤掉值为空的参数\n  verbose.header('Initializing').writeflags(option.flags(), 'Command-line options');\n\n  // 判断是否有传入tasks参数并且任务长度大于0\n  var tasksSpecified = tasks && tasks.length > 0;\n  //将传入参数进行转换，转换为任务数组，如果没有传入有效的任务那么使用默认default任务\n  tasks = task.parseArgs([tasksSpecified ? tasks : 'default']);\n\n  // 根据传入的tasks参数初始化任务\n  // 在方法中加载gruntfile.js文件，进行任务注册和配置的解析\n  // 也就是加载我们编写的任务代码\n  task.init(tasks, options);\n\n  verbose.writeln();\n  if (!tasksSpecified) {\n    verbose.writeln('No tasks specified, running default tasks.');\n  }\n  verbose.writeflags(tasks, 'Running tasks');\n\n  // 注册异常处理函数，输出异常信息\n  var uncaughtHandler = function(e) {\n    fail.fatal(e, fail.code.TASK_FAILURE);\n  };\n  process.on('uncaughtException', uncaughtHandler);\n\n  task.options({\n    error: function(e) {\n      fail.warn(e, fail.code.TASK_FAILURE);\n    },\n    done: function() {\n      // 当任务完成之后移除异常监听函数，减少多余的开销\n      process.removeListener('uncaughtException', uncaughtHandler);\n\n      // 输出最后的运行结果，失败或者成功\n      fail.report();\n\n      if (done) {\n        // 如果存在done函数的话，当完成任务时执行done函数\n        done();\n      } else {\n        // 如果没有done函数直接结束进程\n        util.exit(0);\n      }\n    }\n  });\n\n  // 将任务依次加入内部的任务队列中，run方法并不会运行任务，只是加入到队列中\n  tasks.forEach(function(name) { task.run(name); });\n  // 开始运行任务队列中的任务\n  task.start({asyncDone:true});\n};\n```\n在`grunt.tasks`代码中，首先会进行参数的初始化，接着判断参数是否带有version或者help选项，如果带有这两个选项就进行相应的工作而不运行任务任务，否则解析任务名进行任务初始化并添加到任务队列中，最后运行任务。\n在`grunt.tasks`方法中比较重要的三个方法就是`task.init`，`task.run`和`task.start`方法。下面看看`task.init`方法的具体实现。这个方法位于`lib/grunt/task.js`文件中。\n```javascript\n// 初始化任务\ntask.init = function(tasks, options) {\n  if (!options) { options = {}; }\n\n  // 拥有init方法说明task是初始化任务，比如第三方插件\n  var allInit = tasks.length > 0 && tasks.every(function(name) {\n    var obj = task._taskPlusArgs(name).task;\n    return obj && obj.init;\n  });\n\n  // 获取gruntfile.js路径，如果有指定路径那么直接使用否则在当前目录及父目录中查找\n  var gruntfile, msg;\n  if (allInit || options.gruntfile === false) {\n    gruntfile = null;\n  } else {\n    gruntfile = grunt.option('gruntfile') ||\n      grunt.file.findup('Gruntfile.{js,coffee}', {nocase: true});\n    msg = 'Reading \"' + (gruntfile ? path.basename(gruntfile) : '???') + '\" Gruntfile...';\n  }\n  // 如果参数中将gruntfile设为false，那么说明任务是一个插件或者库\n  // 不做任何操作\n  if (options.gruntfile === false) {\n    // Grunt was run as a lib with {gruntfile: false}.\n  } else if (gruntfile && grunt.file.exists(gruntfile)) {\n    // 如果存在gruntfile\n    grunt.verbose.writeln().write(msg).ok();\n    // 修改进程的操作目录，如果有指定base那么使用base目录否则就使用gruntfile所在的目录\n    process.chdir(grunt.option('base') || path.dirname(gruntfile));\n    // 在verbose情况下输出Registering Gruntfile tasks信息\n    loadTasksMessage('Gruntfile');\n    // 加载gruntfile中的任务\n    loadTask(gruntfile);\n  } else if (options.help || allInit) {\n    // 如果没找到grunt但是有help参数的话，那么不做任何操作\n  } else if (grunt.option('gruntfile')) {\n    // 如果指定了gruntfile参数但是找不到文件那么输出错误信息\n    grunt.log.writeln().write(msg).error();\n    grunt.fatal('Unable to find \"' + gruntfile + '\" Gruntfile.', grunt.fail.code.MISSING_GRUNTFILE);\n  } else if (!grunt.option('help')) {\n    grunt.verbose.writeln().write(msg).error();\n    grunt.log.writelns(\n      'A valid Gruntfile could not be found. Please see the getting ' +\n      'started guide for more information on how to configure grunt: ' +\n      'http://gruntjs.com/getting-started'\n    );\n    grunt.fatal('Unable to find Gruntfile.', grunt.fail.code.MISSING_GRUNTFILE);\n  }\n\n  // 加载用户指定的npm包\n  (grunt.option('npm') || []).forEach(task.loadNpmTasks);\n  // 加载用户指定的任务\n  (grunt.option('tasks') || []).forEach(task.loadTasks);\n};\n```\n在初始化任务之后`grunt.tasks`方法会调用`task.run`方法，将任务添加到任务队列中等待执行。下面是`task.run`方法的代码，它也是位于`lib/util/task.js`文件中。\n```javascript\n// 将任务加入到队列中\nTask.prototype.run = function() {\n  // 将参数转换为数组并且根据参数构建任务对象\n  var things = this.parseArgs(arguments).map(this._taskPlusArgs, this);\n  // 找出无法构建的任务\n  var fails = things.filter(function(thing) { return !thing.task; });\n  if (fails.length > 0) {\n    // 如果存在无法构建的任务，抛出错误并返回\n    this._throwIfRunning(new Error('Task \"' + fails[0].nameArgs + '\" not found.'));\n    return this;\n  }\n\n  // 将任务加入到任务队列相应的位置\n  this._push(things);\n  // 支持链式调用\n  return this;\n};\n// 将任务名分离为真实运行的任务名和参数的对象，比如：\n// 'foo'          ==>  任务名为foo，没有参数\n// 'foo:bar:baz'  ==>  如果'foo:bar:baz'任务存在，那么任务名为'foo:bar:baz'，没有参数\n//                ==>  如果'foo:bar'任务存在，那么任务名为'foo:bar'，参数为'baz'\n//                ==>  如果'foo'任务存在，那么任务名为'foo'，参数为'bar'和'baz'\nTask.prototype._taskPlusArgs = function(name) {\n  // 将传入的任务名根据冒号转换为数组\n  var parts = this.splitArgs(name);\n  // 从数组最后开始遍历数组\n  var i = parts.length;\n  var task;\n  do {\n    // 将0到i的数组转换为任务名，用冒号隔开\n    // 然后根据得到的任务名从任务缓存中得到相应的任务\n    task = this._tasks[parts.slice(0, i).join(':')];\n    // 如果相应任务不存在，那么i减1，知道i等于0\n  } while (!task && --i > 0);\n  // 除了任务名以外的部分属于参数\n  var args = parts.slice(i);\n  // 根据参数列表，得到相应的boolean型标记\n  var flags = {};\n  args.forEach(function(arg) { flags[arg] = true; });\n  // 返回构建的任务对象，包括任务名和任务参数\n  return {task: task, nameArgs: name, args: args, flags: flags};\n};\n```\n在`task.run`方法中，首先将参数进行分离，分隔出任务名和参数，然后利用任务名和参数构建一个任务对象，最后将这个对象放入任务队列中，参数分离的实现方法为`_taskPlusArgs`。调用`task.run`之后，`grunt.tasks`方法马上就会调用`task.start`方法运行任务队列中的任务。`task.start`方法的实现也在`lib/util/task.js`文件中，如下：\n```javascript\n// 开始运行任务队列中的任务\nTask.prototype.start = function(opts) {\n  //初始化opts对象\n  if (!opts) {\n    opts = {};\n  }\n  // 如果任务正在运行则退出\n  if (this._running) { return false; }\n  // 通过nextTask依次运行队列中的任务\n  var nextTask = function() {\n    // 用来保存从队列中取出的任务对象\n    var thing;\n    // 取出队列中的元素，直到取出的元素不是placeholder和marker\n    // placeholder用来处理嵌套任务的情况\n    do {\n      //取出队列中的任务对象\n      thing = this._queue.shift();\n    } while (thing === this._placeholder || thing === this._marker);\n    // 如果队列为空，那么完成任务，执行可选的done函数并返回\n    if (!thing) {\n      this._running = false;\n      if (this._options.done) {\n        this._options.done();\n      }\n      return;\n    }\n    // 向队列中插入一个placeholder\n    this._queue.unshift(this._placeholder);\n\n    // 使用取出的任务对象构造任务函数的上下文对象\n    var context = {\n      // 任务名称:target名称:参数\n      nameArgs: thing.nameArgs,\n      // 任务名称\n      name: thing.task.name,\n      // 任务参数，这个参数包括了除了任务名以外的东西，包括target名称和参数\n      args: thing.args,\n      // 以args为键的键值对，值为true\n      flags: thing.flags\n    };\n\n    // 运行任务的注册函数，上下文设置为上面构造的context函数\n    this.runTaskFn(context, function() {\n      return thing.task.fn.apply(this, this.args);\n    }, nextTask, !!opts.asyncDone);\n\n  }.bind(this);\n\n  // 把任务标记为正在运行\n  this._running = true;\n  // 运行任务队列中的下一个任务\n  nextTask();\n};\n// 运行任务的注册函数\nTask.prototype.runTaskFn = function(context, fn, done, asyncDone) {\n  // 标记是否异步\n  var async = false;\n\n  // 执行函数完成之后的工作，更新任务状态，执行done函数也就是运行下一个任务\n  var complete = function(success) {\n    var err = null;\n    if (success === false) {\n      // 任务运行失败，创建错误对象\n      err = new Error('Task \"' + context.nameArgs + '\" failed.');\n    } else if (success instanceof Error || {}.toString.call(success) === '[object Error]') {\n      // 如果传入的是错误对象，表示任务执行失败\n      err = success;\n      success = false;\n    } else {\n      // 任务运行成功\n      success = true;\n    }\n    // 任务结束后重置当前运行任务\n    this.current = {};\n    // 记录任务执行结构\n    this._success[context.nameArgs] = success;\n    // 如果任务失败则调用错误处理函数\n    if (!success && this._options.error) {\n      this._options.error.call({name: context.name, nameArgs: context.nameArgs}, err);\n    }\n    // 如果指定了异步执行，那么使用node自带的nextTick来运行done\n    // 否则直接运行done\n    if (asyncDone) {\n      process.nextTick(function() {\n        done(err, success);\n      });\n    } else {\n      done(err, success);\n    }\n  }.bind(this);\n\n  // 用来支持异步任务，也就是this.async()方法的实现，\n  // 返回函数在异步任务完成时被调用执行complete方法\n  context.async = function() {\n    async = true;\n    // 返回的函数在任务中的异步工作完成后被调用\n    return function(success) {\n      setTimeout(function() { complete(success); }, 1);\n    };\n  };\n\n  // 记录当前正在运行的任务上下文\n  this.current = context;\n\n  try {\n    // 执行任务的注册函数\n    var success = fn.call(context);\n    // 如果没有使用this.async\n    // 也就是说async标记为false时在任务完成之后直接调用complete方法\n    if (!async) {\n      complete(success);\n    }\n  } catch (err) {\n    complete(err);\n  }\n};\n```\n在`task.start`方法中定义了一个`nextTask`方法，方法的作用是依次执行任务队列中的任务，从任务队列中取出任务对象，利用任务对象构建一个上下文对象，然后在这个上下文中执行任务的注册函数，执行完注册函数之后执行队列中的下一个任务。执行注册函数的功能有`task.runTaskFn`方法实现。在这个方法中定义了一个`complele`方法，会在任务注册函数执行完成后备调用，进行错误处理工作。同时在`task.runTaskFn`方法中还向上下文对象`context`中添加了一个`async`方法，这个方法就是当我们需要在任务中进行一些异步操作是首先需要调用的方法，调用这个方法之后会返回一个函数，这个函数会异步执行`complete`方法，如果没有`async`方法，那么在我们任务中的异步操作还未返回时，grunt内部就会调用`complete`方法，这样就会造成错误。有了`async`方法，我们就可以确保`complete`方法是在我们任务完成之后才被调用。\n\n上面所涉及到的几个方法就是grunt中运行任务过程中主要的几个方法。大家肯定还觉得少了点什么，想要运行任务首先需要在`gruntfile.js`中注册任务，所以下一次我将和大家分享任务注册相关的源码解析，敬请期待。\n\n  [1]: /img/bVlrNU\n","slug":"grunt-source-code-2","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvk400070povcpdbh1e3","content":"<p>上一篇分享了关于grunt-cli的源码解析，这篇开始grunt核心部分代码的解析，还是从上一篇结束部分开始。<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调用grunt执行任务</span></div><div class=\"line\"><span class=\"built_in\">require</span>(gruntpath).cli();</div></pre></td></tr></table></figure></p>\n<p>  <code>gruntpath</code>是通过解析得到的grunt.js的文件路径，通过<code>require</code>方法加载grunt模块然后调用模块的<code>cli</code>方法来运行命令行最后运行命令行中的任务。</p>\n<p>  我们先从大体上看看grunt从输入命令行到任务运行完毕整个过程中都经过了哪些步骤。下图是我根据源码得出的一个流程图。</p>\n<p><img src=\"/img/bVlrNU\" alt=\"图片描述\"></p>\n<ol>\n<li>首先，我们输入命令行之后调用<code>require(gruntpath).cli()</code>方法，在cli方法中会初始化命令行的默认参数列表，解析输入命令行的参数以及任务名称</li>\n<li>然后调用<code>grunt.tasks</code>方法，将任务参数和名称传入。在<code>grunt.tasks</code>方法中，会进一步对参数进行解析，初始化log功能，如果参数带有version或者help选项那么直接执行相应的函数，否则就解析任务名称。</li>\n<li>接着调用<code>task.init</code>方法。加载<code>Gruntfile.js</code>文件，注册任务信息以及配置信息。</li>\n<li>接着调用<code>task.run</code>方法。<code>task.run</code>方法并不会运行任务，而是把任务相关信息添加到任务队列中。</li>\n<li>最后才是调用<code>task.start</code>方法来依次运行任务队列中的任务。<br>下面来一步步解析grunt核心源码。首先，来看看<code>lib/grunt/cli.js</code>文件中的代码。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 执行命令行时执行的函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> cli = <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options, done</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 利用传递的参数设置cli.options对象，但是不覆盖命令行的参数</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (options) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.keys(options).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> cli.options)) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果输入的命令行中不存在这个参数，那么把它加入到cli的options属性中</span></div><div class=\"line\">        cli.options[key] = options[key];</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cli.optlist[key].type === <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果输入的命令行中存在这个参数，并且参数的类型是数组，那么把它加入到数组尾部</span></div><div class=\"line\">        [].push.apply(cli.options[key], options[key]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 运行任务</span></div><div class=\"line\">  grunt.tasks(cli.tasks, cli.options, done);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 默认的参数选项列表</span></div><div class=\"line\"><span class=\"keyword\">var</span> optlist = cli.optlist = &#123;</div><div class=\"line\">  help: &#123;</div><div class=\"line\">    short: <span class=\"string\">'h'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Display this help text.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  base: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Specify an alternate base path. By default, all file paths are relative to the Gruntfile. '</span> +</div><div class=\"line\">          <span class=\"string\">'(grunt.file.setBase) *'</span>,</div><div class=\"line\">    type: path</div><div class=\"line\">  &#125;,</div><div class=\"line\">  color: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Disable colored output.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</div><div class=\"line\">    negate: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  gruntfile: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories '</span> +</div><div class=\"line\">          <span class=\"string\">'for the nearest Gruntfile.js or Gruntfile.coffee file.'</span>,</div><div class=\"line\">    type: path</div><div class=\"line\">  &#125;,</div><div class=\"line\">  debug: &#123;</div><div class=\"line\">    short: <span class=\"string\">'d'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Enable debugging mode for tasks that support it.'</span>,</div><div class=\"line\">    type: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">Boolean</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  stack: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Print a stack trace when exiting with a warning or fatal error.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  force: &#123;</div><div class=\"line\">    short: <span class=\"string\">'f'</span>,</div><div class=\"line\">    info: <span class=\"string\">'A way to force your way past warnings. Want a suggestion? Don\\'t use this option, fix your code.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  tasks: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Additional directory paths to scan for task and \"extra\" files. (grunt.loadTasks) *'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Array</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  npm: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Array</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  write: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Disable writing files (dry run).'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</div><div class=\"line\">    negate: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  verbose: &#123;</div><div class=\"line\">    short: <span class=\"string\">'v'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Verbose mode. A lot more information output.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  version: &#123;</div><div class=\"line\">    short: <span class=\"string\">'V'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Print the grunt version. Combine with --verbose for more info.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  completion: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Output shell auto-completion rules. See the grunt-cli documentation for more information.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">String</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 利用optlist列表初始化aliases和known对象</span></div><div class=\"line\"><span class=\"comment\">// 传递给nopt模块进行命令行参数解析</span></div><div class=\"line\"><span class=\"comment\">// nopt是一个用来解析命令行参数的第三方模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> aliases = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> known = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> short = optlist[key].short;</div><div class=\"line\">  <span class=\"keyword\">if</span> (short) &#123;</div><div class=\"line\">    aliases[short] = <span class=\"string\">'--'</span> + key;</div><div class=\"line\">  &#125;</div><div class=\"line\">  known[key] = optlist[key].type;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parsed = nopt(known, aliases, process.argv, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// 获取命令行中的任务名称</span></div><div class=\"line\">cli.tasks = parsed.argv.remain;</div><div class=\"line\"><span class=\"comment\">// 获得命令行中的参数</span></div><div class=\"line\">cli.options = parsed;</div><div class=\"line\"><span class=\"keyword\">delete</span> parsed.argv;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 初始化类型为数组但是还没被初始化的参数，比如npm和task</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (optlist[key].type === <span class=\"built_in\">Array</span> &amp;&amp; !(key <span class=\"keyword\">in</span> cli.options)) &#123;</div><div class=\"line\">    cli.options[key] = [];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码相对比较简单，主要功能就是解析任务名和参数然后传递给<code>grunt.tasks</code>方法进行调用。<br>下面来看看<code>grunt.js</code>中关于<code>grunt.tasks</code>方法的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这个tasks方法一般只在grunt内部调用</span></div><div class=\"line\"><span class=\"comment\">// tasks方法用来将任务添加到任务队列中，并且运行任务</span></div><div class=\"line\">grunt.tasks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tasks, options, done</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// option模块对命令行参数进行包装</span></div><div class=\"line\">  <span class=\"comment\">// init方法对参数进行了初始化，在方法内部判断传入参数是否为空</span></div><div class=\"line\">  <span class=\"comment\">// 如果为空则初始化为空对象否则使用传入的对象进行初始化</span></div><div class=\"line\">  option.init(options);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _tasks, _options;</div><div class=\"line\">  <span class=\"comment\">// option方法接受可变属性的参数，</span></div><div class=\"line\">  <span class=\"comment\">// 如果传入一个参数则在参数对象中找出对于的参数，</span></div><div class=\"line\">  <span class=\"comment\">// 如果传入两个参数则根据这两个参数设置key-value键值对，并value</span></div><div class=\"line\">  <span class=\"comment\">// 同时方法内部会用正则匹配no-color、no-write的情况，</span></div><div class=\"line\">  <span class=\"comment\">// 如果出现则设置option['color']或option['write']为false，并返回false</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (option(<span class=\"string\">'version'</span>)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果带有version参数</span></div><div class=\"line\">    <span class=\"comment\">// 输出版本信息</span></div><div class=\"line\">    log.writeln(<span class=\"string\">'grunt v'</span> + grunt.version);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (option(<span class=\"string\">'verbose'</span>)) &#123;</div><div class=\"line\">      <span class=\"comment\">// //输出详细信息，包括grunt的路径</span></div><div class=\"line\">      verbose.writeln(<span class=\"string\">'Install path: '</span> + path.resolve(__dirname, <span class=\"string\">'..'</span>));</div><div class=\"line\"></div><div class=\"line\">      grunt.log.muted = <span class=\"literal\">true</span>;</div><div class=\"line\">      <span class=\"comment\">// 初始化任务系统，解析gruntfile以便输出所有可用的任务</span></div><div class=\"line\">      grunt.task.init([], &#123;help: <span class=\"literal\">true</span>&#125;);</div><div class=\"line\">      grunt.log.muted = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 输出可用的任务信息</span></div><div class=\"line\">      _tasks = <span class=\"built_in\">Object</span>.keys(grunt.task._tasks).sort();</div><div class=\"line\">      verbose.writeln(<span class=\"string\">'Available tasks: '</span> + _tasks.join(<span class=\"string\">' '</span>));</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 输出所有可用参数的详细信息</span></div><div class=\"line\">      _options = [];</div><div class=\"line\">      <span class=\"built_in\">Object</span>.keys(grunt.cli.optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">long</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> o = grunt.cli.optlist[long];</div><div class=\"line\">        _options.push(<span class=\"string\">'--'</span> + (o.negate ? <span class=\"string\">'no-'</span> : <span class=\"string\">''</span>) + long);</div><div class=\"line\">        <span class=\"keyword\">if</span> (o.short) &#123; _options.push(<span class=\"string\">'-'</span> + o.short); &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      verbose.writeln(<span class=\"string\">'Available options: '</span> + _options.join(<span class=\"string\">' '</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 初始化log的着色功能</span></div><div class=\"line\">  log.initColors();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果参数带有help则输出帮助信息</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (option(<span class=\"string\">'help'</span>)) &#123;</div><div class=\"line\">    help.display();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 根据option输出命令行参数，flags方法会过滤掉值为空的参数</span></div><div class=\"line\">  verbose.header(<span class=\"string\">'Initializing'</span>).writeflags(option.flags(), <span class=\"string\">'Command-line options'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断是否有传入tasks参数并且任务长度大于0</span></div><div class=\"line\">  <span class=\"keyword\">var</span> tasksSpecified = tasks &amp;&amp; tasks.length &gt; <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"comment\">//将传入参数进行转换，转换为任务数组，如果没有传入有效的任务那么使用默认default任务</span></div><div class=\"line\">  tasks = task.parseArgs([tasksSpecified ? tasks : <span class=\"string\">'default'</span>]);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 根据传入的tasks参数初始化任务</span></div><div class=\"line\">  <span class=\"comment\">// 在方法中加载gruntfile.js文件，进行任务注册和配置的解析</span></div><div class=\"line\">  <span class=\"comment\">// 也就是加载我们编写的任务代码</span></div><div class=\"line\">  task.init(tasks, options);</div><div class=\"line\"></div><div class=\"line\">  verbose.writeln();</div><div class=\"line\">  <span class=\"keyword\">if</span> (!tasksSpecified) &#123;</div><div class=\"line\">    verbose.writeln(<span class=\"string\">'No tasks specified, running default tasks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  verbose.writeflags(tasks, <span class=\"string\">'Running tasks'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注册异常处理函数，输出异常信息</span></div><div class=\"line\">  <span class=\"keyword\">var</span> uncaughtHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    fail.fatal(e, fail.code.TASK_FAILURE);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  process.on(<span class=\"string\">'uncaughtException'</span>, uncaughtHandler);</div><div class=\"line\"></div><div class=\"line\">  task.options(&#123;</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      fail.warn(e, fail.code.TASK_FAILURE);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    done: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 当任务完成之后移除异常监听函数，减少多余的开销</span></div><div class=\"line\">      process.removeListener(<span class=\"string\">'uncaughtException'</span>, uncaughtHandler);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 输出最后的运行结果，失败或者成功</span></div><div class=\"line\">      fail.report();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (done) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果存在done函数的话，当完成任务时执行done函数</span></div><div class=\"line\">        done();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果没有done函数直接结束进程</span></div><div class=\"line\">        util.exit(<span class=\"number\">0</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 将任务依次加入内部的任务队列中，run方法并不会运行任务，只是加入到队列中</span></div><div class=\"line\">  tasks.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123; task.run(name); &#125;);</div><div class=\"line\">  <span class=\"comment\">// 开始运行任务队列中的任务</span></div><div class=\"line\">  task.start(&#123;asyncDone:<span class=\"literal\">true</span>&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在<code>grunt.tasks</code>代码中，首先会进行参数的初始化，接着判断参数是否带有version或者help选项，如果带有这两个选项就进行相应的工作而不运行任务任务，否则解析任务名进行任务初始化并添加到任务队列中，最后运行任务。<br>在<code>grunt.tasks</code>方法中比较重要的三个方法就是<code>task.init</code>，<code>task.run</code>和<code>task.start</code>方法。下面看看<code>task.init</code>方法的具体实现。这个方法位于<code>lib/grunt/task.js</code>文件中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 初始化任务</span></div><div class=\"line\">task.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tasks, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!options) &#123; options = &#123;&#125;; &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 拥有init方法说明task是初始化任务，比如第三方插件</span></div><div class=\"line\">  <span class=\"keyword\">var</span> allInit = tasks.length &gt; <span class=\"number\">0</span> &amp;&amp; tasks.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = task._taskPlusArgs(name).task;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj &amp;&amp; obj.init;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 获取gruntfile.js路径，如果有指定路径那么直接使用否则在当前目录及父目录中查找</span></div><div class=\"line\">  <span class=\"keyword\">var</span> gruntfile, msg;</div><div class=\"line\">  <span class=\"keyword\">if</span> (allInit || options.gruntfile === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    gruntfile = <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    gruntfile = grunt.option(<span class=\"string\">'gruntfile'</span>) ||</div><div class=\"line\">      grunt.file.findup(<span class=\"string\">'Gruntfile.&#123;js,coffee&#125;'</span>, &#123;nocase: <span class=\"literal\">true</span>&#125;);</div><div class=\"line\">    msg = <span class=\"string\">'Reading \"'</span> + (gruntfile ? path.basename(gruntfile) : <span class=\"string\">'???'</span>) + <span class=\"string\">'\" Gruntfile...'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 如果参数中将gruntfile设为false，那么说明任务是一个插件或者库</span></div><div class=\"line\">  <span class=\"comment\">// 不做任何操作</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (options.gruntfile === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// Grunt was run as a lib with &#123;gruntfile: false&#125;.</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gruntfile &amp;&amp; grunt.file.exists(gruntfile)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果存在gruntfile</span></div><div class=\"line\">    grunt.verbose.writeln().write(msg).ok();</div><div class=\"line\">    <span class=\"comment\">// 修改进程的操作目录，如果有指定base那么使用base目录否则就使用gruntfile所在的目录</span></div><div class=\"line\">    process.chdir(grunt.option(<span class=\"string\">'base'</span>) || path.dirname(gruntfile));</div><div class=\"line\">    <span class=\"comment\">// 在verbose情况下输出Registering Gruntfile tasks信息</span></div><div class=\"line\">    loadTasksMessage(<span class=\"string\">'Gruntfile'</span>);</div><div class=\"line\">    <span class=\"comment\">// 加载gruntfile中的任务</span></div><div class=\"line\">    loadTask(gruntfile);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.help || allInit) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果没找到grunt但是有help参数的话，那么不做任何操作</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grunt.option(<span class=\"string\">'gruntfile'</span>)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果指定了gruntfile参数但是找不到文件那么输出错误信息</span></div><div class=\"line\">    grunt.log.writeln().write(msg).error();</div><div class=\"line\">    grunt.fatal(<span class=\"string\">'Unable to find \"'</span> + gruntfile + <span class=\"string\">'\" Gruntfile.'</span>, grunt.fail.code.MISSING_GRUNTFILE);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!grunt.option(<span class=\"string\">'help'</span>)) &#123;</div><div class=\"line\">    grunt.verbose.writeln().write(msg).error();</div><div class=\"line\">    grunt.log.writelns(</div><div class=\"line\">      <span class=\"string\">'A valid Gruntfile could not be found. Please see the getting '</span> +</div><div class=\"line\">      <span class=\"string\">'started guide for more information on how to configure grunt: '</span> +</div><div class=\"line\">      <span class=\"string\">'http://gruntjs.com/getting-started'</span></div><div class=\"line\">    );</div><div class=\"line\">    grunt.fatal(<span class=\"string\">'Unable to find Gruntfile.'</span>, grunt.fail.code.MISSING_GRUNTFILE);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 加载用户指定的npm包</span></div><div class=\"line\">  (grunt.option(<span class=\"string\">'npm'</span>) || []).forEach(task.loadNpmTasks);</div><div class=\"line\">  <span class=\"comment\">// 加载用户指定的任务</span></div><div class=\"line\">  (grunt.option(<span class=\"string\">'tasks'</span>) || []).forEach(task.loadTasks);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在初始化任务之后<code>grunt.tasks</code>方法会调用<code>task.run</code>方法，将任务添加到任务队列中等待执行。下面是<code>task.run</code>方法的代码，它也是位于<code>lib/util/task.js</code>文件中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将任务加入到队列中</span></div><div class=\"line\">Task.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 将参数转换为数组并且根据参数构建任务对象</span></div><div class=\"line\">  <span class=\"keyword\">var</span> things = <span class=\"keyword\">this</span>.parseArgs(<span class=\"built_in\">arguments</span>).map(<span class=\"keyword\">this</span>._taskPlusArgs, <span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"comment\">// 找出无法构建的任务</span></div><div class=\"line\">  <span class=\"keyword\">var</span> fails = things.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thing</span>) </span>&#123; <span class=\"keyword\">return</span> !thing.task; &#125;);</div><div class=\"line\">  <span class=\"keyword\">if</span> (fails.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果存在无法构建的任务，抛出错误并返回</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._throwIfRunning(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Task \"'</span> + fails[<span class=\"number\">0</span>].nameArgs + <span class=\"string\">'\" not found.'</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 将任务加入到任务队列相应的位置</span></div><div class=\"line\">  <span class=\"keyword\">this</span>._push(things);</div><div class=\"line\">  <span class=\"comment\">// 支持链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 将任务名分离为真实运行的任务名和参数的对象，比如：</span></div><div class=\"line\"><span class=\"comment\">// 'foo'          ==&gt;  任务名为foo，没有参数</span></div><div class=\"line\"><span class=\"comment\">// 'foo:bar:baz'  ==&gt;  如果'foo:bar:baz'任务存在，那么任务名为'foo:bar:baz'，没有参数</span></div><div class=\"line\"><span class=\"comment\">//                ==&gt;  如果'foo:bar'任务存在，那么任务名为'foo:bar'，参数为'baz'</span></div><div class=\"line\"><span class=\"comment\">//                ==&gt;  如果'foo'任务存在，那么任务名为'foo'，参数为'bar'和'baz'</span></div><div class=\"line\">Task.prototype._taskPlusArgs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 将传入的任务名根据冒号转换为数组</span></div><div class=\"line\">  <span class=\"keyword\">var</span> parts = <span class=\"keyword\">this</span>.splitArgs(name);</div><div class=\"line\">  <span class=\"comment\">// 从数组最后开始遍历数组</span></div><div class=\"line\">  <span class=\"keyword\">var</span> i = parts.length;</div><div class=\"line\">  <span class=\"keyword\">var</span> task;</div><div class=\"line\">  <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 将0到i的数组转换为任务名，用冒号隔开</span></div><div class=\"line\">    <span class=\"comment\">// 然后根据得到的任务名从任务缓存中得到相应的任务</span></div><div class=\"line\">    task = <span class=\"keyword\">this</span>._tasks[parts.slice(<span class=\"number\">0</span>, i).join(<span class=\"string\">':'</span>)];</div><div class=\"line\">    <span class=\"comment\">// 如果相应任务不存在，那么i减1，知道i等于0</span></div><div class=\"line\">  &#125; <span class=\"keyword\">while</span> (!task &amp;&amp; --i &gt; <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 除了任务名以外的部分属于参数</span></div><div class=\"line\">  <span class=\"keyword\">var</span> args = parts.slice(i);</div><div class=\"line\">  <span class=\"comment\">// 根据参数列表，得到相应的boolean型标记</span></div><div class=\"line\">  <span class=\"keyword\">var</span> flags = &#123;&#125;;</div><div class=\"line\">  args.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123; flags[arg] = <span class=\"literal\">true</span>; &#125;);</div><div class=\"line\">  <span class=\"comment\">// 返回构建的任务对象，包括任务名和任务参数</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;task: task, nameArgs: name, args: args, flags: flags&#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在<code>task.run</code>方法中，首先将参数进行分离，分隔出任务名和参数，然后利用任务名和参数构建一个任务对象，最后将这个对象放入任务队列中，参数分离的实现方法为<code>_taskPlusArgs</code>。调用<code>task.run</code>之后，<code>grunt.tasks</code>方法马上就会调用<code>task.start</code>方法运行任务队列中的任务。<code>task.start</code>方法的实现也在<code>lib/util/task.js</code>文件中，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 开始运行任务队列中的任务</span></div><div class=\"line\">Task.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opts</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//初始化opts对象</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!opts) &#123;</div><div class=\"line\">    opts = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 如果任务正在运行则退出</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._running) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</div><div class=\"line\">  <span class=\"comment\">// 通过nextTask依次运行队列中的任务</span></div><div class=\"line\">  <span class=\"keyword\">var</span> nextTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 用来保存从队列中取出的任务对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> thing;</div><div class=\"line\">    <span class=\"comment\">// 取出队列中的元素，直到取出的元素不是placeholder和marker</span></div><div class=\"line\">    <span class=\"comment\">// placeholder用来处理嵌套任务的情况</span></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//取出队列中的任务对象</span></div><div class=\"line\">      thing = <span class=\"keyword\">this</span>._queue.shift();</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (thing === <span class=\"keyword\">this</span>._placeholder || thing === <span class=\"keyword\">this</span>._marker);</div><div class=\"line\">    <span class=\"comment\">// 如果队列为空，那么完成任务，执行可选的done函数并返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!thing) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._running = <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._options.done) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._options.done();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 向队列中插入一个placeholder</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._queue.unshift(<span class=\"keyword\">this</span>._placeholder);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用取出的任务对象构造任务函数的上下文对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> context = &#123;</div><div class=\"line\">      <span class=\"comment\">// 任务名称:target名称:参数</span></div><div class=\"line\">      nameArgs: thing.nameArgs,</div><div class=\"line\">      <span class=\"comment\">// 任务名称</span></div><div class=\"line\">      name: thing.task.name,</div><div class=\"line\">      <span class=\"comment\">// 任务参数，这个参数包括了除了任务名以外的东西，包括target名称和参数</span></div><div class=\"line\">      args: thing.args,</div><div class=\"line\">      <span class=\"comment\">// 以args为键的键值对，值为true</span></div><div class=\"line\">      flags: thing.flags</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 运行任务的注册函数，上下文设置为上面构造的context函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.runTaskFn(context, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> thing.task.fn.apply(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.args);</div><div class=\"line\">    &#125;, nextTask, !!opts.asyncDone);</div><div class=\"line\"></div><div class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把任务标记为正在运行</span></div><div class=\"line\">  <span class=\"keyword\">this</span>._running = <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"comment\">// 运行任务队列中的下一个任务</span></div><div class=\"line\">  nextTask();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 运行任务的注册函数</span></div><div class=\"line\">Task.prototype.runTaskFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, fn, done, asyncDone</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 标记是否异步</span></div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"keyword\">async</span> = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 执行函数完成之后的工作，更新任务状态，执行done函数也就是运行下一个任务</span></div><div class=\"line\">  <span class=\"keyword\">var</span> complete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> err = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (success === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 任务运行失败，创建错误对象</span></div><div class=\"line\">      err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Task \"'</span> + context.nameArgs + <span class=\"string\">'\" failed.'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (success <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span> || &#123;&#125;.toString.call(success) === <span class=\"string\">'[object Error]'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果传入的是错误对象，表示任务执行失败</span></div><div class=\"line\">      err = success;</div><div class=\"line\">      success = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 任务运行成功</span></div><div class=\"line\">      success = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 任务结束后重置当前运行任务</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.current = &#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// 记录任务执行结构</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._success[context.nameArgs] = success;</div><div class=\"line\">    <span class=\"comment\">// 如果任务失败则调用错误处理函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!success &amp;&amp; <span class=\"keyword\">this</span>._options.error) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._options.error.call(&#123;name: context.name, nameArgs: context.nameArgs&#125;, err);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果指定了异步执行，那么使用node自带的nextTick来运行done</span></div><div class=\"line\">    <span class=\"comment\">// 否则直接运行done</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (asyncDone) &#123;</div><div class=\"line\">      process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        done(err, success);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      done(err, success);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 用来支持异步任务，也就是this.async()方法的实现，</span></div><div class=\"line\">  <span class=\"comment\">// 返回函数在异步任务完成时被调用执行complete方法</span></div><div class=\"line\">  context.async = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"comment\">// 返回的函数在任务中的异步工作完成后被调用</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success</span>) </span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; complete(success); &#125;, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 记录当前正在运行的任务上下文</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.current = context;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 执行任务的注册函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> success = fn.call(context);</div><div class=\"line\">    <span class=\"comment\">// 如果没有使用this.async</span></div><div class=\"line\">    <span class=\"comment\">// 也就是说async标记为false时在任务完成之后直接调用complete方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">async</span>) &#123;</div><div class=\"line\">      complete(success);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">    complete(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在<code>task.start</code>方法中定义了一个<code>nextTask</code>方法，方法的作用是依次执行任务队列中的任务，从任务队列中取出任务对象，利用任务对象构建一个上下文对象，然后在这个上下文中执行任务的注册函数，执行完注册函数之后执行队列中的下一个任务。执行注册函数的功能有<code>task.runTaskFn</code>方法实现。在这个方法中定义了一个<code>complele</code>方法，会在任务注册函数执行完成后备调用，进行错误处理工作。同时在<code>task.runTaskFn</code>方法中还向上下文对象<code>context</code>中添加了一个<code>async</code>方法，这个方法就是当我们需要在任务中进行一些异步操作是首先需要调用的方法，调用这个方法之后会返回一个函数，这个函数会异步执行<code>complete</code>方法，如果没有<code>async</code>方法，那么在我们任务中的异步操作还未返回时，grunt内部就会调用<code>complete</code>方法，这样就会造成错误。有了<code>async</code>方法，我们就可以确保<code>complete</code>方法是在我们任务完成之后才被调用。</p>\n<p>上面所涉及到的几个方法就是grunt中运行任务过程中主要的几个方法。大家肯定还觉得少了点什么，想要运行任务首先需要在<code>gruntfile.js</code>中注册任务，所以下一次我将和大家分享任务注册相关的源码解析，敬请期待。</p>\n","excerpt":"<p>上一篇分享了关于grunt-cli的源码解析，这篇开始grunt核心部分代码的解析，还是从上一篇结束部分开始。<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调用grunt执行任务</span></div><div class=\"line\"><span class=\"built_in\">require</span>(gruntpath).cli();</div></pre></td></tr></table></figure></p>\n<p>  <code>gruntpath</code>是通过解析得到的grunt.js的文件路径，通过<code>require</code>方法加载grunt模块然后调用模块的<code>cli</code>方法来运行命令行最后运行命令行中的任务。</p>\n<p>  我们先从大体上看看grunt从输入命令行到任务运行完毕整个过程中都经过了哪些步骤。下图是我根据源码得出的一个流程图。</p>\n<p><img src=\"/img/bVlrNU\" alt=\"图片描述\"></p>\n<ol>\n<li>首先，我们输入命令行之后调用<code>require(gruntpath).cli()</code>方法，在cli方法中会初始化命令行的默认参数列表，解析输入命令行的参数以及任务名称</li>\n<li>然后调用<code>grunt.tasks</code>方法，将任务参数和名称传入。在<code>grunt.tasks</code>方法中，会进一步对参数进行解析，初始化log功能，如果参数带有version或者help选项那么直接执行相应的函数，否则就解析任务名称。</li>\n<li>接着调用<code>task.init</code>方法。加载<code>Gruntfile.js</code>文件，注册任务信息以及配置信息。</li>\n<li>接着调用<code>task.run</code>方法。<code>task.run</code>方法并不会运行任务，而是把任务相关信息添加到任务队列中。</li>\n<li>最后才是调用<code>task.start</code>方法来依次运行任务队列中的任务。<br>下面来一步步解析grunt核心源码。首先，来看看<code>lib/grunt/cli.js</code>文件中的代码。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 执行命令行时执行的函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> cli = <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options, done</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 利用传递的参数设置cli.options对象，但是不覆盖命令行的参数</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (options) &#123;</div><div class=\"line\">    <span class=\"built_in\">Object</span>.keys(options).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> cli.options)) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果输入的命令行中不存在这个参数，那么把它加入到cli的options属性中</span></div><div class=\"line\">        cli.options[key] = options[key];</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cli.optlist[key].type === <span class=\"built_in\">Array</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果输入的命令行中存在这个参数，并且参数的类型是数组，那么把它加入到数组尾部</span></div><div class=\"line\">        [].push.apply(cli.options[key], options[key]);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 运行任务</span></div><div class=\"line\">  grunt.tasks(cli.tasks, cli.options, done);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 默认的参数选项列表</span></div><div class=\"line\"><span class=\"keyword\">var</span> optlist = cli.optlist = &#123;</div><div class=\"line\">  help: &#123;</div><div class=\"line\">    short: <span class=\"string\">'h'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Display this help text.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  base: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Specify an alternate base path. By default, all file paths are relative to the Gruntfile. '</span> +</div><div class=\"line\">          <span class=\"string\">'(grunt.file.setBase) *'</span>,</div><div class=\"line\">    type: path</div><div class=\"line\">  &#125;,</div><div class=\"line\">  color: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Disable colored output.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</div><div class=\"line\">    negate: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  gruntfile: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories '</span> +</div><div class=\"line\">          <span class=\"string\">'for the nearest Gruntfile.js or Gruntfile.coffee file.'</span>,</div><div class=\"line\">    type: path</div><div class=\"line\">  &#125;,</div><div class=\"line\">  debug: &#123;</div><div class=\"line\">    short: <span class=\"string\">'d'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Enable debugging mode for tasks that support it.'</span>,</div><div class=\"line\">    type: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">Boolean</span>]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  stack: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Print a stack trace when exiting with a warning or fatal error.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  force: &#123;</div><div class=\"line\">    short: <span class=\"string\">'f'</span>,</div><div class=\"line\">    info: <span class=\"string\">'A way to force your way past warnings. Want a suggestion? Don\\'t use this option, fix your code.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  tasks: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Additional directory paths to scan for task and \"extra\" files. (grunt.loadTasks) *'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Array</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  npm: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Array</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  write: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Disable writing files (dry run).'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</div><div class=\"line\">    negate: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  verbose: &#123;</div><div class=\"line\">    short: <span class=\"string\">'v'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Verbose mode. A lot more information output.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  version: &#123;</div><div class=\"line\">    short: <span class=\"string\">'V'</span>,</div><div class=\"line\">    info: <span class=\"string\">'Print the grunt version. Combine with --verbose for more info.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">Boolean</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  completion: &#123;</div><div class=\"line\">    info: <span class=\"string\">'Output shell auto-completion rules. See the grunt-cli documentation for more information.'</span>,</div><div class=\"line\">    type: <span class=\"built_in\">String</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 利用optlist列表初始化aliases和known对象</span></div><div class=\"line\"><span class=\"comment\">// 传递给nopt模块进行命令行参数解析</span></div><div class=\"line\"><span class=\"comment\">// nopt是一个用来解析命令行参数的第三方模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> aliases = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> known = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> short = optlist[key].short;</div><div class=\"line\">  <span class=\"keyword\">if</span> (short) &#123;</div><div class=\"line\">    aliases[short] = <span class=\"string\">'--'</span> + key;</div><div class=\"line\">  &#125;</div><div class=\"line\">  known[key] = optlist[key].type;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parsed = nopt(known, aliases, process.argv, <span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"comment\">// 获取命令行中的任务名称</span></div><div class=\"line\">cli.tasks = parsed.argv.remain;</div><div class=\"line\"><span class=\"comment\">// 获得命令行中的参数</span></div><div class=\"line\">cli.options = parsed;</div><div class=\"line\"><span class=\"keyword\">delete</span> parsed.argv;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 初始化类型为数组但是还没被初始化的参数，比如npm和task</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.keys(optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (optlist[key].type === <span class=\"built_in\">Array</span> &amp;&amp; !(key <span class=\"keyword\">in</span> cli.options)) &#123;</div><div class=\"line\">    cli.options[key] = [];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这段代码相对比较简单，主要功能就是解析任务名和参数然后传递给<code>grunt.tasks</code>方法进行调用。<br>下面来看看<code>grunt.js</code>中关于<code>grunt.tasks</code>方法的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这个tasks方法一般只在grunt内部调用</span></div><div class=\"line\"><span class=\"comment\">// tasks方法用来将任务添加到任务队列中，并且运行任务</span></div><div class=\"line\">grunt.tasks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tasks, options, done</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// option模块对命令行参数进行包装</span></div><div class=\"line\">  <span class=\"comment\">// init方法对参数进行了初始化，在方法内部判断传入参数是否为空</span></div><div class=\"line\">  <span class=\"comment\">// 如果为空则初始化为空对象否则使用传入的对象进行初始化</span></div><div class=\"line\">  option.init(options);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _tasks, _options;</div><div class=\"line\">  <span class=\"comment\">// option方法接受可变属性的参数，</span></div><div class=\"line\">  <span class=\"comment\">// 如果传入一个参数则在参数对象中找出对于的参数，</span></div><div class=\"line\">  <span class=\"comment\">// 如果传入两个参数则根据这两个参数设置key-value键值对，并value</span></div><div class=\"line\">  <span class=\"comment\">// 同时方法内部会用正则匹配no-color、no-write的情况，</span></div><div class=\"line\">  <span class=\"comment\">// 如果出现则设置option['color']或option['write']为false，并返回false</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (option(<span class=\"string\">'version'</span>)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果带有version参数</span></div><div class=\"line\">    <span class=\"comment\">// 输出版本信息</span></div><div class=\"line\">    log.writeln(<span class=\"string\">'grunt v'</span> + grunt.version);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (option(<span class=\"string\">'verbose'</span>)) &#123;</div><div class=\"line\">      <span class=\"comment\">// //输出详细信息，包括grunt的路径</span></div><div class=\"line\">      verbose.writeln(<span class=\"string\">'Install path: '</span> + path.resolve(__dirname, <span class=\"string\">'..'</span>));</div><div class=\"line\"></div><div class=\"line\">      grunt.log.muted = <span class=\"literal\">true</span>;</div><div class=\"line\">      <span class=\"comment\">// 初始化任务系统，解析gruntfile以便输出所有可用的任务</span></div><div class=\"line\">      grunt.task.init([], &#123;help: <span class=\"literal\">true</span>&#125;);</div><div class=\"line\">      grunt.log.muted = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 输出可用的任务信息</span></div><div class=\"line\">      _tasks = <span class=\"built_in\">Object</span>.keys(grunt.task._tasks).sort();</div><div class=\"line\">      verbose.writeln(<span class=\"string\">'Available tasks: '</span> + _tasks.join(<span class=\"string\">' '</span>));</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 输出所有可用参数的详细信息</span></div><div class=\"line\">      _options = [];</div><div class=\"line\">      <span class=\"built_in\">Object</span>.keys(grunt.cli.optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">long</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> o = grunt.cli.optlist[long];</div><div class=\"line\">        _options.push(<span class=\"string\">'--'</span> + (o.negate ? <span class=\"string\">'no-'</span> : <span class=\"string\">''</span>) + long);</div><div class=\"line\">        <span class=\"keyword\">if</span> (o.short) &#123; _options.push(<span class=\"string\">'-'</span> + o.short); &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      verbose.writeln(<span class=\"string\">'Available options: '</span> + _options.join(<span class=\"string\">' '</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 初始化log的着色功能</span></div><div class=\"line\">  log.initColors();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果参数带有help则输出帮助信息</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (option(<span class=\"string\">'help'</span>)) &#123;</div><div class=\"line\">    help.display();</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 根据option输出命令行参数，flags方法会过滤掉值为空的参数</span></div><div class=\"line\">  verbose.header(<span class=\"string\">'Initializing'</span>).writeflags(option.flags(), <span class=\"string\">'Command-line options'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 判断是否有传入tasks参数并且任务长度大于0</span></div><div class=\"line\">  <span class=\"keyword\">var</span> tasksSpecified = tasks &amp;&amp; tasks.length &gt; <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"comment\">//将传入参数进行转换，转换为任务数组，如果没有传入有效的任务那么使用默认default任务</span></div><div class=\"line\">  tasks = task.parseArgs([tasksSpecified ? tasks : <span class=\"string\">'default'</span>]);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 根据传入的tasks参数初始化任务</span></div><div class=\"line\">  <span class=\"comment\">// 在方法中加载gruntfile.js文件，进行任务注册和配置的解析</span></div><div class=\"line\">  <span class=\"comment\">// 也就是加载我们编写的任务代码</span></div><div class=\"line\">  task.init(tasks, options);</div><div class=\"line\"></div><div class=\"line\">  verbose.writeln();</div><div class=\"line\">  <span class=\"keyword\">if</span> (!tasksSpecified) &#123;</div><div class=\"line\">    verbose.writeln(<span class=\"string\">'No tasks specified, running default tasks.'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  verbose.writeflags(tasks, <span class=\"string\">'Running tasks'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 注册异常处理函数，输出异常信息</span></div><div class=\"line\">  <span class=\"keyword\">var</span> uncaughtHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    fail.fatal(e, fail.code.TASK_FAILURE);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  process.on(<span class=\"string\">'uncaughtException'</span>, uncaughtHandler);</div><div class=\"line\"></div><div class=\"line\">  task.options(&#123;</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">      fail.warn(e, fail.code.TASK_FAILURE);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    done: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 当任务完成之后移除异常监听函数，减少多余的开销</span></div><div class=\"line\">      process.removeListener(<span class=\"string\">'uncaughtException'</span>, uncaughtHandler);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 输出最后的运行结果，失败或者成功</span></div><div class=\"line\">      fail.report();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (done) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果存在done函数的话，当完成任务时执行done函数</span></div><div class=\"line\">        done();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果没有done函数直接结束进程</span></div><div class=\"line\">        util.exit(<span class=\"number\">0</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 将任务依次加入内部的任务队列中，run方法并不会运行任务，只是加入到队列中</span></div><div class=\"line\">  tasks.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123; task.run(name); &#125;);</div><div class=\"line\">  <span class=\"comment\">// 开始运行任务队列中的任务</span></div><div class=\"line\">  task.start(&#123;asyncDone:<span class=\"literal\">true</span>&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在<code>grunt.tasks</code>代码中，首先会进行参数的初始化，接着判断参数是否带有version或者help选项，如果带有这两个选项就进行相应的工作而不运行任务任务，否则解析任务名进行任务初始化并添加到任务队列中，最后运行任务。<br>在<code>grunt.tasks</code>方法中比较重要的三个方法就是<code>task.init</code>，<code>task.run</code>和<code>task.start</code>方法。下面看看<code>task.init</code>方法的具体实现。这个方法位于<code>lib/grunt/task.js</code>文件中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 初始化任务</span></div><div class=\"line\">task.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tasks, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!options) &#123; options = &#123;&#125;; &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 拥有init方法说明task是初始化任务，比如第三方插件</span></div><div class=\"line\">  <span class=\"keyword\">var</span> allInit = tasks.length &gt; <span class=\"number\">0</span> &amp;&amp; tasks.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = task._taskPlusArgs(name).task;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj &amp;&amp; obj.init;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 获取gruntfile.js路径，如果有指定路径那么直接使用否则在当前目录及父目录中查找</span></div><div class=\"line\">  <span class=\"keyword\">var</span> gruntfile, msg;</div><div class=\"line\">  <span class=\"keyword\">if</span> (allInit || options.gruntfile === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    gruntfile = <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    gruntfile = grunt.option(<span class=\"string\">'gruntfile'</span>) ||</div><div class=\"line\">      grunt.file.findup(<span class=\"string\">'Gruntfile.&#123;js,coffee&#125;'</span>, &#123;nocase: <span class=\"literal\">true</span>&#125;);</div><div class=\"line\">    msg = <span class=\"string\">'Reading \"'</span> + (gruntfile ? path.basename(gruntfile) : <span class=\"string\">'???'</span>) + <span class=\"string\">'\" Gruntfile...'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 如果参数中将gruntfile设为false，那么说明任务是一个插件或者库</span></div><div class=\"line\">  <span class=\"comment\">// 不做任何操作</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (options.gruntfile === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// Grunt was run as a lib with &#123;gruntfile: false&#125;.</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gruntfile &amp;&amp; grunt.file.exists(gruntfile)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果存在gruntfile</span></div><div class=\"line\">    grunt.verbose.writeln().write(msg).ok();</div><div class=\"line\">    <span class=\"comment\">// 修改进程的操作目录，如果有指定base那么使用base目录否则就使用gruntfile所在的目录</span></div><div class=\"line\">    process.chdir(grunt.option(<span class=\"string\">'base'</span>) || path.dirname(gruntfile));</div><div class=\"line\">    <span class=\"comment\">// 在verbose情况下输出Registering Gruntfile tasks信息</span></div><div class=\"line\">    loadTasksMessage(<span class=\"string\">'Gruntfile'</span>);</div><div class=\"line\">    <span class=\"comment\">// 加载gruntfile中的任务</span></div><div class=\"line\">    loadTask(gruntfile);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.help || allInit) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果没找到grunt但是有help参数的话，那么不做任何操作</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grunt.option(<span class=\"string\">'gruntfile'</span>)) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果指定了gruntfile参数但是找不到文件那么输出错误信息</span></div><div class=\"line\">    grunt.log.writeln().write(msg).error();</div><div class=\"line\">    grunt.fatal(<span class=\"string\">'Unable to find \"'</span> + gruntfile + <span class=\"string\">'\" Gruntfile.'</span>, grunt.fail.code.MISSING_GRUNTFILE);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!grunt.option(<span class=\"string\">'help'</span>)) &#123;</div><div class=\"line\">    grunt.verbose.writeln().write(msg).error();</div><div class=\"line\">    grunt.log.writelns(</div><div class=\"line\">      <span class=\"string\">'A valid Gruntfile could not be found. Please see the getting '</span> +</div><div class=\"line\">      <span class=\"string\">'started guide for more information on how to configure grunt: '</span> +</div><div class=\"line\">      <span class=\"string\">'http://gruntjs.com/getting-started'</span></div><div class=\"line\">    );</div><div class=\"line\">    grunt.fatal(<span class=\"string\">'Unable to find Gruntfile.'</span>, grunt.fail.code.MISSING_GRUNTFILE);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 加载用户指定的npm包</span></div><div class=\"line\">  (grunt.option(<span class=\"string\">'npm'</span>) || []).forEach(task.loadNpmTasks);</div><div class=\"line\">  <span class=\"comment\">// 加载用户指定的任务</span></div><div class=\"line\">  (grunt.option(<span class=\"string\">'tasks'</span>) || []).forEach(task.loadTasks);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在初始化任务之后<code>grunt.tasks</code>方法会调用<code>task.run</code>方法，将任务添加到任务队列中等待执行。下面是<code>task.run</code>方法的代码，它也是位于<code>lib/util/task.js</code>文件中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 将任务加入到队列中</span></div><div class=\"line\">Task.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 将参数转换为数组并且根据参数构建任务对象</span></div><div class=\"line\">  <span class=\"keyword\">var</span> things = <span class=\"keyword\">this</span>.parseArgs(<span class=\"built_in\">arguments</span>).map(<span class=\"keyword\">this</span>._taskPlusArgs, <span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"comment\">// 找出无法构建的任务</span></div><div class=\"line\">  <span class=\"keyword\">var</span> fails = things.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thing</span>) </span>&#123; <span class=\"keyword\">return</span> !thing.task; &#125;);</div><div class=\"line\">  <span class=\"keyword\">if</span> (fails.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果存在无法构建的任务，抛出错误并返回</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._throwIfRunning(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Task \"'</span> + fails[<span class=\"number\">0</span>].nameArgs + <span class=\"string\">'\" not found.'</span>));</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 将任务加入到任务队列相应的位置</span></div><div class=\"line\">  <span class=\"keyword\">this</span>._push(things);</div><div class=\"line\">  <span class=\"comment\">// 支持链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 将任务名分离为真实运行的任务名和参数的对象，比如：</span></div><div class=\"line\"><span class=\"comment\">// 'foo'          ==&gt;  任务名为foo，没有参数</span></div><div class=\"line\"><span class=\"comment\">// 'foo:bar:baz'  ==&gt;  如果'foo:bar:baz'任务存在，那么任务名为'foo:bar:baz'，没有参数</span></div><div class=\"line\"><span class=\"comment\">//                ==&gt;  如果'foo:bar'任务存在，那么任务名为'foo:bar'，参数为'baz'</span></div><div class=\"line\"><span class=\"comment\">//                ==&gt;  如果'foo'任务存在，那么任务名为'foo'，参数为'bar'和'baz'</span></div><div class=\"line\">Task.prototype._taskPlusArgs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 将传入的任务名根据冒号转换为数组</span></div><div class=\"line\">  <span class=\"keyword\">var</span> parts = <span class=\"keyword\">this</span>.splitArgs(name);</div><div class=\"line\">  <span class=\"comment\">// 从数组最后开始遍历数组</span></div><div class=\"line\">  <span class=\"keyword\">var</span> i = parts.length;</div><div class=\"line\">  <span class=\"keyword\">var</span> task;</div><div class=\"line\">  <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 将0到i的数组转换为任务名，用冒号隔开</span></div><div class=\"line\">    <span class=\"comment\">// 然后根据得到的任务名从任务缓存中得到相应的任务</span></div><div class=\"line\">    task = <span class=\"keyword\">this</span>._tasks[parts.slice(<span class=\"number\">0</span>, i).join(<span class=\"string\">':'</span>)];</div><div class=\"line\">    <span class=\"comment\">// 如果相应任务不存在，那么i减1，知道i等于0</span></div><div class=\"line\">  &#125; <span class=\"keyword\">while</span> (!task &amp;&amp; --i &gt; <span class=\"number\">0</span>);</div><div class=\"line\">  <span class=\"comment\">// 除了任务名以外的部分属于参数</span></div><div class=\"line\">  <span class=\"keyword\">var</span> args = parts.slice(i);</div><div class=\"line\">  <span class=\"comment\">// 根据参数列表，得到相应的boolean型标记</span></div><div class=\"line\">  <span class=\"keyword\">var</span> flags = &#123;&#125;;</div><div class=\"line\">  args.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123; flags[arg] = <span class=\"literal\">true</span>; &#125;);</div><div class=\"line\">  <span class=\"comment\">// 返回构建的任务对象，包括任务名和任务参数</span></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;task: task, nameArgs: name, args: args, flags: flags&#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在<code>task.run</code>方法中，首先将参数进行分离，分隔出任务名和参数，然后利用任务名和参数构建一个任务对象，最后将这个对象放入任务队列中，参数分离的实现方法为<code>_taskPlusArgs</code>。调用<code>task.run</code>之后，<code>grunt.tasks</code>方法马上就会调用<code>task.start</code>方法运行任务队列中的任务。<code>task.start</code>方法的实现也在<code>lib/util/task.js</code>文件中，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 开始运行任务队列中的任务</span></div><div class=\"line\">Task.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opts</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//初始化opts对象</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!opts) &#123;</div><div class=\"line\">    opts = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 如果任务正在运行则退出</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._running) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</div><div class=\"line\">  <span class=\"comment\">// 通过nextTask依次运行队列中的任务</span></div><div class=\"line\">  <span class=\"keyword\">var</span> nextTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 用来保存从队列中取出的任务对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> thing;</div><div class=\"line\">    <span class=\"comment\">// 取出队列中的元素，直到取出的元素不是placeholder和marker</span></div><div class=\"line\">    <span class=\"comment\">// placeholder用来处理嵌套任务的情况</span></div><div class=\"line\">    <span class=\"keyword\">do</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//取出队列中的任务对象</span></div><div class=\"line\">      thing = <span class=\"keyword\">this</span>._queue.shift();</div><div class=\"line\">    &#125; <span class=\"keyword\">while</span> (thing === <span class=\"keyword\">this</span>._placeholder || thing === <span class=\"keyword\">this</span>._marker);</div><div class=\"line\">    <span class=\"comment\">// 如果队列为空，那么完成任务，执行可选的done函数并返回</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!thing) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._running = <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._options.done) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._options.done();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 向队列中插入一个placeholder</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._queue.unshift(<span class=\"keyword\">this</span>._placeholder);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 使用取出的任务对象构造任务函数的上下文对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> context = &#123;</div><div class=\"line\">      <span class=\"comment\">// 任务名称:target名称:参数</span></div><div class=\"line\">      nameArgs: thing.nameArgs,</div><div class=\"line\">      <span class=\"comment\">// 任务名称</span></div><div class=\"line\">      name: thing.task.name,</div><div class=\"line\">      <span class=\"comment\">// 任务参数，这个参数包括了除了任务名以外的东西，包括target名称和参数</span></div><div class=\"line\">      args: thing.args,</div><div class=\"line\">      <span class=\"comment\">// 以args为键的键值对，值为true</span></div><div class=\"line\">      flags: thing.flags</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 运行任务的注册函数，上下文设置为上面构造的context函数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.runTaskFn(context, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> thing.task.fn.apply(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.args);</div><div class=\"line\">    &#125;, nextTask, !!opts.asyncDone);</div><div class=\"line\"></div><div class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 把任务标记为正在运行</span></div><div class=\"line\">  <span class=\"keyword\">this</span>._running = <span class=\"literal\">true</span>;</div><div class=\"line\">  <span class=\"comment\">// 运行任务队列中的下一个任务</span></div><div class=\"line\">  nextTask();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 运行任务的注册函数</span></div><div class=\"line\">Task.prototype.runTaskFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, fn, done, asyncDone</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 标记是否异步</span></div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"keyword\">async</span> = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 执行函数完成之后的工作，更新任务状态，执行done函数也就是运行下一个任务</span></div><div class=\"line\">  <span class=\"keyword\">var</span> complete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> err = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (success === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 任务运行失败，创建错误对象</span></div><div class=\"line\">      err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Task \"'</span> + context.nameArgs + <span class=\"string\">'\" failed.'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (success <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span> || &#123;&#125;.toString.call(success) === <span class=\"string\">'[object Error]'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果传入的是错误对象，表示任务执行失败</span></div><div class=\"line\">      err = success;</div><div class=\"line\">      success = <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 任务运行成功</span></div><div class=\"line\">      success = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 任务结束后重置当前运行任务</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.current = &#123;&#125;;</div><div class=\"line\">    <span class=\"comment\">// 记录任务执行结构</span></div><div class=\"line\">    <span class=\"keyword\">this</span>._success[context.nameArgs] = success;</div><div class=\"line\">    <span class=\"comment\">// 如果任务失败则调用错误处理函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!success &amp;&amp; <span class=\"keyword\">this</span>._options.error) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>._options.error.call(&#123;name: context.name, nameArgs: context.nameArgs&#125;, err);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果指定了异步执行，那么使用node自带的nextTick来运行done</span></div><div class=\"line\">    <span class=\"comment\">// 否则直接运行done</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (asyncDone) &#123;</div><div class=\"line\">      process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        done(err, success);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      done(err, success);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 用来支持异步任务，也就是this.async()方法的实现，</span></div><div class=\"line\">  <span class=\"comment\">// 返回函数在异步任务完成时被调用执行complete方法</span></div><div class=\"line\">  context.async = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"comment\">// 返回的函数在任务中的异步工作完成后被调用</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success</span>) </span>&#123;</div><div class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; complete(success); &#125;, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 记录当前正在运行的任务上下文</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.current = context;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 执行任务的注册函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> success = fn.call(context);</div><div class=\"line\">    <span class=\"comment\">// 如果没有使用this.async</span></div><div class=\"line\">    <span class=\"comment\">// 也就是说async标记为false时在任务完成之后直接调用complete方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">async</span>) &#123;</div><div class=\"line\">      complete(success);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">    complete(err);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在<code>task.start</code>方法中定义了一个<code>nextTask</code>方法，方法的作用是依次执行任务队列中的任务，从任务队列中取出任务对象，利用任务对象构建一个上下文对象，然后在这个上下文中执行任务的注册函数，执行完注册函数之后执行队列中的下一个任务。执行注册函数的功能有<code>task.runTaskFn</code>方法实现。在这个方法中定义了一个<code>complele</code>方法，会在任务注册函数执行完成后备调用，进行错误处理工作。同时在<code>task.runTaskFn</code>方法中还向上下文对象<code>context</code>中添加了一个<code>async</code>方法，这个方法就是当我们需要在任务中进行一些异步操作是首先需要调用的方法，调用这个方法之后会返回一个函数，这个函数会异步执行<code>complete</code>方法，如果没有<code>async</code>方法，那么在我们任务中的异步操作还未返回时，grunt内部就会调用<code>complete</code>方法，这样就会造成错误。有了<code>async</code>方法，我们就可以确保<code>complete</code>方法是在我们任务完成之后才被调用。</p>\n<p>上面所涉及到的几个方法就是grunt中运行任务过程中主要的几个方法。大家肯定还觉得少了点什么，想要运行任务首先需要在<code>gruntfile.js</code>中注册任务，所以下一次我将和大家分享任务注册相关的源码解析，敬请期待。</p>"},{"title":"看看 Grunt 的源码（一）：grunt-cli 源码解析","date":"2015-04-07T06:46:53.000Z","_content":"\n由于将来工作需要最近学习了Grunt，至于Grunt是什么大家百度下就好了，我就不多说了。对于它内部的实现比较感兴趣，所以看了看源码。今天先来说说grunt命令行工具grunt-cli的实现。\n<!-- more -->\ngrunt-cli是建立在grunt基础上的命令行工具，通过它可以很方便的使用grunt进行一些自动化任务。grunt-cli的处理过程主要分为下面几步：\n\n1. 加载必须的模块，这其中包括第三方模块和grunt-cli内部的模块\n2. 获取命令行参数执行相应的操作\n3. 查找grunt.js文件并执行任务\n\n下面的grunt-cli的主要代码：\n\n```javascript\n#!/usr/bin/env node\n\n'use strict';\n\nprocess.title = 'grunt';\n\n//加载文件查找模块,findup用于向上查找\nvar findup = require('findup-sync');\n//加载路径解析模块\nvar resolve = require('resolve').sync;\n\n\n//加载grunt-cli内部的cli模块\n//cli模块利用nopt第三方库来获取grunt命令中的参数值\nvar options = require('../lib/cli').options;\n\n//加载grunt-cli内部的completion模块\n//completion模块用来打印自动补全的脚本\n//这样就可以通过eval \"$(grunt --completion=bash)\"来执行脚本支持自动补全\n//completion.js内部就是通过参数查找文件最后输出\nvar completion = require('../lib/completion');\n\n//加载grunt-cli内部的info模块\n//用来输出版本信息以及帮助信息的模块\n//info.js内部主要就是几个输出grunt信息的方法\nvar info = require('../lib/info');\n\n//加载node自带的路径解析模块\nvar path = require('path');\n\n//获取当前路径\nvar basedir = process.cwd();\n//grunt.js文件的路径\nvar gruntpath;\n\n//判断命令行参数进行相应操作\nif ('completion' in options) {\n//如果grunt命令带有--completion参数，则打印相应的自动补全脚本\n//grunt --completion=bash这个命令基本上只会在设置自动补全的使用\n//在自动化工作中并不会用到\ncompletion.print(options.completion);\n} else if (options.version) {\n//如果grunt命令带有--version参数，则打印版本信息\ninfo.version();\n} else if (options.base && !options.gruntfile) {\n//如果在grunt命令中指定了base文件夹\n//那么所有操作都会基于这个文件路径进行\nbasedir = path.resolve(options.base);\n} else if (options.gruntfile) {\n//如果grunt命令中指定了gruntfile，那么就会执行这个文件中的任务，同时文件夹切换到对于目录下\n//默认情况下grunt会在当前目录以及父目录中查找Gruntfile.js或者Gruntfile.coffee文件\nbasedir = path.resolve(path.dirname(options.gruntfile));\n}\n\ntry {\n//得到grunt.js的地址\ngruntpath = resolve('grunt', {basedir: basedir});\n} catch (ex) {\n//如果在当前路径没找到，向父目录继续查找\ngruntpath = findup('lib/grunt.js');\n// No grunt install found!\nif (!gruntpath) {\n  //无法找到目录\n  if (options.version) {\n    //如果查询版本信息，由于找不到grunt所以直接退出\n    process.exit();\n  }\n  if (options.help) {\n    //显示帮助信息\n    info.help();\n  }\n  info.fatal('Unable to find local grunt.', 99);\n}\n}\n\n//调用grunt执行任务，精彩从这里开始\nrequire(gruntpath).cli();\n\n```\n整个过程比较简单，真正有意思的工作在grunt.js中，后续我会跟大家分享这方面的内容。\n","source":"_posts/grunt-source-code-1.md","raw":"title: 看看 Grunt 的源码（一）：grunt-cli 源码解析\ndate: 2015-04-07 14:46:53\ntags: ['grunt']\n---\n\n由于将来工作需要最近学习了Grunt，至于Grunt是什么大家百度下就好了，我就不多说了。对于它内部的实现比较感兴趣，所以看了看源码。今天先来说说grunt命令行工具grunt-cli的实现。\n<!-- more -->\ngrunt-cli是建立在grunt基础上的命令行工具，通过它可以很方便的使用grunt进行一些自动化任务。grunt-cli的处理过程主要分为下面几步：\n\n1. 加载必须的模块，这其中包括第三方模块和grunt-cli内部的模块\n2. 获取命令行参数执行相应的操作\n3. 查找grunt.js文件并执行任务\n\n下面的grunt-cli的主要代码：\n\n```javascript\n#!/usr/bin/env node\n\n'use strict';\n\nprocess.title = 'grunt';\n\n//加载文件查找模块,findup用于向上查找\nvar findup = require('findup-sync');\n//加载路径解析模块\nvar resolve = require('resolve').sync;\n\n\n//加载grunt-cli内部的cli模块\n//cli模块利用nopt第三方库来获取grunt命令中的参数值\nvar options = require('../lib/cli').options;\n\n//加载grunt-cli内部的completion模块\n//completion模块用来打印自动补全的脚本\n//这样就可以通过eval \"$(grunt --completion=bash)\"来执行脚本支持自动补全\n//completion.js内部就是通过参数查找文件最后输出\nvar completion = require('../lib/completion');\n\n//加载grunt-cli内部的info模块\n//用来输出版本信息以及帮助信息的模块\n//info.js内部主要就是几个输出grunt信息的方法\nvar info = require('../lib/info');\n\n//加载node自带的路径解析模块\nvar path = require('path');\n\n//获取当前路径\nvar basedir = process.cwd();\n//grunt.js文件的路径\nvar gruntpath;\n\n//判断命令行参数进行相应操作\nif ('completion' in options) {\n//如果grunt命令带有--completion参数，则打印相应的自动补全脚本\n//grunt --completion=bash这个命令基本上只会在设置自动补全的使用\n//在自动化工作中并不会用到\ncompletion.print(options.completion);\n} else if (options.version) {\n//如果grunt命令带有--version参数，则打印版本信息\ninfo.version();\n} else if (options.base && !options.gruntfile) {\n//如果在grunt命令中指定了base文件夹\n//那么所有操作都会基于这个文件路径进行\nbasedir = path.resolve(options.base);\n} else if (options.gruntfile) {\n//如果grunt命令中指定了gruntfile，那么就会执行这个文件中的任务，同时文件夹切换到对于目录下\n//默认情况下grunt会在当前目录以及父目录中查找Gruntfile.js或者Gruntfile.coffee文件\nbasedir = path.resolve(path.dirname(options.gruntfile));\n}\n\ntry {\n//得到grunt.js的地址\ngruntpath = resolve('grunt', {basedir: basedir});\n} catch (ex) {\n//如果在当前路径没找到，向父目录继续查找\ngruntpath = findup('lib/grunt.js');\n// No grunt install found!\nif (!gruntpath) {\n  //无法找到目录\n  if (options.version) {\n    //如果查询版本信息，由于找不到grunt所以直接退出\n    process.exit();\n  }\n  if (options.help) {\n    //显示帮助信息\n    info.help();\n  }\n  info.fatal('Unable to find local grunt.', 99);\n}\n}\n\n//调用grunt执行任务，精彩从这里开始\nrequire(gruntpath).cli();\n\n```\n整个过程比较简单，真正有意思的工作在grunt.js中，后续我会跟大家分享这方面的内容。\n","slug":"grunt-source-code-1","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvk700080pov3qdh60jw","content":"<p>由于将来工作需要最近学习了Grunt，至于Grunt是什么大家百度下就好了，我就不多说了。对于它内部的实现比较感兴趣，所以看了看源码。今天先来说说grunt命令行工具grunt-cli的实现。<br><a id=\"more\"></a><br>grunt-cli是建立在grunt基础上的命令行工具，通过它可以很方便的使用grunt进行一些自动化任务。grunt-cli的处理过程主要分为下面几步：</p>\n<ol>\n<li>加载必须的模块，这其中包括第三方模块和grunt-cli内部的模块</li>\n<li>获取命令行参数执行相应的操作</li>\n<li>查找grunt.js文件并执行任务</li>\n</ol>\n<p>下面的grunt-cli的主要代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">'use strict';</div><div class=\"line\"></div><div class=\"line\">process.title = <span class=\"string\">'grunt'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载文件查找模块,findup用于向上查找</span></div><div class=\"line\"><span class=\"keyword\">var</span> findup = <span class=\"built_in\">require</span>(<span class=\"string\">'findup-sync'</span>);</div><div class=\"line\"><span class=\"comment\">//加载路径解析模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> resolve = <span class=\"built_in\">require</span>(<span class=\"string\">'resolve'</span>).sync;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载grunt-cli内部的cli模块</span></div><div class=\"line\"><span class=\"comment\">//cli模块利用nopt第三方库来获取grunt命令中的参数值</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/cli'</span>).options;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载grunt-cli内部的completion模块</span></div><div class=\"line\"><span class=\"comment\">//completion模块用来打印自动补全的脚本</span></div><div class=\"line\"><span class=\"comment\">//这样就可以通过eval \"$(grunt --completion=bash)\"来执行脚本支持自动补全</span></div><div class=\"line\"><span class=\"comment\">//completion.js内部就是通过参数查找文件最后输出</span></div><div class=\"line\"><span class=\"keyword\">var</span> completion = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/completion'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载grunt-cli内部的info模块</span></div><div class=\"line\"><span class=\"comment\">//用来输出版本信息以及帮助信息的模块</span></div><div class=\"line\"><span class=\"comment\">//info.js内部主要就是几个输出grunt信息的方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> info = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/info'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载node自带的路径解析模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取当前路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> basedir = process.cwd();</div><div class=\"line\"><span class=\"comment\">//grunt.js文件的路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> gruntpath;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断命令行参数进行相应操作</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'completion'</span> <span class=\"keyword\">in</span> options) &#123;</div><div class=\"line\"><span class=\"comment\">//如果grunt命令带有--completion参数，则打印相应的自动补全脚本</span></div><div class=\"line\"><span class=\"comment\">//grunt --completion=bash这个命令基本上只会在设置自动补全的使用</span></div><div class=\"line\"><span class=\"comment\">//在自动化工作中并不会用到</span></div><div class=\"line\">completion.print(options.completion);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.version) &#123;</div><div class=\"line\"><span class=\"comment\">//如果grunt命令带有--version参数，则打印版本信息</span></div><div class=\"line\">info.version();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.base &amp;&amp; !options.gruntfile) &#123;</div><div class=\"line\"><span class=\"comment\">//如果在grunt命令中指定了base文件夹</span></div><div class=\"line\"><span class=\"comment\">//那么所有操作都会基于这个文件路径进行</span></div><div class=\"line\">basedir = path.resolve(options.base);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.gruntfile) &#123;</div><div class=\"line\"><span class=\"comment\">//如果grunt命令中指定了gruntfile，那么就会执行这个文件中的任务，同时文件夹切换到对于目录下</span></div><div class=\"line\"><span class=\"comment\">//默认情况下grunt会在当前目录以及父目录中查找Gruntfile.js或者Gruntfile.coffee文件</span></div><div class=\"line\">basedir = path.resolve(path.dirname(options.gruntfile));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\"><span class=\"comment\">//得到grunt.js的地址</span></div><div class=\"line\">gruntpath = resolve(<span class=\"string\">'grunt'</span>, &#123;basedir: basedir&#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\"><span class=\"comment\">//如果在当前路径没找到，向父目录继续查找</span></div><div class=\"line\">gruntpath = findup(<span class=\"string\">'lib/grunt.js'</span>);</div><div class=\"line\"><span class=\"comment\">// No grunt install found!</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!gruntpath) &#123;</div><div class=\"line\">  <span class=\"comment\">//无法找到目录</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (options.version) &#123;</div><div class=\"line\">    <span class=\"comment\">//如果查询版本信息，由于找不到grunt所以直接退出</span></div><div class=\"line\">    process.exit();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (options.help) &#123;</div><div class=\"line\">    <span class=\"comment\">//显示帮助信息</span></div><div class=\"line\">    info.help();</div><div class=\"line\">  &#125;</div><div class=\"line\">  info.fatal(<span class=\"string\">'Unable to find local grunt.'</span>, <span class=\"number\">99</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用grunt执行任务，精彩从这里开始</span></div><div class=\"line\"><span class=\"built_in\">require</span>(gruntpath).cli();</div></pre></td></tr></table></figure>\n<p>整个过程比较简单，真正有意思的工作在grunt.js中，后续我会跟大家分享这方面的内容。</p>\n","excerpt":"<p>由于将来工作需要最近学习了Grunt，至于Grunt是什么大家百度下就好了，我就不多说了。对于它内部的实现比较感兴趣，所以看了看源码。今天先来说说grunt命令行工具grunt-cli的实现。<br>","more":"<br>grunt-cli是建立在grunt基础上的命令行工具，通过它可以很方便的使用grunt进行一些自动化任务。grunt-cli的处理过程主要分为下面几步：</p>\n<ol>\n<li>加载必须的模块，这其中包括第三方模块和grunt-cli内部的模块</li>\n<li>获取命令行参数执行相应的操作</li>\n<li>查找grunt.js文件并执行任务</li>\n</ol>\n<p>下面的grunt-cli的主要代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">process.title = <span class=\"string\">'grunt'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载文件查找模块,findup用于向上查找</span></div><div class=\"line\"><span class=\"keyword\">var</span> findup = <span class=\"built_in\">require</span>(<span class=\"string\">'findup-sync'</span>);</div><div class=\"line\"><span class=\"comment\">//加载路径解析模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> resolve = <span class=\"built_in\">require</span>(<span class=\"string\">'resolve'</span>).sync;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载grunt-cli内部的cli模块</span></div><div class=\"line\"><span class=\"comment\">//cli模块利用nopt第三方库来获取grunt命令中的参数值</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/cli'</span>).options;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载grunt-cli内部的completion模块</span></div><div class=\"line\"><span class=\"comment\">//completion模块用来打印自动补全的脚本</span></div><div class=\"line\"><span class=\"comment\">//这样就可以通过eval \"$(grunt --completion=bash)\"来执行脚本支持自动补全</span></div><div class=\"line\"><span class=\"comment\">//completion.js内部就是通过参数查找文件最后输出</span></div><div class=\"line\"><span class=\"keyword\">var</span> completion = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/completion'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载grunt-cli内部的info模块</span></div><div class=\"line\"><span class=\"comment\">//用来输出版本信息以及帮助信息的模块</span></div><div class=\"line\"><span class=\"comment\">//info.js内部主要就是几个输出grunt信息的方法</span></div><div class=\"line\"><span class=\"keyword\">var</span> info = <span class=\"built_in\">require</span>(<span class=\"string\">'../lib/info'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//加载node自带的路径解析模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取当前路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> basedir = process.cwd();</div><div class=\"line\"><span class=\"comment\">//grunt.js文件的路径</span></div><div class=\"line\"><span class=\"keyword\">var</span> gruntpath;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//判断命令行参数进行相应操作</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'completion'</span> <span class=\"keyword\">in</span> options) &#123;</div><div class=\"line\"><span class=\"comment\">//如果grunt命令带有--completion参数，则打印相应的自动补全脚本</span></div><div class=\"line\"><span class=\"comment\">//grunt --completion=bash这个命令基本上只会在设置自动补全的使用</span></div><div class=\"line\"><span class=\"comment\">//在自动化工作中并不会用到</span></div><div class=\"line\">completion.print(options.completion);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.version) &#123;</div><div class=\"line\"><span class=\"comment\">//如果grunt命令带有--version参数，则打印版本信息</span></div><div class=\"line\">info.version();</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.base &amp;&amp; !options.gruntfile) &#123;</div><div class=\"line\"><span class=\"comment\">//如果在grunt命令中指定了base文件夹</span></div><div class=\"line\"><span class=\"comment\">//那么所有操作都会基于这个文件路径进行</span></div><div class=\"line\">basedir = path.resolve(options.base);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.gruntfile) &#123;</div><div class=\"line\"><span class=\"comment\">//如果grunt命令中指定了gruntfile，那么就会执行这个文件中的任务，同时文件夹切换到对于目录下</span></div><div class=\"line\"><span class=\"comment\">//默认情况下grunt会在当前目录以及父目录中查找Gruntfile.js或者Gruntfile.coffee文件</span></div><div class=\"line\">basedir = path.resolve(path.dirname(options.gruntfile));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\"><span class=\"comment\">//得到grunt.js的地址</span></div><div class=\"line\">gruntpath = resolve(<span class=\"string\">'grunt'</span>, &#123;basedir: basedir&#125;);</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (ex) &#123;</div><div class=\"line\"><span class=\"comment\">//如果在当前路径没找到，向父目录继续查找</span></div><div class=\"line\">gruntpath = findup(<span class=\"string\">'lib/grunt.js'</span>);</div><div class=\"line\"><span class=\"comment\">// No grunt install found!</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!gruntpath) &#123;</div><div class=\"line\">  <span class=\"comment\">//无法找到目录</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (options.version) &#123;</div><div class=\"line\">    <span class=\"comment\">//如果查询版本信息，由于找不到grunt所以直接退出</span></div><div class=\"line\">    process.exit();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (options.help) &#123;</div><div class=\"line\">    <span class=\"comment\">//显示帮助信息</span></div><div class=\"line\">    info.help();</div><div class=\"line\">  &#125;</div><div class=\"line\">  info.fatal(<span class=\"string\">'Unable to find local grunt.'</span>, <span class=\"number\">99</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用grunt执行任务，精彩从这里开始</span></div><div class=\"line\"><span class=\"built_in\">require</span>(gruntpath).cli();</div></pre></td></tr></table></figure>\n<p>整个过程比较简单，真正有意思的工作在grunt.js中，后续我会跟大家分享这方面的内容。</p>"},{"title":"前端优化-Javascript篇(4.DOM优化)","date":"2014-06-16T06:44:11.000Z","_content":"上篇我介绍了Javascript标识符查找方面的优化，可以看出在这方面的优化给性能带来的提升并不明显，甚至可以说基本没有影响。但是，我今天要分享的是前端Javascript优化的一个大头。众所周知，在浏览器端Javascript中DOM操作相比普通Javascript代码来说是比较耗时的，所以在DOM优化上下功夫可以收到相当可观的性能优化。下面我将分享几个DOM方面的性能优化策略。\n<!-- more -->\n## 耗时的DOM操作\n浏览器中的Javascript可以分为两个部分：ECMAScript和DOM API。而相比原生的ECMAScript来说，DOM API会耗时很多。我们可以把这两部分想象成两个通过桥梁连接的小岛，在ECMAScript小岛上进行的操作运行速度比在DOM小岛上面的操作要快很多，每次在进行DOM操作的时候你都需要从ECMAScript这个小岛通过这个桥梁到达DOM小岛上然后在上面进行耗时的操作。所以大量的DOM操作就会降低性能。\n大家先看看下面这个例子:\n```javascript\n//优化前\nvar start = new Date().getTime() ;\nfor(var i = 0 ; i < length ; i ++){\n    document.getElementById(\"test\").innerHTML += \"a\" ;\n}\nconsole.log(\"Before:\" + (new Date().getTime() - start)) ;\n//优化后\nstart = new Date().getTime() ;\nvar content = \"\" ;\nfor(var i = 0 ; i < length ; i ++){\n    content += \"a\" ;\n}\ndocument.getElementById(\"test\").innerHTML += content ;\nconsole.log(\"After:\" + (new Date().getTime() - start)) ;\n```\n从运行结果来看，可以说差距那是相当明显啊：\n\n![请输入图片描述][1]\n\n优化前的代码每一次循环都进行了DOM操作，而优化之后，只在最后一步进行了DOM操作，这就是DOM优化的力量啊。所以，我们应该在操作的时候尽量避免对DOM的操作，能少操作DOM就少操作。按照上面的比喻就好比是，我们通过桥梁从ECMAScript小岛到达DOM小岛，然后找出需要进行操作的元素，把它再带回到ECMAScript小岛进行操作，通过这个方式，可以加快操作的速度，我们应该尽可能多的把元素带回到ECMAScript小岛进行操作。\n## innerHTML还是createElement\n在页面上动态添加结点一般有两个方法:innerHTML和createElement方法。这两个方法在性能上也有一点差别，具体差别在哪儿呢？上代码:\n```javascript\nvar start = new Date().getTime() ;\n\nvar content = \"<div>\" ;\nfor(var i = 0 ; i < 1000 ; i ++){\n    content += \"<div></div>\" ;\n}\ncontent += \"</div>\" ;\ndocument.getElementById(\"test\").innerHTML += content ;\n\nconsole.log(\"innerHTML:\" + (new Date().getTime() - start)) ;\n\ndocument.getElementById(\"test\").innerHTML = \"\" ;\n\nstart = new Date().getTime() ;\n//为了避免直接往test节点上面添加节点引起的页面重画，所以使用一个div节点来存储添加的节点，最后把div添加到页面中\nvar div = document.createElement(\"div\") ;\nfor(var i = 0 ; i < 1000 ; i ++){\n    div.appendChild(document.createElement(\"div\")) ;\n}\ndocument.getElementById(\"test\").appendChild(div) ;\n\nconsole.log(\"createElement:\" + (new Date().getTime() - start)) ;\n```\n这段代码在不同浏览器上的运行结果是不一样的：\n\n![请输入图片描述][2]\n\n在Chrome上createElement比innerHTML快，而在Firefoxhe和IE上结果则相反，从结果上看似乎是innerHTML以2:1赢了，可是我还是建议大家使用createElement，我把上面的代码改成下面这样：\n```javascript\nvar start = new Date().getTime() ;\nvar test = document.getElementById(\"test\") ;\n\nfor(var i = 0 ; i < 1000 ; i ++){\n    test.innerHTML += \"<div></div>\" ;\n}\n\nconsole.log(\"innerHTML:\" + (new Date().getTime() - start)) ;\ndocument.getElementById(\"test\").innerHTML = \"\" ;\n\nstart = new Date().getTime() ;\n\nfor(var i = 0 ; i < 1000 ; i ++){\n    test.appendChild(document.createElement(\"div\")) ;\n}\n\nconsole.log(\"createElement:\" + (new Date().getTime() - start)) ;\n```\n上面这段代码的运行结果\n\n![请输入图片描述][3]\n\n可以看出来innerHTML和createElement差很多。为了测试我用了比较大的数据1000，在实际开发中一般不会出现这种情况，所以性能上的差异也就不会那么明显，但是除了考虑性能问题以外，我们还应该考虑代码的可读性以及可维护下方面的问题，而考虑到这些的话，我个人还是比较推荐使用createElement，如果大家有什么别的看法，欢迎一起讨论。\n## HTMLCollection\nHTMLCollection是若干个DOM节点的集合，它具有数组的一些特性，比如length属性、通过下标访问，但是它并不是数组，它没有push和slice方法。在DOM操作中我们经常会用到HTMLCollection，下面的方法都会返回HTMLCollection:      \n\n+ getElementsByName\n+ getElementsByTagName\n+ getElementsByClassName\n+ document.forms\n+ document.images\n+ document.links\n\n还有一些别的方法和属性会返回HTMLCollection，在这里就不一一列举了。如何处理它们也是影响性能的一个方面。优化策略跟上面的大同小异，就是用局部变量缓存集合以及集合的长度，我就不进行实际测试了。HTMLCollection还有一个很重要的特性就是它是根据页面的情况动态更新的，如果你更新的页面那么它的内容也会发生变化。比如下面这段代码：\n```javascript\nvar divs = document.getElementsByTagName(\"div\") ;\nfor(var i = 0 ; i < divs.length ; i ++){\n    document.body.appendChild(document.createElement(\"div\")) ;\n}\n```\n这段代码的原意是向body中添加多一倍的div节点，但是真正的运行会导致死循环，这就是因为divs是动态更新的，每次向body中添加div节点都会使length属性发生变化也就是加1，所以这个循环会一直执行下去，在开发的时候应该注意这个问题。一个理想的办法就是缓存divs的长度，这样就不会引起死循环了。\n## 节点筛选\n如果需要得到某个节点的所以孩子节点，我们可能会用到childNodes属性；得到第一个孩子，我们可能会用到firstChild；得到下一个兄弟节点，我们可能会用到nextSibling。但是这些属性都存在一些问题就是它们会把一些空格和空行也当作孩子节点返回给我们，而这些经常不是我们所想要的，如果使用这些属性那么我们就需要对它们进行筛选，这样势必会影响效率。所以我们应该用别的属性来替代这些，看下表:\n\n![请输入图片描述][4]\n\n表格左边的是推荐的属性，它们只会返回Element节点。不过并不是所有浏览器都支持，所以在使用之前我们需要先判断一下。\n## 使用选择器方法替代传统方法\n现代浏览器给我们提供了另外一种方法在获取我们需要的节点，这个方法是querySelectorAll和querySelector。它们通过CSS选择器作为参数，返回满足条件的节点。querySelectorAll方法返回满足条件的所有节点而querySelector返回满足条件的第一个节点。使用这两个方法来替代我们以前经常用的getElementById，getElementsByTagName等方法也是提高性能的一个途径。不过还是老问题，并不是所有浏览器都支持这两个方法，所有还是先做个判断吧。\n## Reflow 和 Repaint\n首先，Repaint是指页面上的元素的外观发生了改变但是不影响布局的情况下引起的浏览器重新绘画元素外观的行为，比如修改color，background-color等属性。Reflow是指页面上的元素的大小布局发生的变化从而引起浏览器对页面其他元素位置大小进行重新计算并且布局的行为。Reflow所导致的性能消耗远比Repaint大，所以我们下面重点讨论Reflow情况下的优化策略。\n在讨论Reflow之前先简单的看一下浏览器加载页面的过程。如下图：\n\n![请输入图片描述][5]\n\n浏览器在收到HTML文档之后对其进行解析，解析过程分为两个部分DOM文档的解析和CSS样式的解析。解析DOM文档生成一个DOM树，DOM树和解析出来的CSS样式组合生成一个渲染树，最后浏览器根据这个渲染树进行页面的排版和绘画。而最后这一步就是会涉及到Reflow和Repaint。\n以下这几个行为会引起页面的Reflow或Repaint：\n1. 添加，删除，更新DOM节点\n2. 隐藏/显示DOM节点(display:none或visibility:hidden)\n3. 修改样式\n4. 改变窗口大小，滚动页面\n\n其实浏览器在这方面已经帮我们做了一些优化了，对于每个触发Reflow的行为浏览器并不会马上就触发，而是把它们保存在一个队列中，当到达一定数量的时候再进行批量的Reflow，这样就不需要每次都进行Reflow。但是，我们的一些行为会影响到浏览器的优化，使得Reflow马上触发。当我们请求下面这些属性的时候发生这种现象：\n1. offsetTop, offsetLeft, offsetWidth, offsetHeight\n2. scrollTop/Left/Width/Height\n3. clientTop/Left/Width/Height\n4. getComputedStyle(), or currentStyle(IE)\n\n每当我们请求这些属性时，浏览器为了返回实时的情况就必须马上进行Reflow以计算出我们所需要的属性。所以我们应该尽量少的使用这些属性。\n从上面可以发现，基于所有DOM操作都会引起Reflow或Repaint，所以尽可能避免页面的Reflow或Repaint可以很好的提高DOM性能。那么该怎么做才能最好的避免或最小化Reflow呢？下面有几个有用的建议：\n1.不要逐一修改样式，而改为通过修改className来批量改变样式，如果样式需要动态计算，那么也要使用cssText属性来批量添加样式。例如：\n\n```javascript\n// 错误的做法\nvar left = 10,\n    top = 10;\nel.style.left = left + \"px\";\nel.style.top  = top  + \"px\";\n\n// 使用修改className来进行优化\nel.className += \" theclassname\";\n\n// 如果需要动态修改css，那么就使用cssText\nel.style.cssText += \"; left: \" + left + \"px; top: \" + top + \"px;\";\n```\n\n2.批量处理DOM操作并且让元素脱离文档流，等操作结束后再放回文档流中。有以下几种办法：\n\n+ 使用display：none隐藏element，然后进行操作，最后再显示出来\n+ 使用documentFragment ，把新增的节点放在documentFragment中，最后再把documentFragment放到DOM中，因为把documentFragment放到DOM中，它只会把它的孩子节点放到DOM中，就好像documentFragment不存在。\n+ 通过cloneNode复制节点，然后离线进行操作，最后再替换DOM中的节点。\n\n3.尽量少的访问会引起马上Reflow的属性，使用局部变量来缓存这些属性，比如：\n```javascript\nvar left = el.offsetLeft,\n    top  = el.offsetTop\n    esty = el.style;\nfor(big; loop; here) {\n    left += 10;\n    top  += 10;\n    esty.left = left + \"px\";\n    esty.top  = top  + \"px\";\n}\n```\n4.对于需要动画的元素，尽量让它脱离文档流，这样就能尽量引起尽量小的Reflow\n\n5.尽量少使用table布局\n\n## 事件代理\n事件代理我想这个大家应该都知道了。越多的事件绑定页面就加载越慢并且占用更多内存，同时绑定太多事件也会使得代码的可读性降低。使用事件代理的方法原理就是把事件绑定到元素的父节点，然后在处理函数中判断target，根据不同的target执行不同的逻辑。这样能很大程度的减少绑定是事件数量并且提高代码的简洁度。\n\n## 总结\n看了这么多其实总结起来还是比较简单的，在进行DOM操作的时候尽量把DOM操作转换为本地的Javascript操作，使用时先缓存一些DOM元素或者属性，缓存长度。在需要进行大量DOM操作的时候，先让元素脱离文档，等操作结束再把元素放回文档中。优化策略还是需要在实践中不断尝试，不断摸索，找出最优的解决方案。\n\n最近准备毕设没什么时间更新博客，后面尽量安排好时间做到一周一篇，前端优化Javascript篇未完待续。。。\n\n  [1]: http://segmentfault.com/img/bVcATZ\n  [2]: http://segmentfault.com/img/bVcAT1\n  [3]: http://segmentfault.com/img/bVcAT7\n  [4]: http://segmentfault.com/img/bVcAT8\n  [5]: http://segmentfault.com/img/bVcAT9\n","source":"_posts/frontend-optimization-javascript-dom.md","raw":"title: 前端优化-Javascript篇(4.DOM优化)\ndate: 2014-06-16 14:44:11\ntags: ['javascript', '前端优化']\n---\n上篇我介绍了Javascript标识符查找方面的优化，可以看出在这方面的优化给性能带来的提升并不明显，甚至可以说基本没有影响。但是，我今天要分享的是前端Javascript优化的一个大头。众所周知，在浏览器端Javascript中DOM操作相比普通Javascript代码来说是比较耗时的，所以在DOM优化上下功夫可以收到相当可观的性能优化。下面我将分享几个DOM方面的性能优化策略。\n<!-- more -->\n## 耗时的DOM操作\n浏览器中的Javascript可以分为两个部分：ECMAScript和DOM API。而相比原生的ECMAScript来说，DOM API会耗时很多。我们可以把这两部分想象成两个通过桥梁连接的小岛，在ECMAScript小岛上进行的操作运行速度比在DOM小岛上面的操作要快很多，每次在进行DOM操作的时候你都需要从ECMAScript这个小岛通过这个桥梁到达DOM小岛上然后在上面进行耗时的操作。所以大量的DOM操作就会降低性能。\n大家先看看下面这个例子:\n```javascript\n//优化前\nvar start = new Date().getTime() ;\nfor(var i = 0 ; i < length ; i ++){\n    document.getElementById(\"test\").innerHTML += \"a\" ;\n}\nconsole.log(\"Before:\" + (new Date().getTime() - start)) ;\n//优化后\nstart = new Date().getTime() ;\nvar content = \"\" ;\nfor(var i = 0 ; i < length ; i ++){\n    content += \"a\" ;\n}\ndocument.getElementById(\"test\").innerHTML += content ;\nconsole.log(\"After:\" + (new Date().getTime() - start)) ;\n```\n从运行结果来看，可以说差距那是相当明显啊：\n\n![请输入图片描述][1]\n\n优化前的代码每一次循环都进行了DOM操作，而优化之后，只在最后一步进行了DOM操作，这就是DOM优化的力量啊。所以，我们应该在操作的时候尽量避免对DOM的操作，能少操作DOM就少操作。按照上面的比喻就好比是，我们通过桥梁从ECMAScript小岛到达DOM小岛，然后找出需要进行操作的元素，把它再带回到ECMAScript小岛进行操作，通过这个方式，可以加快操作的速度，我们应该尽可能多的把元素带回到ECMAScript小岛进行操作。\n## innerHTML还是createElement\n在页面上动态添加结点一般有两个方法:innerHTML和createElement方法。这两个方法在性能上也有一点差别，具体差别在哪儿呢？上代码:\n```javascript\nvar start = new Date().getTime() ;\n\nvar content = \"<div>\" ;\nfor(var i = 0 ; i < 1000 ; i ++){\n    content += \"<div></div>\" ;\n}\ncontent += \"</div>\" ;\ndocument.getElementById(\"test\").innerHTML += content ;\n\nconsole.log(\"innerHTML:\" + (new Date().getTime() - start)) ;\n\ndocument.getElementById(\"test\").innerHTML = \"\" ;\n\nstart = new Date().getTime() ;\n//为了避免直接往test节点上面添加节点引起的页面重画，所以使用一个div节点来存储添加的节点，最后把div添加到页面中\nvar div = document.createElement(\"div\") ;\nfor(var i = 0 ; i < 1000 ; i ++){\n    div.appendChild(document.createElement(\"div\")) ;\n}\ndocument.getElementById(\"test\").appendChild(div) ;\n\nconsole.log(\"createElement:\" + (new Date().getTime() - start)) ;\n```\n这段代码在不同浏览器上的运行结果是不一样的：\n\n![请输入图片描述][2]\n\n在Chrome上createElement比innerHTML快，而在Firefoxhe和IE上结果则相反，从结果上看似乎是innerHTML以2:1赢了，可是我还是建议大家使用createElement，我把上面的代码改成下面这样：\n```javascript\nvar start = new Date().getTime() ;\nvar test = document.getElementById(\"test\") ;\n\nfor(var i = 0 ; i < 1000 ; i ++){\n    test.innerHTML += \"<div></div>\" ;\n}\n\nconsole.log(\"innerHTML:\" + (new Date().getTime() - start)) ;\ndocument.getElementById(\"test\").innerHTML = \"\" ;\n\nstart = new Date().getTime() ;\n\nfor(var i = 0 ; i < 1000 ; i ++){\n    test.appendChild(document.createElement(\"div\")) ;\n}\n\nconsole.log(\"createElement:\" + (new Date().getTime() - start)) ;\n```\n上面这段代码的运行结果\n\n![请输入图片描述][3]\n\n可以看出来innerHTML和createElement差很多。为了测试我用了比较大的数据1000，在实际开发中一般不会出现这种情况，所以性能上的差异也就不会那么明显，但是除了考虑性能问题以外，我们还应该考虑代码的可读性以及可维护下方面的问题，而考虑到这些的话，我个人还是比较推荐使用createElement，如果大家有什么别的看法，欢迎一起讨论。\n## HTMLCollection\nHTMLCollection是若干个DOM节点的集合，它具有数组的一些特性，比如length属性、通过下标访问，但是它并不是数组，它没有push和slice方法。在DOM操作中我们经常会用到HTMLCollection，下面的方法都会返回HTMLCollection:      \n\n+ getElementsByName\n+ getElementsByTagName\n+ getElementsByClassName\n+ document.forms\n+ document.images\n+ document.links\n\n还有一些别的方法和属性会返回HTMLCollection，在这里就不一一列举了。如何处理它们也是影响性能的一个方面。优化策略跟上面的大同小异，就是用局部变量缓存集合以及集合的长度，我就不进行实际测试了。HTMLCollection还有一个很重要的特性就是它是根据页面的情况动态更新的，如果你更新的页面那么它的内容也会发生变化。比如下面这段代码：\n```javascript\nvar divs = document.getElementsByTagName(\"div\") ;\nfor(var i = 0 ; i < divs.length ; i ++){\n    document.body.appendChild(document.createElement(\"div\")) ;\n}\n```\n这段代码的原意是向body中添加多一倍的div节点，但是真正的运行会导致死循环，这就是因为divs是动态更新的，每次向body中添加div节点都会使length属性发生变化也就是加1，所以这个循环会一直执行下去，在开发的时候应该注意这个问题。一个理想的办法就是缓存divs的长度，这样就不会引起死循环了。\n## 节点筛选\n如果需要得到某个节点的所以孩子节点，我们可能会用到childNodes属性；得到第一个孩子，我们可能会用到firstChild；得到下一个兄弟节点，我们可能会用到nextSibling。但是这些属性都存在一些问题就是它们会把一些空格和空行也当作孩子节点返回给我们，而这些经常不是我们所想要的，如果使用这些属性那么我们就需要对它们进行筛选，这样势必会影响效率。所以我们应该用别的属性来替代这些，看下表:\n\n![请输入图片描述][4]\n\n表格左边的是推荐的属性，它们只会返回Element节点。不过并不是所有浏览器都支持，所以在使用之前我们需要先判断一下。\n## 使用选择器方法替代传统方法\n现代浏览器给我们提供了另外一种方法在获取我们需要的节点，这个方法是querySelectorAll和querySelector。它们通过CSS选择器作为参数，返回满足条件的节点。querySelectorAll方法返回满足条件的所有节点而querySelector返回满足条件的第一个节点。使用这两个方法来替代我们以前经常用的getElementById，getElementsByTagName等方法也是提高性能的一个途径。不过还是老问题，并不是所有浏览器都支持这两个方法，所有还是先做个判断吧。\n## Reflow 和 Repaint\n首先，Repaint是指页面上的元素的外观发生了改变但是不影响布局的情况下引起的浏览器重新绘画元素外观的行为，比如修改color，background-color等属性。Reflow是指页面上的元素的大小布局发生的变化从而引起浏览器对页面其他元素位置大小进行重新计算并且布局的行为。Reflow所导致的性能消耗远比Repaint大，所以我们下面重点讨论Reflow情况下的优化策略。\n在讨论Reflow之前先简单的看一下浏览器加载页面的过程。如下图：\n\n![请输入图片描述][5]\n\n浏览器在收到HTML文档之后对其进行解析，解析过程分为两个部分DOM文档的解析和CSS样式的解析。解析DOM文档生成一个DOM树，DOM树和解析出来的CSS样式组合生成一个渲染树，最后浏览器根据这个渲染树进行页面的排版和绘画。而最后这一步就是会涉及到Reflow和Repaint。\n以下这几个行为会引起页面的Reflow或Repaint：\n1. 添加，删除，更新DOM节点\n2. 隐藏/显示DOM节点(display:none或visibility:hidden)\n3. 修改样式\n4. 改变窗口大小，滚动页面\n\n其实浏览器在这方面已经帮我们做了一些优化了，对于每个触发Reflow的行为浏览器并不会马上就触发，而是把它们保存在一个队列中，当到达一定数量的时候再进行批量的Reflow，这样就不需要每次都进行Reflow。但是，我们的一些行为会影响到浏览器的优化，使得Reflow马上触发。当我们请求下面这些属性的时候发生这种现象：\n1. offsetTop, offsetLeft, offsetWidth, offsetHeight\n2. scrollTop/Left/Width/Height\n3. clientTop/Left/Width/Height\n4. getComputedStyle(), or currentStyle(IE)\n\n每当我们请求这些属性时，浏览器为了返回实时的情况就必须马上进行Reflow以计算出我们所需要的属性。所以我们应该尽量少的使用这些属性。\n从上面可以发现，基于所有DOM操作都会引起Reflow或Repaint，所以尽可能避免页面的Reflow或Repaint可以很好的提高DOM性能。那么该怎么做才能最好的避免或最小化Reflow呢？下面有几个有用的建议：\n1.不要逐一修改样式，而改为通过修改className来批量改变样式，如果样式需要动态计算，那么也要使用cssText属性来批量添加样式。例如：\n\n```javascript\n// 错误的做法\nvar left = 10,\n    top = 10;\nel.style.left = left + \"px\";\nel.style.top  = top  + \"px\";\n\n// 使用修改className来进行优化\nel.className += \" theclassname\";\n\n// 如果需要动态修改css，那么就使用cssText\nel.style.cssText += \"; left: \" + left + \"px; top: \" + top + \"px;\";\n```\n\n2.批量处理DOM操作并且让元素脱离文档流，等操作结束后再放回文档流中。有以下几种办法：\n\n+ 使用display：none隐藏element，然后进行操作，最后再显示出来\n+ 使用documentFragment ，把新增的节点放在documentFragment中，最后再把documentFragment放到DOM中，因为把documentFragment放到DOM中，它只会把它的孩子节点放到DOM中，就好像documentFragment不存在。\n+ 通过cloneNode复制节点，然后离线进行操作，最后再替换DOM中的节点。\n\n3.尽量少的访问会引起马上Reflow的属性，使用局部变量来缓存这些属性，比如：\n```javascript\nvar left = el.offsetLeft,\n    top  = el.offsetTop\n    esty = el.style;\nfor(big; loop; here) {\n    left += 10;\n    top  += 10;\n    esty.left = left + \"px\";\n    esty.top  = top  + \"px\";\n}\n```\n4.对于需要动画的元素，尽量让它脱离文档流，这样就能尽量引起尽量小的Reflow\n\n5.尽量少使用table布局\n\n## 事件代理\n事件代理我想这个大家应该都知道了。越多的事件绑定页面就加载越慢并且占用更多内存，同时绑定太多事件也会使得代码的可读性降低。使用事件代理的方法原理就是把事件绑定到元素的父节点，然后在处理函数中判断target，根据不同的target执行不同的逻辑。这样能很大程度的减少绑定是事件数量并且提高代码的简洁度。\n\n## 总结\n看了这么多其实总结起来还是比较简单的，在进行DOM操作的时候尽量把DOM操作转换为本地的Javascript操作，使用时先缓存一些DOM元素或者属性，缓存长度。在需要进行大量DOM操作的时候，先让元素脱离文档，等操作结束再把元素放回文档中。优化策略还是需要在实践中不断尝试，不断摸索，找出最优的解决方案。\n\n最近准备毕设没什么时间更新博客，后面尽量安排好时间做到一周一篇，前端优化Javascript篇未完待续。。。\n\n  [1]: http://segmentfault.com/img/bVcATZ\n  [2]: http://segmentfault.com/img/bVcAT1\n  [3]: http://segmentfault.com/img/bVcAT7\n  [4]: http://segmentfault.com/img/bVcAT8\n  [5]: http://segmentfault.com/img/bVcAT9\n","slug":"frontend-optimization-javascript-dom","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvkd000b0povod3f1yi3","content":"<p>上篇我介绍了Javascript标识符查找方面的优化，可以看出在这方面的优化给性能带来的提升并不明显，甚至可以说基本没有影响。但是，我今天要分享的是前端Javascript优化的一个大头。众所周知，在浏览器端Javascript中DOM操作相比普通Javascript代码来说是比较耗时的，所以在DOM优化上下功夫可以收到相当可观的性能优化。下面我将分享几个DOM方面的性能优化策略。<br><a id=\"more\"></a></p>\n<h2 id=\"耗时的DOM操作\"><a href=\"#耗时的DOM操作\" class=\"headerlink\" title=\"耗时的DOM操作\"></a>耗时的DOM操作</h2><p>浏览器中的Javascript可以分为两个部分：ECMAScript和DOM API。而相比原生的ECMAScript来说，DOM API会耗时很多。我们可以把这两部分想象成两个通过桥梁连接的小岛，在ECMAScript小岛上进行的操作运行速度比在DOM小岛上面的操作要快很多，每次在进行DOM操作的时候你都需要从ECMAScript这个小岛通过这个桥梁到达DOM小岛上然后在上面进行耗时的操作。所以大量的DOM操作就会降低性能。<br>大家先看看下面这个例子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//优化前</span></div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML += <span class=\"string\">\"a\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Before:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div><div class=\"line\"><span class=\"comment\">//优化后</span></div><div class=\"line\">start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"\"</span> ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;</div><div class=\"line\">    content += <span class=\"string\">\"a\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML += content ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"After:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div></pre></td></tr></table></figure></p>\n<p>从运行结果来看，可以说差距那是相当明显啊：</p>\n<p><img src=\"http://segmentfault.com/img/bVcATZ\" alt=\"请输入图片描述\"></p>\n<p>优化前的代码每一次循环都进行了DOM操作，而优化之后，只在最后一步进行了DOM操作，这就是DOM优化的力量啊。所以，我们应该在操作的时候尽量避免对DOM的操作，能少操作DOM就少操作。按照上面的比喻就好比是，我们通过桥梁从ECMAScript小岛到达DOM小岛，然后找出需要进行操作的元素，把它再带回到ECMAScript小岛进行操作，通过这个方式，可以加快操作的速度，我们应该尽可能多的把元素带回到ECMAScript小岛进行操作。</p>\n<h2 id=\"innerHTML还是createElement\"><a href=\"#innerHTML还是createElement\" class=\"headerlink\" title=\"innerHTML还是createElement\"></a>innerHTML还是createElement</h2><p>在页面上动态添加结点一般有两个方法:innerHTML和createElement方法。这两个方法在性能上也有一点差别，具体差别在哪儿呢？上代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"&lt;div&gt;\"</span> ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    content += <span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\">content += <span class=\"string\">\"&lt;/div&gt;\"</span> ;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML += content ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"innerHTML:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML = <span class=\"string\">\"\"</span> ;</div><div class=\"line\"></div><div class=\"line\">start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"comment\">//为了避免直接往test节点上面添加节点引起的页面重画，所以使用一个div节点来存储添加的节点，最后把div添加到页面中</span></div><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>) ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    div.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)) ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).appendChild(div) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"createElement:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div></pre></td></tr></table></figure></p>\n<p>这段代码在不同浏览器上的运行结果是不一样的：</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT1\" alt=\"请输入图片描述\"></p>\n<p>在Chrome上createElement比innerHTML快，而在Firefoxhe和IE上结果则相反，从结果上看似乎是innerHTML以2:1赢了，可是我还是建议大家使用createElement，我把上面的代码改成下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    test.innerHTML += <span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"innerHTML:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML = <span class=\"string\">\"\"</span> ;</div><div class=\"line\"></div><div class=\"line\">start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    test.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"createElement:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div></pre></td></tr></table></figure></p>\n<p>上面这段代码的运行结果</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT7\" alt=\"请输入图片描述\"></p>\n<p>可以看出来innerHTML和createElement差很多。为了测试我用了比较大的数据1000，在实际开发中一般不会出现这种情况，所以性能上的差异也就不会那么明显，但是除了考虑性能问题以外，我们还应该考虑代码的可读性以及可维护下方面的问题，而考虑到这些的话，我个人还是比较推荐使用createElement，如果大家有什么别的看法，欢迎一起讨论。</p>\n<h2 id=\"HTMLCollection\"><a href=\"#HTMLCollection\" class=\"headerlink\" title=\"HTMLCollection\"></a>HTMLCollection</h2><p>HTMLCollection是若干个DOM节点的集合，它具有数组的一些特性，比如length属性、通过下标访问，但是它并不是数组，它没有push和slice方法。在DOM操作中我们经常会用到HTMLCollection，下面的方法都会返回HTMLCollection:      </p>\n<ul>\n<li>getElementsByName</li>\n<li>getElementsByTagName</li>\n<li>getElementsByClassName</li>\n<li>document.forms</li>\n<li>document.images</li>\n<li>document.links</li>\n</ul>\n<p>还有一些别的方法和属性会返回HTMLCollection，在这里就不一一列举了。如何处理它们也是影响性能的一个方面。优化策略跟上面的大同小异，就是用局部变量缓存集合以及集合的长度，我就不进行实际测试了。HTMLCollection还有一个很重要的特性就是它是根据页面的情况动态更新的，如果你更新的页面那么它的内容也会发生变化。比如下面这段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>) ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; divs.length ; i ++)&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码的原意是向body中添加多一倍的div节点，但是真正的运行会导致死循环，这就是因为divs是动态更新的，每次向body中添加div节点都会使length属性发生变化也就是加1，所以这个循环会一直执行下去，在开发的时候应该注意这个问题。一个理想的办法就是缓存divs的长度，这样就不会引起死循环了。</p>\n<h2 id=\"节点筛选\"><a href=\"#节点筛选\" class=\"headerlink\" title=\"节点筛选\"></a>节点筛选</h2><p>如果需要得到某个节点的所以孩子节点，我们可能会用到childNodes属性；得到第一个孩子，我们可能会用到firstChild；得到下一个兄弟节点，我们可能会用到nextSibling。但是这些属性都存在一些问题就是它们会把一些空格和空行也当作孩子节点返回给我们，而这些经常不是我们所想要的，如果使用这些属性那么我们就需要对它们进行筛选，这样势必会影响效率。所以我们应该用别的属性来替代这些，看下表:</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT8\" alt=\"请输入图片描述\"></p>\n<p>表格左边的是推荐的属性，它们只会返回Element节点。不过并不是所有浏览器都支持，所以在使用之前我们需要先判断一下。</p>\n<h2 id=\"使用选择器方法替代传统方法\"><a href=\"#使用选择器方法替代传统方法\" class=\"headerlink\" title=\"使用选择器方法替代传统方法\"></a>使用选择器方法替代传统方法</h2><p>现代浏览器给我们提供了另外一种方法在获取我们需要的节点，这个方法是querySelectorAll和querySelector。它们通过CSS选择器作为参数，返回满足条件的节点。querySelectorAll方法返回满足条件的所有节点而querySelector返回满足条件的第一个节点。使用这两个方法来替代我们以前经常用的getElementById，getElementsByTagName等方法也是提高性能的一个途径。不过还是老问题，并不是所有浏览器都支持这两个方法，所有还是先做个判断吧。</p>\n<h2 id=\"Reflow-和-Repaint\"><a href=\"#Reflow-和-Repaint\" class=\"headerlink\" title=\"Reflow 和 Repaint\"></a>Reflow 和 Repaint</h2><p>首先，Repaint是指页面上的元素的外观发生了改变但是不影响布局的情况下引起的浏览器重新绘画元素外观的行为，比如修改color，background-color等属性。Reflow是指页面上的元素的大小布局发生的变化从而引起浏览器对页面其他元素位置大小进行重新计算并且布局的行为。Reflow所导致的性能消耗远比Repaint大，所以我们下面重点讨论Reflow情况下的优化策略。<br>在讨论Reflow之前先简单的看一下浏览器加载页面的过程。如下图：</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT9\" alt=\"请输入图片描述\"></p>\n<p>浏览器在收到HTML文档之后对其进行解析，解析过程分为两个部分DOM文档的解析和CSS样式的解析。解析DOM文档生成一个DOM树，DOM树和解析出来的CSS样式组合生成一个渲染树，最后浏览器根据这个渲染树进行页面的排版和绘画。而最后这一步就是会涉及到Reflow和Repaint。<br>以下这几个行为会引起页面的Reflow或Repaint：</p>\n<ol>\n<li>添加，删除，更新DOM节点</li>\n<li>隐藏/显示DOM节点(display:none或visibility:hidden)</li>\n<li>修改样式</li>\n<li>改变窗口大小，滚动页面</li>\n</ol>\n<p>其实浏览器在这方面已经帮我们做了一些优化了，对于每个触发Reflow的行为浏览器并不会马上就触发，而是把它们保存在一个队列中，当到达一定数量的时候再进行批量的Reflow，这样就不需要每次都进行Reflow。但是，我们的一些行为会影响到浏览器的优化，使得Reflow马上触发。当我们请求下面这些属性的时候发生这种现象：</p>\n<ol>\n<li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li>\n<li>scrollTop/Left/Width/Height</li>\n<li>clientTop/Left/Width/Height</li>\n<li>getComputedStyle(), or currentStyle(IE)</li>\n</ol>\n<p>每当我们请求这些属性时，浏览器为了返回实时的情况就必须马上进行Reflow以计算出我们所需要的属性。所以我们应该尽量少的使用这些属性。<br>从上面可以发现，基于所有DOM操作都会引起Reflow或Repaint，所以尽可能避免页面的Reflow或Repaint可以很好的提高DOM性能。那么该怎么做才能最好的避免或最小化Reflow呢？下面有几个有用的建议：<br>1.不要逐一修改样式，而改为通过修改className来批量改变样式，如果样式需要动态计算，那么也要使用cssText属性来批量添加样式。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误的做法</span></div><div class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">10</span>,</div><div class=\"line\">    top = <span class=\"number\">10</span>;</div><div class=\"line\">el.style.left = left + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">el.style.top  = top  + <span class=\"string\">\"px\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用修改className来进行优化</span></div><div class=\"line\">el.className += <span class=\"string\">\" theclassname\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果需要动态修改css，那么就使用cssText</span></div><div class=\"line\">el.style.cssText += <span class=\"string\">\"; left: \"</span> + left + <span class=\"string\">\"px; top: \"</span> + top + <span class=\"string\">\"px;\"</span>;</div></pre></td></tr></table></figure>\n<p>2.批量处理DOM操作并且让元素脱离文档流，等操作结束后再放回文档流中。有以下几种办法：</p>\n<ul>\n<li>使用display：none隐藏element，然后进行操作，最后再显示出来</li>\n<li>使用documentFragment ，把新增的节点放在documentFragment中，最后再把documentFragment放到DOM中，因为把documentFragment放到DOM中，它只会把它的孩子节点放到DOM中，就好像documentFragment不存在。</li>\n<li>通过cloneNode复制节点，然后离线进行操作，最后再替换DOM中的节点。</li>\n</ul>\n<p>3.尽量少的访问会引起马上Reflow的属性，使用局部变量来缓存这些属性，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> left = el.offsetLeft,</div><div class=\"line\">    top  = el.offsetTop</div><div class=\"line\">    esty = el.style;</div><div class=\"line\"><span class=\"keyword\">for</span>(big; loop; here) &#123;</div><div class=\"line\">    left += <span class=\"number\">10</span>;</div><div class=\"line\">    top  += <span class=\"number\">10</span>;</div><div class=\"line\">    esty.left = left + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">    esty.top  = top  + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.对于需要动画的元素，尽量让它脱离文档流，这样就能尽量引起尽量小的Reflow</p>\n<p>5.尽量少使用table布局</p>\n<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>事件代理我想这个大家应该都知道了。越多的事件绑定页面就加载越慢并且占用更多内存，同时绑定太多事件也会使得代码的可读性降低。使用事件代理的方法原理就是把事件绑定到元素的父节点，然后在处理函数中判断target，根据不同的target执行不同的逻辑。这样能很大程度的减少绑定是事件数量并且提高代码的简洁度。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>看了这么多其实总结起来还是比较简单的，在进行DOM操作的时候尽量把DOM操作转换为本地的Javascript操作，使用时先缓存一些DOM元素或者属性，缓存长度。在需要进行大量DOM操作的时候，先让元素脱离文档，等操作结束再把元素放回文档中。优化策略还是需要在实践中不断尝试，不断摸索，找出最优的解决方案。</p>\n<p>最近准备毕设没什么时间更新博客，后面尽量安排好时间做到一周一篇，前端优化Javascript篇未完待续。。。</p>\n","excerpt":"<p>上篇我介绍了Javascript标识符查找方面的优化，可以看出在这方面的优化给性能带来的提升并不明显，甚至可以说基本没有影响。但是，我今天要分享的是前端Javascript优化的一个大头。众所周知，在浏览器端Javascript中DOM操作相比普通Javascript代码来说是比较耗时的，所以在DOM优化上下功夫可以收到相当可观的性能优化。下面我将分享几个DOM方面的性能优化策略。<br>","more":"</p>\n<h2 id=\"耗时的DOM操作\"><a href=\"#耗时的DOM操作\" class=\"headerlink\" title=\"耗时的DOM操作\"></a>耗时的DOM操作</h2><p>浏览器中的Javascript可以分为两个部分：ECMAScript和DOM API。而相比原生的ECMAScript来说，DOM API会耗时很多。我们可以把这两部分想象成两个通过桥梁连接的小岛，在ECMAScript小岛上进行的操作运行速度比在DOM小岛上面的操作要快很多，每次在进行DOM操作的时候你都需要从ECMAScript这个小岛通过这个桥梁到达DOM小岛上然后在上面进行耗时的操作。所以大量的DOM操作就会降低性能。<br>大家先看看下面这个例子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//优化前</span></div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML += <span class=\"string\">\"a\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Before:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div><div class=\"line\"><span class=\"comment\">//优化后</span></div><div class=\"line\">start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"\"</span> ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;</div><div class=\"line\">    content += <span class=\"string\">\"a\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML += content ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"After:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div></pre></td></tr></table></figure></p>\n<p>从运行结果来看，可以说差距那是相当明显啊：</p>\n<p><img src=\"http://segmentfault.com/img/bVcATZ\" alt=\"请输入图片描述\"></p>\n<p>优化前的代码每一次循环都进行了DOM操作，而优化之后，只在最后一步进行了DOM操作，这就是DOM优化的力量啊。所以，我们应该在操作的时候尽量避免对DOM的操作，能少操作DOM就少操作。按照上面的比喻就好比是，我们通过桥梁从ECMAScript小岛到达DOM小岛，然后找出需要进行操作的元素，把它再带回到ECMAScript小岛进行操作，通过这个方式，可以加快操作的速度，我们应该尽可能多的把元素带回到ECMAScript小岛进行操作。</p>\n<h2 id=\"innerHTML还是createElement\"><a href=\"#innerHTML还是createElement\" class=\"headerlink\" title=\"innerHTML还是createElement\"></a>innerHTML还是createElement</h2><p>在页面上动态添加结点一般有两个方法:innerHTML和createElement方法。这两个方法在性能上也有一点差别，具体差别在哪儿呢？上代码:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"&lt;div&gt;\"</span> ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    content += <span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\">content += <span class=\"string\">\"&lt;/div&gt;\"</span> ;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML += content ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"innerHTML:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML = <span class=\"string\">\"\"</span> ;</div><div class=\"line\"></div><div class=\"line\">start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"comment\">//为了避免直接往test节点上面添加节点引起的页面重画，所以使用一个div节点来存储添加的节点，最后把div添加到页面中</span></div><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>) ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    div.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)) ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).appendChild(div) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"createElement:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div></pre></td></tr></table></figure></p>\n<p>这段代码在不同浏览器上的运行结果是不一样的：</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT1\" alt=\"请输入图片描述\"></p>\n<p>在Chrome上createElement比innerHTML快，而在Firefoxhe和IE上结果则相反，从结果上看似乎是innerHTML以2:1赢了，可是我还是建议大家使用createElement，我把上面的代码改成下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    test.innerHTML += <span class=\"string\">\"&lt;div&gt;&lt;/div&gt;\"</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"innerHTML:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"test\"</span>).innerHTML = <span class=\"string\">\"\"</span> ;</div><div class=\"line\"></div><div class=\"line\">start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">1000</span> ; i ++)&#123;</div><div class=\"line\">    test.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)) ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"createElement:\"</span> + (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start)) ;</div></pre></td></tr></table></figure></p>\n<p>上面这段代码的运行结果</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT7\" alt=\"请输入图片描述\"></p>\n<p>可以看出来innerHTML和createElement差很多。为了测试我用了比较大的数据1000，在实际开发中一般不会出现这种情况，所以性能上的差异也就不会那么明显，但是除了考虑性能问题以外，我们还应该考虑代码的可读性以及可维护下方面的问题，而考虑到这些的话，我个人还是比较推荐使用createElement，如果大家有什么别的看法，欢迎一起讨论。</p>\n<h2 id=\"HTMLCollection\"><a href=\"#HTMLCollection\" class=\"headerlink\" title=\"HTMLCollection\"></a>HTMLCollection</h2><p>HTMLCollection是若干个DOM节点的集合，它具有数组的一些特性，比如length属性、通过下标访问，但是它并不是数组，它没有push和slice方法。在DOM操作中我们经常会用到HTMLCollection，下面的方法都会返回HTMLCollection:      </p>\n<ul>\n<li>getElementsByName</li>\n<li>getElementsByTagName</li>\n<li>getElementsByClassName</li>\n<li>document.forms</li>\n<li>document.images</li>\n<li>document.links</li>\n</ul>\n<p>还有一些别的方法和属性会返回HTMLCollection，在这里就不一一列举了。如何处理它们也是影响性能的一个方面。优化策略跟上面的大同小异，就是用局部变量缓存集合以及集合的长度，我就不进行实际测试了。HTMLCollection还有一个很重要的特性就是它是根据页面的情况动态更新的，如果你更新的页面那么它的内容也会发生变化。比如下面这段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"div\"</span>) ;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; divs.length ; i ++)&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(<span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>)) ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码的原意是向body中添加多一倍的div节点，但是真正的运行会导致死循环，这就是因为divs是动态更新的，每次向body中添加div节点都会使length属性发生变化也就是加1，所以这个循环会一直执行下去，在开发的时候应该注意这个问题。一个理想的办法就是缓存divs的长度，这样就不会引起死循环了。</p>\n<h2 id=\"节点筛选\"><a href=\"#节点筛选\" class=\"headerlink\" title=\"节点筛选\"></a>节点筛选</h2><p>如果需要得到某个节点的所以孩子节点，我们可能会用到childNodes属性；得到第一个孩子，我们可能会用到firstChild；得到下一个兄弟节点，我们可能会用到nextSibling。但是这些属性都存在一些问题就是它们会把一些空格和空行也当作孩子节点返回给我们，而这些经常不是我们所想要的，如果使用这些属性那么我们就需要对它们进行筛选，这样势必会影响效率。所以我们应该用别的属性来替代这些，看下表:</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT8\" alt=\"请输入图片描述\"></p>\n<p>表格左边的是推荐的属性，它们只会返回Element节点。不过并不是所有浏览器都支持，所以在使用之前我们需要先判断一下。</p>\n<h2 id=\"使用选择器方法替代传统方法\"><a href=\"#使用选择器方法替代传统方法\" class=\"headerlink\" title=\"使用选择器方法替代传统方法\"></a>使用选择器方法替代传统方法</h2><p>现代浏览器给我们提供了另外一种方法在获取我们需要的节点，这个方法是querySelectorAll和querySelector。它们通过CSS选择器作为参数，返回满足条件的节点。querySelectorAll方法返回满足条件的所有节点而querySelector返回满足条件的第一个节点。使用这两个方法来替代我们以前经常用的getElementById，getElementsByTagName等方法也是提高性能的一个途径。不过还是老问题，并不是所有浏览器都支持这两个方法，所有还是先做个判断吧。</p>\n<h2 id=\"Reflow-和-Repaint\"><a href=\"#Reflow-和-Repaint\" class=\"headerlink\" title=\"Reflow 和 Repaint\"></a>Reflow 和 Repaint</h2><p>首先，Repaint是指页面上的元素的外观发生了改变但是不影响布局的情况下引起的浏览器重新绘画元素外观的行为，比如修改color，background-color等属性。Reflow是指页面上的元素的大小布局发生的变化从而引起浏览器对页面其他元素位置大小进行重新计算并且布局的行为。Reflow所导致的性能消耗远比Repaint大，所以我们下面重点讨论Reflow情况下的优化策略。<br>在讨论Reflow之前先简单的看一下浏览器加载页面的过程。如下图：</p>\n<p><img src=\"http://segmentfault.com/img/bVcAT9\" alt=\"请输入图片描述\"></p>\n<p>浏览器在收到HTML文档之后对其进行解析，解析过程分为两个部分DOM文档的解析和CSS样式的解析。解析DOM文档生成一个DOM树，DOM树和解析出来的CSS样式组合生成一个渲染树，最后浏览器根据这个渲染树进行页面的排版和绘画。而最后这一步就是会涉及到Reflow和Repaint。<br>以下这几个行为会引起页面的Reflow或Repaint：</p>\n<ol>\n<li>添加，删除，更新DOM节点</li>\n<li>隐藏/显示DOM节点(display:none或visibility:hidden)</li>\n<li>修改样式</li>\n<li>改变窗口大小，滚动页面</li>\n</ol>\n<p>其实浏览器在这方面已经帮我们做了一些优化了，对于每个触发Reflow的行为浏览器并不会马上就触发，而是把它们保存在一个队列中，当到达一定数量的时候再进行批量的Reflow，这样就不需要每次都进行Reflow。但是，我们的一些行为会影响到浏览器的优化，使得Reflow马上触发。当我们请求下面这些属性的时候发生这种现象：</p>\n<ol>\n<li>offsetTop, offsetLeft, offsetWidth, offsetHeight</li>\n<li>scrollTop/Left/Width/Height</li>\n<li>clientTop/Left/Width/Height</li>\n<li>getComputedStyle(), or currentStyle(IE)</li>\n</ol>\n<p>每当我们请求这些属性时，浏览器为了返回实时的情况就必须马上进行Reflow以计算出我们所需要的属性。所以我们应该尽量少的使用这些属性。<br>从上面可以发现，基于所有DOM操作都会引起Reflow或Repaint，所以尽可能避免页面的Reflow或Repaint可以很好的提高DOM性能。那么该怎么做才能最好的避免或最小化Reflow呢？下面有几个有用的建议：<br>1.不要逐一修改样式，而改为通过修改className来批量改变样式，如果样式需要动态计算，那么也要使用cssText属性来批量添加样式。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 错误的做法</span></div><div class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">10</span>,</div><div class=\"line\">    top = <span class=\"number\">10</span>;</div><div class=\"line\">el.style.left = left + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">el.style.top  = top  + <span class=\"string\">\"px\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用修改className来进行优化</span></div><div class=\"line\">el.className += <span class=\"string\">\" theclassname\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 如果需要动态修改css，那么就使用cssText</span></div><div class=\"line\">el.style.cssText += <span class=\"string\">\"; left: \"</span> + left + <span class=\"string\">\"px; top: \"</span> + top + <span class=\"string\">\"px;\"</span>;</div></pre></td></tr></table></figure>\n<p>2.批量处理DOM操作并且让元素脱离文档流，等操作结束后再放回文档流中。有以下几种办法：</p>\n<ul>\n<li>使用display：none隐藏element，然后进行操作，最后再显示出来</li>\n<li>使用documentFragment ，把新增的节点放在documentFragment中，最后再把documentFragment放到DOM中，因为把documentFragment放到DOM中，它只会把它的孩子节点放到DOM中，就好像documentFragment不存在。</li>\n<li>通过cloneNode复制节点，然后离线进行操作，最后再替换DOM中的节点。</li>\n</ul>\n<p>3.尽量少的访问会引起马上Reflow的属性，使用局部变量来缓存这些属性，比如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> left = el.offsetLeft,</div><div class=\"line\">    top  = el.offsetTop</div><div class=\"line\">    esty = el.style;</div><div class=\"line\"><span class=\"keyword\">for</span>(big; loop; here) &#123;</div><div class=\"line\">    left += <span class=\"number\">10</span>;</div><div class=\"line\">    top  += <span class=\"number\">10</span>;</div><div class=\"line\">    esty.left = left + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">    esty.top  = top  + <span class=\"string\">\"px\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.对于需要动画的元素，尽量让它脱离文档流，这样就能尽量引起尽量小的Reflow</p>\n<p>5.尽量少使用table布局</p>\n<h2 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h2><p>事件代理我想这个大家应该都知道了。越多的事件绑定页面就加载越慢并且占用更多内存，同时绑定太多事件也会使得代码的可读性降低。使用事件代理的方法原理就是把事件绑定到元素的父节点，然后在处理函数中判断target，根据不同的target执行不同的逻辑。这样能很大程度的减少绑定是事件数量并且提高代码的简洁度。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>看了这么多其实总结起来还是比较简单的，在进行DOM操作的时候尽量把DOM操作转换为本地的Javascript操作，使用时先缓存一些DOM元素或者属性，缓存长度。在需要进行大量DOM操作的时候，先让元素脱离文档，等操作结束再把元素放回文档中。优化策略还是需要在实践中不断尝试，不断摸索，找出最优的解决方案。</p>\n<p>最近准备毕设没什么时间更新博客，后面尽量安排好时间做到一周一篇，前端优化Javascript篇未完待续。。。</p>"},{"title":"看看 Grunt 的源码（三）：grunt 任务注册相关源码解析","date":"2015-04-20T06:46:58.000Z","_content":"上一篇分享了关于grunt中任务运行相关源码的解析，这一篇来分享grunt中跟任务注册相关的源码解析，废话不多说，开始吧。\n<!-- more -->\n跟任务注册相关的两个方法是 `grunt.registerTask` 和`grunt.registerMultiTask` 。这两个方法都位于 `lib/grunt/task.js` 文件中。首先来看看 `grunt.registerTask` 方法的实现，这个方法还涉及到了 `lib/util/task.js` 文件中的 `registerTask` 方法。\n\n```javascript\n//lib/grunt/task.js\ntask.registerTask = function(name) {\n  // 将任务加入到registry中\n  registry.tasks.push(name);\n  // 调用parent的registerTask方法注册任务\n  parent.registerTask.apply(task, arguments);\n  // 调用parent.registerTask方法之后，任务会被加入到_tasks缓存中\n  var thisTask = task._tasks[name];\n  // 复制任务的元数据\n  thisTask.meta = grunt.util._.clone(registry.meta);\n  // 对注册的任务函数进行封装\n  // 在真实函数执行之前进行一些预处理\n  var _fn = thisTask.fn;\n  thisTask.fn = function(arg) {\n    // 缓存任务名称\n    var name = thisTask.name;\n    // 初始化任务的errorcount\n    errorcount = grunt.fail.errorcount;\n    // 返回任务运行期间的errorcount\n    Object.defineProperty(this, 'errorCount', {\n      enumerable: true,\n      get: function() {\n        return grunt.fail.errorcount - errorcount;\n      }\n    });\n    // 将task.requires方法添加到this对象中\n    this.requires = task.requires.bind(task);\n    // 将grunt.config.requires方法添加到this对象中\n    this.requiresConfig = grunt.config.requires;\n    // options方法返回任务的相关option参数，可以通过参数覆盖默认的配置\n    this.options = function() {\n      var args = [{}].concat(grunt.util.toArray(arguments)).concat([\n        grunt.config([name, 'options'])\n      ]);\n      var options = grunt.util._.extend.apply(null, args);\n      grunt.verbose.writeflags(options, 'Options');\n      return options;\n    };\n    // 初始化log输出工作\n    var logger = _fn.alias || (thisTask.multi && (!arg || arg === '*')) ? 'verbose' : 'log';\n    grunt[logger].header('Running \"' + this.nameArgs + '\"' +\n      (this.name !== this.nameArgs ? ' (' + this.name + ')' : '') + ' task');\n    grunt[logger].debug('Task source: ' + thisTask.meta.filepath);\n    // 运行真实注册的任务函数\n    return _fn.apply(this, arguments);\n  };\n  return task;\n};\n//lib/util/task.js\n// 注册任务\nTask.prototype.registerTask = function(name, info, fn) {\n  // 如果没有传递info，调整参数\n  // 比如grunt.registerTask('taskName',function(){})的情况\n  // 这时候info为function函数，所以把info赋值给fn\n  if (fn == null) {\n    fn = info;\n    info = null;\n  }\n  // 如果fn是字符串或者字符串数组\n  // 比如grunt.registerTask('task',['task1','task2','task3'])的情况\n  var tasks;\n  if (typeof fn !== 'function') {\n    // 针对上面的情况，这时候tasks=['task1','task2','task3']\n    tasks = this.parseArgs([fn]);\n    // 将任务的函数改为将每个子任务添加到任务队列中\n    // 也就是分别将task1,task2和task3加入任务队列中\n    fn = this.run.bind(this, fn);\n    fn.alias = true;\n    // 这种情况下task相当于task1,task2和task3任务组合的别名\n    if (!info) {\n      info = 'Alias for \"' + tasks.join('\", \"') + '\" task' +\n        (tasks.length === 1 ? '' : 's') + '.';\n    }\n  } else if (!info) {\n    info = 'Custom task.';\n  }\n  // 将任务加入到缓存中\n  this._tasks[name] = {name: name, info: info, fn: fn};\n  // 返回任务对象，支持链式调用\n  return this;\n};\n```\n\n在 `registerTask` 方法中，首先会调用 `lib/util/task.js` 中的 `registerTask` 方法，而在这个方法中会修正方法的参数，然后将任务对象加入到任务缓存中；接着回到 `registerTask` 方法中对注册的函数进行封装，在封装的函数中会在函数执行前进行一些初始化工作，最后再执行注册函数。\n\n下面来看看 `grunt.registerMultiTask` 方法的实现。这个方法是针对具有多个target的任务的注册。\n\n```javascript\n// 组成含有多target的task\ntask.registerMultiTask = function(name, info, fn) {\n  // 针对grunt.registerMultiTask('taskName',function(){})的情况\n  if (fn == null) {\n    fn = info;\n    info = 'Custom multi task.';\n  }\n\n  var thisTask;\n  task.registerTask(name, info, function(target) {\n    var name = thisTask.name;\n    // 获得除了任务名以外的参数\n    this.args = grunt.util.toArray(arguments).slice(1);\n    // 如果没有指定target或者指定为*，那么运行所以target\n    if (!target || target === '*') {\n      return task.runAllTargets(name, this.args);\n    } else if (!isValidMultiTaskTarget(target)) {\n      // 如果存在不合法的target则抛出错误\n      throw new Error('Invalid target \"' + target + '\" specified.');\n    }\n    // 判断是否存在对应target的配置\n    this.requiresConfig([name, target]);\n    // options方法返回任务的相关option参数，可以通过参数覆盖默认的配置\n    this.options = function() {\n      var targetObj = grunt.config([name, target]);\n      var args = [{}].concat(grunt.util.toArray(arguments)).concat([\n        grunt.config([name, 'options']),\n        grunt.util.kindOf(targetObj) === 'object' ? targetObj.options : {}\n      ]);\n      var options = grunt.util._.extend.apply(null, args);\n      grunt.verbose.writeflags(options, 'Options');\n      return options;\n    };\n    // 将target添加到this对象中\n    this.target = target;\n    // 为this对象添加flags属性，并且初始化flags对象\n    // flags对象用来记录参数列表中是否存在对象的参数\n    // 如果存在值为true\n    this.flags = {};\n    this.args.forEach(function(arg) { this.flags[arg] = true; }, this);\n    // 将target的对于配置添加到this对象中\n    // 这个配置也就是我们通过initConfig定义的配置\n    this.data = grunt.config([name, target]);\n    // 将封装之后的files对象添加到this对象中\n    this.files = task.normalizeMultiTaskFiles(this.data, target);\n    // 将src的相关值添加到this的filesSrc属性中\n    Object.defineProperty(this, 'filesSrc', {\n      enumerable: true,\n      get: function() {\n        return grunt.util._(this.files).chain().pluck('src').flatten().uniq().value();\n      }.bind(this)\n    });\n    // 调用任务注册函数，传入相应参数\n    return fn.apply(this, this.args);\n  });\n  // 缓存任务\n  thisTask = task._tasks[name];\n  // 将任务标记为多任务\n  thisTask.multi = true;\n};\n```\n在 `registerMultiTask` 方法中会调用 `registerTask` 方法注册任务，而在注册的函数中首先会根据传入的target执行相应操作，如果没有传入target或者传入 `*` 那么就调用 `runAllTargets` 方法将所有target都加入任务队列中，否则执行对应的target，接着获取target的相应配置，调用 `normalizeMultiTaskFiles` 方法将配置数据转换为内部的file对象（PS：这个过程是grunt比较方便的一个地方，它有多种形式来定义文件路径之间的映射，并且支持多种表达式，file对象也是我一开始看grunt的东西，觉得这很神奇。后面我会说到这个方法），最后调用任务实际注册的函数。\n\n下面我们就来看看 `normalizeMultiTaskFiles` 方法的具体实现。\n```javascript\ntask.normalizeMultiTaskFiles = function(data, target) {\n  var prop, obj;\n  var files = [];\n  if (grunt.util.kindOf(data) === 'object') {\n    if ('src' in data || 'dest' in data) {\n      /*\n      *Compact Format的情况，比如：\n      *'bar' : {\n      *  'src' : ['a.js','b.js'] ,\n      *  'dest' : 'c.js'\n      *}\n      */\n      obj = {};\n      // 将除了options以外的配置复制到obj对象中\n      for (prop in data) {\n        if (prop !== 'options') {\n          obj[prop] = data[prop];\n        }\n      }\n      files.push(obj);\n    } else if (grunt.util.kindOf(data.files) === 'object') {\n      /*\n      *Files Object Format的情况，比如：\n      *'bar' : {\n      *  'files' : {\n      *     'c.js' : ['a.js','b.js']\n      *   }\n      *}\n      */\n      for (prop in data.files) {\n        files.push({src: data.files[prop], dest: grunt.config.process(prop)});\n      }\n    } else if (Array.isArray(data.files)) {\n      /*\n      *Files Array Format的情况，比如：\n      *'bar' : {\n      *  'files' : [\n      *     {'src':['a.js','b.js'],'dest':'c.js'},\n      *     {'src':['a.js','b.js'],'dest':'d.js'}\n      *   ]\n      *}\n      */\n      grunt.util._.flatten(data.files).forEach(function(obj) {\n        var prop;\n        if ('src' in obj || 'dest' in obj) {\n          files.push(obj);\n        } else {\n          for (prop in obj) {\n            files.push({src: obj[prop], dest: grunt.config.process(prop)});\n          }\n        }\n      });\n    }\n  } else {\n    /*\n    *Older Format的情况，比如：\n    *'bar' : ['a.js','b.js']\n    */\n    files.push({src: data, dest: grunt.config.process(target)});\n  }\n\n  // 如果没找到合法的文件配置对象，那么返回空的文件数组\n  if (files.length === 0) {\n    grunt.verbose.writeln('File: ' + '[no files]'.yellow);\n    return [];\n  }\n\n  // 对需要扩展的文件对象进行扩展\n  files = grunt.util._(files).chain().forEach(function(obj) {\n    // 调整obj.src属性，使其成为一维数组\n    // 如果不存在src属性，则直接返回不需要进行任何操作\n    if (!('src' in obj) || !obj.src) { return; }\n    // 如果obj.src是数组则压缩成一维数组，否则直接转换为数组\n    if (Array.isArray(obj.src)) {\n      obj.src = grunt.util._.flatten(obj.src);\n    } else {\n      obj.src = [obj.src];\n    }\n  }).map(function(obj) {\n    // 在obj的基础上创建对象，移除不需要的属性，处理动态生成src到dest的映射\n    var expandOptions = grunt.util._.extend({}, obj);\n    delete expandOptions.src;\n    delete expandOptions.dest;\n\n    // 利用expand中的配置，扩展文件映射关系，并返回扩展后的file对象\n    if (obj.expand) {\n      return grunt.file.expandMapping(obj.src, obj.dest, expandOptions).map(function(mapObj) {\n        // 将obj对象复制为result对象\n        var result = grunt.util._.extend({}, obj);\n        // 将obj对象复制为result的orig属性\n        result.orig = grunt.util._.extend({}, obj);\n        // 如果src或dest为模板，则解析为真正的路径\n        result.src = grunt.config.process(mapObj.src);\n        result.dest = grunt.config.process(mapObj.dest);\n        // 移除不需要的属性\n        ['expand', 'cwd', 'flatten', 'rename', 'ext'].forEach(function(prop) {\n          delete result[prop];\n        });\n        return result;\n      });\n    }\n\n    // 复制obj对象，并且向副本添加一个orig属性，属性的值也是obj对象的一个副本\n    // 保存一个obj的副本orig是因为在后面可能会对result中的属性进行修改\n    // orig使得result中可以访问到原始的file对象\n    var result = grunt.util._.extend({}, obj);\n    result.orig = grunt.util._.extend({}, obj);\n\n    if ('src' in result) {\n      // 如果result对象中具有src属性，那么给src属性添加一个get方法，\n      // 方法中对src根据expand进行扩展\n      Object.defineProperty(result, 'src', {\n        enumerable: true,\n        get: function fn() {\n          var src;\n          if (!('result' in fn)) {\n            src = obj.src;\n            // 将src转换为数组\n            src = Array.isArray(src) ? grunt.util._.flatten(src) : [src];\n            // 根据expand参数扩展src属性，并把结果缓存在fn中\n            fn.result = grunt.file.expand(expandOptions, src);\n          }\n          return fn.result;\n        }\n      });\n    }\n\n    if ('dest' in result) {\n      result.dest = obj.dest;\n    }\n\n    return result;\n  }).flatten().value();\n\n  // 如果命令行带有--verbose参数，则在log中输出文件路径\n  if (grunt.option('verbose')) {\n    files.forEach(function(obj) {\n      var output = [];\n      if ('src' in obj) {\n        output.push(obj.src.length > 0 ? grunt.log.wordlist(obj.src) : '[no src]'.yellow);\n      }\n      if ('dest' in obj) {\n        output.push('-> ' + (obj.dest ? String(obj.dest).cyan : '[no dest]'.yellow));\n      }\n      if (output.length > 0) {\n        grunt.verbose.writeln('Files: ' + output.join(' '));\n      }\n    });\n  }\n\n  return files;\n};\n```\n\ngrunt提供了多种格式来进行文件参数的配置，`normalizeMultiTaskFiles`方法会将相应target的配置转换为一个`files`数组，这个数组中存放的是每对文件的源地址和目的地址，该方法还负责对`expand`属性相关参数进行解析，最后生成多个源地址和目的地址对存在在`files`数组中。这个方法大大方便了grunt中关于文件的操作和配置。\n\n到这里 grunt 源码的解析就差不多了，更多的东西需要不断在实践中去理解，关于源码的详细注释请看 [这里](https://github.com/lakb248/grunt)。\n","source":"_posts/grunt-source-code-3.md","raw":"title: 看看 Grunt 的源码（三）：grunt 任务注册相关源码解析\ndate: 2015-04-20 14:46:58\ntags: ['javascript']\n---\n上一篇分享了关于grunt中任务运行相关源码的解析，这一篇来分享grunt中跟任务注册相关的源码解析，废话不多说，开始吧。\n<!-- more -->\n跟任务注册相关的两个方法是 `grunt.registerTask` 和`grunt.registerMultiTask` 。这两个方法都位于 `lib/grunt/task.js` 文件中。首先来看看 `grunt.registerTask` 方法的实现，这个方法还涉及到了 `lib/util/task.js` 文件中的 `registerTask` 方法。\n\n```javascript\n//lib/grunt/task.js\ntask.registerTask = function(name) {\n  // 将任务加入到registry中\n  registry.tasks.push(name);\n  // 调用parent的registerTask方法注册任务\n  parent.registerTask.apply(task, arguments);\n  // 调用parent.registerTask方法之后，任务会被加入到_tasks缓存中\n  var thisTask = task._tasks[name];\n  // 复制任务的元数据\n  thisTask.meta = grunt.util._.clone(registry.meta);\n  // 对注册的任务函数进行封装\n  // 在真实函数执行之前进行一些预处理\n  var _fn = thisTask.fn;\n  thisTask.fn = function(arg) {\n    // 缓存任务名称\n    var name = thisTask.name;\n    // 初始化任务的errorcount\n    errorcount = grunt.fail.errorcount;\n    // 返回任务运行期间的errorcount\n    Object.defineProperty(this, 'errorCount', {\n      enumerable: true,\n      get: function() {\n        return grunt.fail.errorcount - errorcount;\n      }\n    });\n    // 将task.requires方法添加到this对象中\n    this.requires = task.requires.bind(task);\n    // 将grunt.config.requires方法添加到this对象中\n    this.requiresConfig = grunt.config.requires;\n    // options方法返回任务的相关option参数，可以通过参数覆盖默认的配置\n    this.options = function() {\n      var args = [{}].concat(grunt.util.toArray(arguments)).concat([\n        grunt.config([name, 'options'])\n      ]);\n      var options = grunt.util._.extend.apply(null, args);\n      grunt.verbose.writeflags(options, 'Options');\n      return options;\n    };\n    // 初始化log输出工作\n    var logger = _fn.alias || (thisTask.multi && (!arg || arg === '*')) ? 'verbose' : 'log';\n    grunt[logger].header('Running \"' + this.nameArgs + '\"' +\n      (this.name !== this.nameArgs ? ' (' + this.name + ')' : '') + ' task');\n    grunt[logger].debug('Task source: ' + thisTask.meta.filepath);\n    // 运行真实注册的任务函数\n    return _fn.apply(this, arguments);\n  };\n  return task;\n};\n//lib/util/task.js\n// 注册任务\nTask.prototype.registerTask = function(name, info, fn) {\n  // 如果没有传递info，调整参数\n  // 比如grunt.registerTask('taskName',function(){})的情况\n  // 这时候info为function函数，所以把info赋值给fn\n  if (fn == null) {\n    fn = info;\n    info = null;\n  }\n  // 如果fn是字符串或者字符串数组\n  // 比如grunt.registerTask('task',['task1','task2','task3'])的情况\n  var tasks;\n  if (typeof fn !== 'function') {\n    // 针对上面的情况，这时候tasks=['task1','task2','task3']\n    tasks = this.parseArgs([fn]);\n    // 将任务的函数改为将每个子任务添加到任务队列中\n    // 也就是分别将task1,task2和task3加入任务队列中\n    fn = this.run.bind(this, fn);\n    fn.alias = true;\n    // 这种情况下task相当于task1,task2和task3任务组合的别名\n    if (!info) {\n      info = 'Alias for \"' + tasks.join('\", \"') + '\" task' +\n        (tasks.length === 1 ? '' : 's') + '.';\n    }\n  } else if (!info) {\n    info = 'Custom task.';\n  }\n  // 将任务加入到缓存中\n  this._tasks[name] = {name: name, info: info, fn: fn};\n  // 返回任务对象，支持链式调用\n  return this;\n};\n```\n\n在 `registerTask` 方法中，首先会调用 `lib/util/task.js` 中的 `registerTask` 方法，而在这个方法中会修正方法的参数，然后将任务对象加入到任务缓存中；接着回到 `registerTask` 方法中对注册的函数进行封装，在封装的函数中会在函数执行前进行一些初始化工作，最后再执行注册函数。\n\n下面来看看 `grunt.registerMultiTask` 方法的实现。这个方法是针对具有多个target的任务的注册。\n\n```javascript\n// 组成含有多target的task\ntask.registerMultiTask = function(name, info, fn) {\n  // 针对grunt.registerMultiTask('taskName',function(){})的情况\n  if (fn == null) {\n    fn = info;\n    info = 'Custom multi task.';\n  }\n\n  var thisTask;\n  task.registerTask(name, info, function(target) {\n    var name = thisTask.name;\n    // 获得除了任务名以外的参数\n    this.args = grunt.util.toArray(arguments).slice(1);\n    // 如果没有指定target或者指定为*，那么运行所以target\n    if (!target || target === '*') {\n      return task.runAllTargets(name, this.args);\n    } else if (!isValidMultiTaskTarget(target)) {\n      // 如果存在不合法的target则抛出错误\n      throw new Error('Invalid target \"' + target + '\" specified.');\n    }\n    // 判断是否存在对应target的配置\n    this.requiresConfig([name, target]);\n    // options方法返回任务的相关option参数，可以通过参数覆盖默认的配置\n    this.options = function() {\n      var targetObj = grunt.config([name, target]);\n      var args = [{}].concat(grunt.util.toArray(arguments)).concat([\n        grunt.config([name, 'options']),\n        grunt.util.kindOf(targetObj) === 'object' ? targetObj.options : {}\n      ]);\n      var options = grunt.util._.extend.apply(null, args);\n      grunt.verbose.writeflags(options, 'Options');\n      return options;\n    };\n    // 将target添加到this对象中\n    this.target = target;\n    // 为this对象添加flags属性，并且初始化flags对象\n    // flags对象用来记录参数列表中是否存在对象的参数\n    // 如果存在值为true\n    this.flags = {};\n    this.args.forEach(function(arg) { this.flags[arg] = true; }, this);\n    // 将target的对于配置添加到this对象中\n    // 这个配置也就是我们通过initConfig定义的配置\n    this.data = grunt.config([name, target]);\n    // 将封装之后的files对象添加到this对象中\n    this.files = task.normalizeMultiTaskFiles(this.data, target);\n    // 将src的相关值添加到this的filesSrc属性中\n    Object.defineProperty(this, 'filesSrc', {\n      enumerable: true,\n      get: function() {\n        return grunt.util._(this.files).chain().pluck('src').flatten().uniq().value();\n      }.bind(this)\n    });\n    // 调用任务注册函数，传入相应参数\n    return fn.apply(this, this.args);\n  });\n  // 缓存任务\n  thisTask = task._tasks[name];\n  // 将任务标记为多任务\n  thisTask.multi = true;\n};\n```\n在 `registerMultiTask` 方法中会调用 `registerTask` 方法注册任务，而在注册的函数中首先会根据传入的target执行相应操作，如果没有传入target或者传入 `*` 那么就调用 `runAllTargets` 方法将所有target都加入任务队列中，否则执行对应的target，接着获取target的相应配置，调用 `normalizeMultiTaskFiles` 方法将配置数据转换为内部的file对象（PS：这个过程是grunt比较方便的一个地方，它有多种形式来定义文件路径之间的映射，并且支持多种表达式，file对象也是我一开始看grunt的东西，觉得这很神奇。后面我会说到这个方法），最后调用任务实际注册的函数。\n\n下面我们就来看看 `normalizeMultiTaskFiles` 方法的具体实现。\n```javascript\ntask.normalizeMultiTaskFiles = function(data, target) {\n  var prop, obj;\n  var files = [];\n  if (grunt.util.kindOf(data) === 'object') {\n    if ('src' in data || 'dest' in data) {\n      /*\n      *Compact Format的情况，比如：\n      *'bar' : {\n      *  'src' : ['a.js','b.js'] ,\n      *  'dest' : 'c.js'\n      *}\n      */\n      obj = {};\n      // 将除了options以外的配置复制到obj对象中\n      for (prop in data) {\n        if (prop !== 'options') {\n          obj[prop] = data[prop];\n        }\n      }\n      files.push(obj);\n    } else if (grunt.util.kindOf(data.files) === 'object') {\n      /*\n      *Files Object Format的情况，比如：\n      *'bar' : {\n      *  'files' : {\n      *     'c.js' : ['a.js','b.js']\n      *   }\n      *}\n      */\n      for (prop in data.files) {\n        files.push({src: data.files[prop], dest: grunt.config.process(prop)});\n      }\n    } else if (Array.isArray(data.files)) {\n      /*\n      *Files Array Format的情况，比如：\n      *'bar' : {\n      *  'files' : [\n      *     {'src':['a.js','b.js'],'dest':'c.js'},\n      *     {'src':['a.js','b.js'],'dest':'d.js'}\n      *   ]\n      *}\n      */\n      grunt.util._.flatten(data.files).forEach(function(obj) {\n        var prop;\n        if ('src' in obj || 'dest' in obj) {\n          files.push(obj);\n        } else {\n          for (prop in obj) {\n            files.push({src: obj[prop], dest: grunt.config.process(prop)});\n          }\n        }\n      });\n    }\n  } else {\n    /*\n    *Older Format的情况，比如：\n    *'bar' : ['a.js','b.js']\n    */\n    files.push({src: data, dest: grunt.config.process(target)});\n  }\n\n  // 如果没找到合法的文件配置对象，那么返回空的文件数组\n  if (files.length === 0) {\n    grunt.verbose.writeln('File: ' + '[no files]'.yellow);\n    return [];\n  }\n\n  // 对需要扩展的文件对象进行扩展\n  files = grunt.util._(files).chain().forEach(function(obj) {\n    // 调整obj.src属性，使其成为一维数组\n    // 如果不存在src属性，则直接返回不需要进行任何操作\n    if (!('src' in obj) || !obj.src) { return; }\n    // 如果obj.src是数组则压缩成一维数组，否则直接转换为数组\n    if (Array.isArray(obj.src)) {\n      obj.src = grunt.util._.flatten(obj.src);\n    } else {\n      obj.src = [obj.src];\n    }\n  }).map(function(obj) {\n    // 在obj的基础上创建对象，移除不需要的属性，处理动态生成src到dest的映射\n    var expandOptions = grunt.util._.extend({}, obj);\n    delete expandOptions.src;\n    delete expandOptions.dest;\n\n    // 利用expand中的配置，扩展文件映射关系，并返回扩展后的file对象\n    if (obj.expand) {\n      return grunt.file.expandMapping(obj.src, obj.dest, expandOptions).map(function(mapObj) {\n        // 将obj对象复制为result对象\n        var result = grunt.util._.extend({}, obj);\n        // 将obj对象复制为result的orig属性\n        result.orig = grunt.util._.extend({}, obj);\n        // 如果src或dest为模板，则解析为真正的路径\n        result.src = grunt.config.process(mapObj.src);\n        result.dest = grunt.config.process(mapObj.dest);\n        // 移除不需要的属性\n        ['expand', 'cwd', 'flatten', 'rename', 'ext'].forEach(function(prop) {\n          delete result[prop];\n        });\n        return result;\n      });\n    }\n\n    // 复制obj对象，并且向副本添加一个orig属性，属性的值也是obj对象的一个副本\n    // 保存一个obj的副本orig是因为在后面可能会对result中的属性进行修改\n    // orig使得result中可以访问到原始的file对象\n    var result = grunt.util._.extend({}, obj);\n    result.orig = grunt.util._.extend({}, obj);\n\n    if ('src' in result) {\n      // 如果result对象中具有src属性，那么给src属性添加一个get方法，\n      // 方法中对src根据expand进行扩展\n      Object.defineProperty(result, 'src', {\n        enumerable: true,\n        get: function fn() {\n          var src;\n          if (!('result' in fn)) {\n            src = obj.src;\n            // 将src转换为数组\n            src = Array.isArray(src) ? grunt.util._.flatten(src) : [src];\n            // 根据expand参数扩展src属性，并把结果缓存在fn中\n            fn.result = grunt.file.expand(expandOptions, src);\n          }\n          return fn.result;\n        }\n      });\n    }\n\n    if ('dest' in result) {\n      result.dest = obj.dest;\n    }\n\n    return result;\n  }).flatten().value();\n\n  // 如果命令行带有--verbose参数，则在log中输出文件路径\n  if (grunt.option('verbose')) {\n    files.forEach(function(obj) {\n      var output = [];\n      if ('src' in obj) {\n        output.push(obj.src.length > 0 ? grunt.log.wordlist(obj.src) : '[no src]'.yellow);\n      }\n      if ('dest' in obj) {\n        output.push('-> ' + (obj.dest ? String(obj.dest).cyan : '[no dest]'.yellow));\n      }\n      if (output.length > 0) {\n        grunt.verbose.writeln('Files: ' + output.join(' '));\n      }\n    });\n  }\n\n  return files;\n};\n```\n\ngrunt提供了多种格式来进行文件参数的配置，`normalizeMultiTaskFiles`方法会将相应target的配置转换为一个`files`数组，这个数组中存放的是每对文件的源地址和目的地址，该方法还负责对`expand`属性相关参数进行解析，最后生成多个源地址和目的地址对存在在`files`数组中。这个方法大大方便了grunt中关于文件的操作和配置。\n\n到这里 grunt 源码的解析就差不多了，更多的东西需要不断在实践中去理解，关于源码的详细注释请看 [这里](https://github.com/lakb248/grunt)。\n","slug":"grunt-source-code-3","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvkg000d0povix05zpqo","content":"<p>上一篇分享了关于grunt中任务运行相关源码的解析，这一篇来分享grunt中跟任务注册相关的源码解析，废话不多说，开始吧。<br><a id=\"more\"></a><br>跟任务注册相关的两个方法是 <code>grunt.registerTask</code> 和<code>grunt.registerMultiTask</code> 。这两个方法都位于 <code>lib/grunt/task.js</code> 文件中。首先来看看 <code>grunt.registerTask</code> 方法的实现，这个方法还涉及到了 <code>lib/util/task.js</code> 文件中的 <code>registerTask</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//lib/grunt/task.js</span></div><div class=\"line\">task.registerTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 将任务加入到registry中</span></div><div class=\"line\">  registry.tasks.push(name);</div><div class=\"line\">  <span class=\"comment\">// 调用parent的registerTask方法注册任务</span></div><div class=\"line\">  parent.registerTask.apply(task, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"comment\">// 调用parent.registerTask方法之后，任务会被加入到_tasks缓存中</span></div><div class=\"line\">  <span class=\"keyword\">var</span> thisTask = task._tasks[name];</div><div class=\"line\">  <span class=\"comment\">// 复制任务的元数据</span></div><div class=\"line\">  thisTask.meta = grunt.util._.clone(registry.meta);</div><div class=\"line\">  <span class=\"comment\">// 对注册的任务函数进行封装</span></div><div class=\"line\">  <span class=\"comment\">// 在真实函数执行之前进行一些预处理</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _fn = thisTask.fn;</div><div class=\"line\">  thisTask.fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 缓存任务名称</span></div><div class=\"line\">    <span class=\"keyword\">var</span> name = thisTask.name;</div><div class=\"line\">    <span class=\"comment\">// 初始化任务的errorcount</span></div><div class=\"line\">    errorcount = grunt.fail.errorcount;</div><div class=\"line\">    <span class=\"comment\">// 返回任务运行期间的errorcount</span></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'errorCount'</span>, &#123;</div><div class=\"line\">      enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> grunt.fail.errorcount - errorcount;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 将task.requires方法添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requires = task.requires.bind(task);</div><div class=\"line\">    <span class=\"comment\">// 将grunt.config.requires方法添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requiresConfig = grunt.config.requires;</div><div class=\"line\">    <span class=\"comment\">// options方法返回任务的相关option参数，可以通过参数覆盖默认的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> args = [&#123;&#125;].concat(grunt.util.toArray(<span class=\"built_in\">arguments</span>)).concat([</div><div class=\"line\">        grunt.config([name, <span class=\"string\">'options'</span>])</div><div class=\"line\">      ]);</div><div class=\"line\">      <span class=\"keyword\">var</span> options = grunt.util._.extend.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">      grunt.verbose.writeflags(options, <span class=\"string\">'Options'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> options;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 初始化log输出工作</span></div><div class=\"line\">    <span class=\"keyword\">var</span> logger = _fn.alias || (thisTask.multi &amp;&amp; (!arg || arg === <span class=\"string\">'*'</span>)) ? <span class=\"string\">'verbose'</span> : <span class=\"string\">'log'</span>;</div><div class=\"line\">    grunt[logger].header(<span class=\"string\">'Running \"'</span> + <span class=\"keyword\">this</span>.nameArgs + <span class=\"string\">'\"'</span> +</div><div class=\"line\">      (<span class=\"keyword\">this</span>.name !== <span class=\"keyword\">this</span>.nameArgs ? <span class=\"string\">' ('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">')'</span> : <span class=\"string\">''</span>) + <span class=\"string\">' task'</span>);</div><div class=\"line\">    grunt[logger].debug(<span class=\"string\">'Task source: '</span> + thisTask.meta.filepath);</div><div class=\"line\">    <span class=\"comment\">// 运行真实注册的任务函数</span></div><div class=\"line\">    <span class=\"keyword\">return</span> _fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> task;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//lib/util/task.js</span></div><div class=\"line\"><span class=\"comment\">// 注册任务</span></div><div class=\"line\">Task.prototype.registerTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, info, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 如果没有传递info，调整参数</span></div><div class=\"line\">  <span class=\"comment\">// 比如grunt.registerTask('taskName',function()&#123;&#125;)的情况</span></div><div class=\"line\">  <span class=\"comment\">// 这时候info为function函数，所以把info赋值给fn</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    fn = info;</div><div class=\"line\">    info = <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 如果fn是字符串或者字符串数组</span></div><div class=\"line\">  <span class=\"comment\">// 比如grunt.registerTask('task',['task1','task2','task3'])的情况</span></div><div class=\"line\">  <span class=\"keyword\">var</span> tasks;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 针对上面的情况，这时候tasks=['task1','task2','task3']</span></div><div class=\"line\">    tasks = <span class=\"keyword\">this</span>.parseArgs([fn]);</div><div class=\"line\">    <span class=\"comment\">// 将任务的函数改为将每个子任务添加到任务队列中</span></div><div class=\"line\">    <span class=\"comment\">// 也就是分别将task1,task2和task3加入任务队列中</span></div><div class=\"line\">    fn = <span class=\"keyword\">this</span>.run.bind(<span class=\"keyword\">this</span>, fn);</div><div class=\"line\">    fn.alias = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"comment\">// 这种情况下task相当于task1,task2和task3任务组合的别名</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!info) &#123;</div><div class=\"line\">      info = <span class=\"string\">'Alias for \"'</span> + tasks.join(<span class=\"string\">'\", \"'</span>) + <span class=\"string\">'\" task'</span> +</div><div class=\"line\">        (tasks.length === <span class=\"number\">1</span> ? <span class=\"string\">''</span> : <span class=\"string\">'s'</span>) + <span class=\"string\">'.'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!info) &#123;</div><div class=\"line\">    info = <span class=\"string\">'Custom task.'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 将任务加入到缓存中</span></div><div class=\"line\">  <span class=\"keyword\">this</span>._tasks[name] = &#123;name: name, info: info, fn: fn&#125;;</div><div class=\"line\">  <span class=\"comment\">// 返回任务对象，支持链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在 <code>registerTask</code> 方法中，首先会调用 <code>lib/util/task.js</code> 中的 <code>registerTask</code> 方法，而在这个方法中会修正方法的参数，然后将任务对象加入到任务缓存中；接着回到 <code>registerTask</code> 方法中对注册的函数进行封装，在封装的函数中会在函数执行前进行一些初始化工作，最后再执行注册函数。</p>\n<p>下面来看看 <code>grunt.registerMultiTask</code> 方法的实现。这个方法是针对具有多个target的任务的注册。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 组成含有多target的task</span></div><div class=\"line\">task.registerMultiTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, info, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 针对grunt.registerMultiTask('taskName',function()&#123;&#125;)的情况</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    fn = info;</div><div class=\"line\">    info = <span class=\"string\">'Custom multi task.'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> thisTask;</div><div class=\"line\">  task.registerTask(name, info, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = thisTask.name;</div><div class=\"line\">    <span class=\"comment\">// 获得除了任务名以外的参数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.args = grunt.util.toArray(<span class=\"built_in\">arguments</span>).slice(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"comment\">// 如果没有指定target或者指定为*，那么运行所以target</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!target || target === <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> task.runAllTargets(name, <span class=\"keyword\">this</span>.args);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isValidMultiTaskTarget(target)) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果存在不合法的target则抛出错误</span></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Invalid target \"'</span> + target + <span class=\"string\">'\" specified.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 判断是否存在对应target的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requiresConfig([name, target]);</div><div class=\"line\">    <span class=\"comment\">// options方法返回任务的相关option参数，可以通过参数覆盖默认的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> targetObj = grunt.config([name, target]);</div><div class=\"line\">      <span class=\"keyword\">var</span> args = [&#123;&#125;].concat(grunt.util.toArray(<span class=\"built_in\">arguments</span>)).concat([</div><div class=\"line\">        grunt.config([name, <span class=\"string\">'options'</span>]),</div><div class=\"line\">        grunt.util.kindOf(targetObj) === <span class=\"string\">'object'</span> ? targetObj.options : &#123;&#125;</div><div class=\"line\">      ]);</div><div class=\"line\">      <span class=\"keyword\">var</span> options = grunt.util._.extend.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">      grunt.verbose.writeflags(options, <span class=\"string\">'Options'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> options;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 将target添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">    <span class=\"comment\">// 为this对象添加flags属性，并且初始化flags对象</span></div><div class=\"line\">    <span class=\"comment\">// flags对象用来记录参数列表中是否存在对象的参数</span></div><div class=\"line\">    <span class=\"comment\">// 如果存在值为true</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.flags = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.args.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123; <span class=\"keyword\">this</span>.flags[arg] = <span class=\"literal\">true</span>; &#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// 将target的对于配置添加到this对象中</span></div><div class=\"line\">    <span class=\"comment\">// 这个配置也就是我们通过initConfig定义的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.data = grunt.config([name, target]);</div><div class=\"line\">    <span class=\"comment\">// 将封装之后的files对象添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.files = task.normalizeMultiTaskFiles(<span class=\"keyword\">this</span>.data, target);</div><div class=\"line\">    <span class=\"comment\">// 将src的相关值添加到this的filesSrc属性中</span></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'filesSrc'</span>, &#123;</div><div class=\"line\">      enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> grunt.util._(<span class=\"keyword\">this</span>.files).chain().pluck(<span class=\"string\">'src'</span>).flatten().uniq().value();</div><div class=\"line\">      &#125;.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 调用任务注册函数，传入相应参数</span></div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.args);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">// 缓存任务</span></div><div class=\"line\">  thisTask = task._tasks[name];</div><div class=\"line\">  <span class=\"comment\">// 将任务标记为多任务</span></div><div class=\"line\">  thisTask.multi = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在 <code>registerMultiTask</code> 方法中会调用 <code>registerTask</code> 方法注册任务，而在注册的函数中首先会根据传入的target执行相应操作，如果没有传入target或者传入 <code>*</code> 那么就调用 <code>runAllTargets</code> 方法将所有target都加入任务队列中，否则执行对应的target，接着获取target的相应配置，调用 <code>normalizeMultiTaskFiles</code> 方法将配置数据转换为内部的file对象（PS：这个过程是grunt比较方便的一个地方，它有多种形式来定义文件路径之间的映射，并且支持多种表达式，file对象也是我一开始看grunt的东西，觉得这很神奇。后面我会说到这个方法），最后调用任务实际注册的函数。</p>\n<p>下面我们就来看看 <code>normalizeMultiTaskFiles</code> 方法的具体实现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div></pre></td><td class=\"code\"><pre><div class=\"line\">task.normalizeMultiTaskFiles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, target</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> prop, obj;</div><div class=\"line\">  <span class=\"keyword\">var</span> files = [];</div><div class=\"line\">  <span class=\"keyword\">if</span> (grunt.util.kindOf(data) === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> data || <span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">      <span class=\"comment\">/*</span></div><div class=\"line\">      *Compact Format的情况，比如：</div><div class=\"line\">      *'bar' : &#123;</div><div class=\"line\">      *  'src' : ['a.js','b.js'] ,</div><div class=\"line\">      *  'dest' : 'c.js'</div><div class=\"line\">      *&#125;</div><div class=\"line\">      */</div><div class=\"line\">      obj = &#123;&#125;;</div><div class=\"line\">      <span class=\"comment\">// 将除了options以外的配置复制到obj对象中</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prop !== <span class=\"string\">'options'</span>) &#123;</div><div class=\"line\">          obj[prop] = data[prop];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      files.push(obj);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grunt.util.kindOf(data.files) === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">/*</span></div><div class=\"line\">      *Files Object Format的情况，比如：</div><div class=\"line\">      *'bar' : &#123;</div><div class=\"line\">      *  'files' : &#123;</div><div class=\"line\">      *     'c.js' : ['a.js','b.js']</div><div class=\"line\">      *   &#125;</div><div class=\"line\">      *&#125;</div><div class=\"line\">      */</div><div class=\"line\">      <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> data.files) &#123;</div><div class=\"line\">        files.push(&#123;src: data.files[prop], dest: grunt.config.process(prop)&#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(data.files)) &#123;</div><div class=\"line\">      <span class=\"comment\">/*</span></div><div class=\"line\">      *Files Array Format的情况，比如：</div><div class=\"line\">      *'bar' : &#123;</div><div class=\"line\">      *  'files' : [</div><div class=\"line\">      *     &#123;'src':['a.js','b.js'],'dest':'c.js'&#125;,</div><div class=\"line\">      *     &#123;'src':['a.js','b.js'],'dest':'d.js'&#125;</div><div class=\"line\">      *   ]</div><div class=\"line\">      *&#125;</div><div class=\"line\">      */</div><div class=\"line\">      grunt.util._.flatten(data.files).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> prop;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj || <span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">          files.push(obj);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">            files.push(&#123;src: obj[prop], dest: grunt.config.process(prop)&#125;);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    *Older Format的情况，比如：</div><div class=\"line\">    *'bar' : ['a.js','b.js']</div><div class=\"line\">    */</div><div class=\"line\">    files.push(&#123;src: data, dest: grunt.config.process(target)&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果没找到合法的文件配置对象，那么返回空的文件数组</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (files.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    grunt.verbose.writeln(<span class=\"string\">'File: '</span> + <span class=\"string\">'[no files]'</span>.yellow);</div><div class=\"line\">    <span class=\"keyword\">return</span> [];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 对需要扩展的文件对象进行扩展</span></div><div class=\"line\">  files = grunt.util._(files).chain().forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 调整obj.src属性，使其成为一维数组</span></div><div class=\"line\">    <span class=\"comment\">// 如果不存在src属性，则直接返回不需要进行任何操作</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj) || !obj.src) &#123; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果obj.src是数组则压缩成一维数组，否则直接转换为数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(obj.src)) &#123;</div><div class=\"line\">      obj.src = grunt.util._.flatten(obj.src);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      obj.src = [obj.src];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在obj的基础上创建对象，移除不需要的属性，处理动态生成src到dest的映射</span></div><div class=\"line\">    <span class=\"keyword\">var</span> expandOptions = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">    <span class=\"keyword\">delete</span> expandOptions.src;</div><div class=\"line\">    <span class=\"keyword\">delete</span> expandOptions.dest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 利用expand中的配置，扩展文件映射关系，并返回扩展后的file对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (obj.expand) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> grunt.file.expandMapping(obj.src, obj.dest, expandOptions).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mapObj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 将obj对象复制为result对象</span></div><div class=\"line\">        <span class=\"keyword\">var</span> result = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">        <span class=\"comment\">// 将obj对象复制为result的orig属性</span></div><div class=\"line\">        result.orig = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">        <span class=\"comment\">// 如果src或dest为模板，则解析为真正的路径</span></div><div class=\"line\">        result.src = grunt.config.process(mapObj.src);</div><div class=\"line\">        result.dest = grunt.config.process(mapObj.dest);</div><div class=\"line\">        <span class=\"comment\">// 移除不需要的属性</span></div><div class=\"line\">        [<span class=\"string\">'expand'</span>, <span class=\"string\">'cwd'</span>, <span class=\"string\">'flatten'</span>, <span class=\"string\">'rename'</span>, <span class=\"string\">'ext'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prop</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">delete</span> result[prop];</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 复制obj对象，并且向副本添加一个orig属性，属性的值也是obj对象的一个副本</span></div><div class=\"line\">    <span class=\"comment\">// 保存一个obj的副本orig是因为在后面可能会对result中的属性进行修改</span></div><div class=\"line\">    <span class=\"comment\">// orig使得result中可以访问到原始的file对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> result = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">    result.orig = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> result) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果result对象中具有src属性，那么给src属性添加一个get方法，</span></div><div class=\"line\">      <span class=\"comment\">// 方法中对src根据expand进行扩展</span></div><div class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(result, <span class=\"string\">'src'</span>, &#123;</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> src;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!(<span class=\"string\">'result'</span> <span class=\"keyword\">in</span> fn)) &#123;</div><div class=\"line\">            src = obj.src;</div><div class=\"line\">            <span class=\"comment\">// 将src转换为数组</span></div><div class=\"line\">            src = <span class=\"built_in\">Array</span>.isArray(src) ? grunt.util._.flatten(src) : [src];</div><div class=\"line\">            <span class=\"comment\">// 根据expand参数扩展src属性，并把结果缓存在fn中</span></div><div class=\"line\">            fn.result = grunt.file.expand(expandOptions, src);</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> fn.result;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> result) &#123;</div><div class=\"line\">      result.dest = obj.dest;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;).flatten().value();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果命令行带有--verbose参数，则在log中输出文件路径</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (grunt.option(<span class=\"string\">'verbose'</span>)) &#123;</div><div class=\"line\">    files.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> output = [];</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        output.push(obj.src.length &gt; <span class=\"number\">0</span> ? grunt.log.wordlist(obj.src) : <span class=\"string\">'[no src]'</span>.yellow);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        output.push(<span class=\"string\">'-&gt; '</span> + (obj.dest ? <span class=\"built_in\">String</span>(obj.dest).cyan : <span class=\"string\">'[no dest]'</span>.yellow));</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (output.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        grunt.verbose.writeln(<span class=\"string\">'Files: '</span> + output.join(<span class=\"string\">' '</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> files;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>grunt提供了多种格式来进行文件参数的配置，<code>normalizeMultiTaskFiles</code>方法会将相应target的配置转换为一个<code>files</code>数组，这个数组中存放的是每对文件的源地址和目的地址，该方法还负责对<code>expand</code>属性相关参数进行解析，最后生成多个源地址和目的地址对存在在<code>files</code>数组中。这个方法大大方便了grunt中关于文件的操作和配置。</p>\n<p>到这里 grunt 源码的解析就差不多了，更多的东西需要不断在实践中去理解，关于源码的详细注释请看 <a href=\"https://github.com/lakb248/grunt\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n","excerpt":"<p>上一篇分享了关于grunt中任务运行相关源码的解析，这一篇来分享grunt中跟任务注册相关的源码解析，废话不多说，开始吧。<br>","more":"<br>跟任务注册相关的两个方法是 <code>grunt.registerTask</code> 和<code>grunt.registerMultiTask</code> 。这两个方法都位于 <code>lib/grunt/task.js</code> 文件中。首先来看看 <code>grunt.registerTask</code> 方法的实现，这个方法还涉及到了 <code>lib/util/task.js</code> 文件中的 <code>registerTask</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//lib/grunt/task.js</span></div><div class=\"line\">task.registerTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 将任务加入到registry中</span></div><div class=\"line\">  registry.tasks.push(name);</div><div class=\"line\">  <span class=\"comment\">// 调用parent的registerTask方法注册任务</span></div><div class=\"line\">  parent.registerTask.apply(task, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  <span class=\"comment\">// 调用parent.registerTask方法之后，任务会被加入到_tasks缓存中</span></div><div class=\"line\">  <span class=\"keyword\">var</span> thisTask = task._tasks[name];</div><div class=\"line\">  <span class=\"comment\">// 复制任务的元数据</span></div><div class=\"line\">  thisTask.meta = grunt.util._.clone(registry.meta);</div><div class=\"line\">  <span class=\"comment\">// 对注册的任务函数进行封装</span></div><div class=\"line\">  <span class=\"comment\">// 在真实函数执行之前进行一些预处理</span></div><div class=\"line\">  <span class=\"keyword\">var</span> _fn = thisTask.fn;</div><div class=\"line\">  thisTask.fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 缓存任务名称</span></div><div class=\"line\">    <span class=\"keyword\">var</span> name = thisTask.name;</div><div class=\"line\">    <span class=\"comment\">// 初始化任务的errorcount</span></div><div class=\"line\">    errorcount = grunt.fail.errorcount;</div><div class=\"line\">    <span class=\"comment\">// 返回任务运行期间的errorcount</span></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'errorCount'</span>, &#123;</div><div class=\"line\">      enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> grunt.fail.errorcount - errorcount;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 将task.requires方法添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requires = task.requires.bind(task);</div><div class=\"line\">    <span class=\"comment\">// 将grunt.config.requires方法添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requiresConfig = grunt.config.requires;</div><div class=\"line\">    <span class=\"comment\">// options方法返回任务的相关option参数，可以通过参数覆盖默认的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> args = [&#123;&#125;].concat(grunt.util.toArray(<span class=\"built_in\">arguments</span>)).concat([</div><div class=\"line\">        grunt.config([name, <span class=\"string\">'options'</span>])</div><div class=\"line\">      ]);</div><div class=\"line\">      <span class=\"keyword\">var</span> options = grunt.util._.extend.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">      grunt.verbose.writeflags(options, <span class=\"string\">'Options'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> options;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 初始化log输出工作</span></div><div class=\"line\">    <span class=\"keyword\">var</span> logger = _fn.alias || (thisTask.multi &amp;&amp; (!arg || arg === <span class=\"string\">'*'</span>)) ? <span class=\"string\">'verbose'</span> : <span class=\"string\">'log'</span>;</div><div class=\"line\">    grunt[logger].header(<span class=\"string\">'Running \"'</span> + <span class=\"keyword\">this</span>.nameArgs + <span class=\"string\">'\"'</span> +</div><div class=\"line\">      (<span class=\"keyword\">this</span>.name !== <span class=\"keyword\">this</span>.nameArgs ? <span class=\"string\">' ('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">')'</span> : <span class=\"string\">''</span>) + <span class=\"string\">' task'</span>);</div><div class=\"line\">    grunt[logger].debug(<span class=\"string\">'Task source: '</span> + thisTask.meta.filepath);</div><div class=\"line\">    <span class=\"comment\">// 运行真实注册的任务函数</span></div><div class=\"line\">    <span class=\"keyword\">return</span> _fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> task;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">//lib/util/task.js</span></div><div class=\"line\"><span class=\"comment\">// 注册任务</span></div><div class=\"line\">Task.prototype.registerTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, info, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 如果没有传递info，调整参数</span></div><div class=\"line\">  <span class=\"comment\">// 比如grunt.registerTask('taskName',function()&#123;&#125;)的情况</span></div><div class=\"line\">  <span class=\"comment\">// 这时候info为function函数，所以把info赋值给fn</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    fn = info;</div><div class=\"line\">    info = <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 如果fn是字符串或者字符串数组</span></div><div class=\"line\">  <span class=\"comment\">// 比如grunt.registerTask('task',['task1','task2','task3'])的情况</span></div><div class=\"line\">  <span class=\"keyword\">var</span> tasks;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 针对上面的情况，这时候tasks=['task1','task2','task3']</span></div><div class=\"line\">    tasks = <span class=\"keyword\">this</span>.parseArgs([fn]);</div><div class=\"line\">    <span class=\"comment\">// 将任务的函数改为将每个子任务添加到任务队列中</span></div><div class=\"line\">    <span class=\"comment\">// 也就是分别将task1,task2和task3加入任务队列中</span></div><div class=\"line\">    fn = <span class=\"keyword\">this</span>.run.bind(<span class=\"keyword\">this</span>, fn);</div><div class=\"line\">    fn.alias = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"comment\">// 这种情况下task相当于task1,task2和task3任务组合的别名</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!info) &#123;</div><div class=\"line\">      info = <span class=\"string\">'Alias for \"'</span> + tasks.join(<span class=\"string\">'\", \"'</span>) + <span class=\"string\">'\" task'</span> +</div><div class=\"line\">        (tasks.length === <span class=\"number\">1</span> ? <span class=\"string\">''</span> : <span class=\"string\">'s'</span>) + <span class=\"string\">'.'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!info) &#123;</div><div class=\"line\">    info = <span class=\"string\">'Custom task.'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 将任务加入到缓存中</span></div><div class=\"line\">  <span class=\"keyword\">this</span>._tasks[name] = &#123;name: name, info: info, fn: fn&#125;;</div><div class=\"line\">  <span class=\"comment\">// 返回任务对象，支持链式调用</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在 <code>registerTask</code> 方法中，首先会调用 <code>lib/util/task.js</code> 中的 <code>registerTask</code> 方法，而在这个方法中会修正方法的参数，然后将任务对象加入到任务缓存中；接着回到 <code>registerTask</code> 方法中对注册的函数进行封装，在封装的函数中会在函数执行前进行一些初始化工作，最后再执行注册函数。</p>\n<p>下面来看看 <code>grunt.registerMultiTask</code> 方法的实现。这个方法是针对具有多个target的任务的注册。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 组成含有多target的task</span></div><div class=\"line\">task.registerMultiTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, info, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 针对grunt.registerMultiTask('taskName',function()&#123;&#125;)的情况</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">    fn = info;</div><div class=\"line\">    info = <span class=\"string\">'Custom multi task.'</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> thisTask;</div><div class=\"line\">  task.registerTask(name, info, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = thisTask.name;</div><div class=\"line\">    <span class=\"comment\">// 获得除了任务名以外的参数</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.args = grunt.util.toArray(<span class=\"built_in\">arguments</span>).slice(<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"comment\">// 如果没有指定target或者指定为*，那么运行所以target</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!target || target === <span class=\"string\">'*'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> task.runAllTargets(name, <span class=\"keyword\">this</span>.args);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isValidMultiTaskTarget(target)) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果存在不合法的target则抛出错误</span></div><div class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Invalid target \"'</span> + target + <span class=\"string\">'\" specified.'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 判断是否存在对应target的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.requiresConfig([name, target]);</div><div class=\"line\">    <span class=\"comment\">// options方法返回任务的相关option参数，可以通过参数覆盖默认的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> targetObj = grunt.config([name, target]);</div><div class=\"line\">      <span class=\"keyword\">var</span> args = [&#123;&#125;].concat(grunt.util.toArray(<span class=\"built_in\">arguments</span>)).concat([</div><div class=\"line\">        grunt.config([name, <span class=\"string\">'options'</span>]),</div><div class=\"line\">        grunt.util.kindOf(targetObj) === <span class=\"string\">'object'</span> ? targetObj.options : &#123;&#125;</div><div class=\"line\">      ]);</div><div class=\"line\">      <span class=\"keyword\">var</span> options = grunt.util._.extend.apply(<span class=\"literal\">null</span>, args);</div><div class=\"line\">      grunt.verbose.writeflags(options, <span class=\"string\">'Options'</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> options;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 将target添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">    <span class=\"comment\">// 为this对象添加flags属性，并且初始化flags对象</span></div><div class=\"line\">    <span class=\"comment\">// flags对象用来记录参数列表中是否存在对象的参数</span></div><div class=\"line\">    <span class=\"comment\">// 如果存在值为true</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.flags = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.args.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123; <span class=\"keyword\">this</span>.flags[arg] = <span class=\"literal\">true</span>; &#125;, <span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// 将target的对于配置添加到this对象中</span></div><div class=\"line\">    <span class=\"comment\">// 这个配置也就是我们通过initConfig定义的配置</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.data = grunt.config([name, target]);</div><div class=\"line\">    <span class=\"comment\">// 将封装之后的files对象添加到this对象中</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.files = task.normalizeMultiTaskFiles(<span class=\"keyword\">this</span>.data, target);</div><div class=\"line\">    <span class=\"comment\">// 将src的相关值添加到this的filesSrc属性中</span></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'filesSrc'</span>, &#123;</div><div class=\"line\">      enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> grunt.util._(<span class=\"keyword\">this</span>.files).chain().pluck(<span class=\"string\">'src'</span>).flatten().uniq().value();</div><div class=\"line\">      &#125;.bind(<span class=\"keyword\">this</span>)</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 调用任务注册函数，传入相应参数</span></div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.args);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"comment\">// 缓存任务</span></div><div class=\"line\">  thisTask = task._tasks[name];</div><div class=\"line\">  <span class=\"comment\">// 将任务标记为多任务</span></div><div class=\"line\">  thisTask.multi = <span class=\"literal\">true</span>;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在 <code>registerMultiTask</code> 方法中会调用 <code>registerTask</code> 方法注册任务，而在注册的函数中首先会根据传入的target执行相应操作，如果没有传入target或者传入 <code>*</code> 那么就调用 <code>runAllTargets</code> 方法将所有target都加入任务队列中，否则执行对应的target，接着获取target的相应配置，调用 <code>normalizeMultiTaskFiles</code> 方法将配置数据转换为内部的file对象（PS：这个过程是grunt比较方便的一个地方，它有多种形式来定义文件路径之间的映射，并且支持多种表达式，file对象也是我一开始看grunt的东西，觉得这很神奇。后面我会说到这个方法），最后调用任务实际注册的函数。</p>\n<p>下面我们就来看看 <code>normalizeMultiTaskFiles</code> 方法的具体实现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div></pre></td><td class=\"code\"><pre><div class=\"line\">task.normalizeMultiTaskFiles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, target</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> prop, obj;</div><div class=\"line\">  <span class=\"keyword\">var</span> files = [];</div><div class=\"line\">  <span class=\"keyword\">if</span> (grunt.util.kindOf(data) === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> data || <span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">      <span class=\"comment\">/*</div><div class=\"line\">      *Compact Format的情况，比如：</div><div class=\"line\">      *'bar' : &#123;</div><div class=\"line\">      *  'src' : ['a.js','b.js'] ,</div><div class=\"line\">      *  'dest' : 'c.js'</div><div class=\"line\">      *&#125;</div><div class=\"line\">      */</span></div><div class=\"line\">      obj = &#123;&#125;;</div><div class=\"line\">      <span class=\"comment\">// 将除了options以外的配置复制到obj对象中</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> data) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (prop !== <span class=\"string\">'options'</span>) &#123;</div><div class=\"line\">          obj[prop] = data[prop];</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      files.push(obj);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grunt.util.kindOf(data.files) === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">/*</div><div class=\"line\">      *Files Object Format的情况，比如：</div><div class=\"line\">      *'bar' : &#123;</div><div class=\"line\">      *  'files' : &#123;</div><div class=\"line\">      *     'c.js' : ['a.js','b.js']</div><div class=\"line\">      *   &#125;</div><div class=\"line\">      *&#125;</div><div class=\"line\">      */</span></div><div class=\"line\">      <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> data.files) &#123;</div><div class=\"line\">        files.push(&#123;src: data.files[prop], dest: grunt.config.process(prop)&#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(data.files)) &#123;</div><div class=\"line\">      <span class=\"comment\">/*</div><div class=\"line\">      *Files Array Format的情况，比如：</div><div class=\"line\">      *'bar' : &#123;</div><div class=\"line\">      *  'files' : [</div><div class=\"line\">      *     &#123;'src':['a.js','b.js'],'dest':'c.js'&#125;,</div><div class=\"line\">      *     &#123;'src':['a.js','b.js'],'dest':'d.js'&#125;</div><div class=\"line\">      *   ]</div><div class=\"line\">      *&#125;</div><div class=\"line\">      */</span></div><div class=\"line\">      grunt.util._.flatten(data.files).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> prop;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj || <span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">          files.push(obj);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">            files.push(&#123;src: obj[prop], dest: grunt.config.process(prop)&#125;);</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">    *Older Format的情况，比如：</div><div class=\"line\">    *'bar' : ['a.js','b.js']</div><div class=\"line\">    */</span></div><div class=\"line\">    files.push(&#123;src: data, dest: grunt.config.process(target)&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果没找到合法的文件配置对象，那么返回空的文件数组</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (files.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    grunt.verbose.writeln(<span class=\"string\">'File: '</span> + <span class=\"string\">'[no files]'</span>.yellow);</div><div class=\"line\">    <span class=\"keyword\">return</span> [];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 对需要扩展的文件对象进行扩展</span></div><div class=\"line\">  files = grunt.util._(files).chain().forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 调整obj.src属性，使其成为一维数组</span></div><div class=\"line\">    <span class=\"comment\">// 如果不存在src属性，则直接返回不需要进行任何操作</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj) || !obj.src) &#123; <span class=\"keyword\">return</span>; &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果obj.src是数组则压缩成一维数组，否则直接转换为数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(obj.src)) &#123;</div><div class=\"line\">      obj.src = grunt.util._.flatten(obj.src);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      obj.src = [obj.src];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 在obj的基础上创建对象，移除不需要的属性，处理动态生成src到dest的映射</span></div><div class=\"line\">    <span class=\"keyword\">var</span> expandOptions = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">    <span class=\"keyword\">delete</span> expandOptions.src;</div><div class=\"line\">    <span class=\"keyword\">delete</span> expandOptions.dest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 利用expand中的配置，扩展文件映射关系，并返回扩展后的file对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (obj.expand) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> grunt.file.expandMapping(obj.src, obj.dest, expandOptions).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mapObj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 将obj对象复制为result对象</span></div><div class=\"line\">        <span class=\"keyword\">var</span> result = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">        <span class=\"comment\">// 将obj对象复制为result的orig属性</span></div><div class=\"line\">        result.orig = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">        <span class=\"comment\">// 如果src或dest为模板，则解析为真正的路径</span></div><div class=\"line\">        result.src = grunt.config.process(mapObj.src);</div><div class=\"line\">        result.dest = grunt.config.process(mapObj.dest);</div><div class=\"line\">        <span class=\"comment\">// 移除不需要的属性</span></div><div class=\"line\">        [<span class=\"string\">'expand'</span>, <span class=\"string\">'cwd'</span>, <span class=\"string\">'flatten'</span>, <span class=\"string\">'rename'</span>, <span class=\"string\">'ext'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prop</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">delete</span> result[prop];</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 复制obj对象，并且向副本添加一个orig属性，属性的值也是obj对象的一个副本</span></div><div class=\"line\">    <span class=\"comment\">// 保存一个obj的副本orig是因为在后面可能会对result中的属性进行修改</span></div><div class=\"line\">    <span class=\"comment\">// orig使得result中可以访问到原始的file对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> result = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\">    result.orig = grunt.util._.extend(&#123;&#125;, obj);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> result) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果result对象中具有src属性，那么给src属性添加一个get方法，</span></div><div class=\"line\">      <span class=\"comment\">// 方法中对src根据expand进行扩展</span></div><div class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(result, <span class=\"string\">'src'</span>, &#123;</div><div class=\"line\">        enumerable: <span class=\"literal\">true</span>,</div><div class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> src;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!(<span class=\"string\">'result'</span> <span class=\"keyword\">in</span> fn)) &#123;</div><div class=\"line\">            src = obj.src;</div><div class=\"line\">            <span class=\"comment\">// 将src转换为数组</span></div><div class=\"line\">            src = <span class=\"built_in\">Array</span>.isArray(src) ? grunt.util._.flatten(src) : [src];</div><div class=\"line\">            <span class=\"comment\">// 根据expand参数扩展src属性，并把结果缓存在fn中</span></div><div class=\"line\">            fn.result = grunt.file.expand(expandOptions, src);</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> fn.result;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> result) &#123;</div><div class=\"line\">      result.dest = obj.dest;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;).flatten().value();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 如果命令行带有--verbose参数，则在log中输出文件路径</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (grunt.option(<span class=\"string\">'verbose'</span>)) &#123;</div><div class=\"line\">    files.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> output = [];</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        output.push(obj.src.length &gt; <span class=\"number\">0</span> ? grunt.log.wordlist(obj.src) : <span class=\"string\">'[no src]'</span>.yellow);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        output.push(<span class=\"string\">'-&gt; '</span> + (obj.dest ? <span class=\"built_in\">String</span>(obj.dest).cyan : <span class=\"string\">'[no dest]'</span>.yellow));</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">if</span> (output.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        grunt.verbose.writeln(<span class=\"string\">'Files: '</span> + output.join(<span class=\"string\">' '</span>));</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> files;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>grunt提供了多种格式来进行文件参数的配置，<code>normalizeMultiTaskFiles</code>方法会将相应target的配置转换为一个<code>files</code>数组，这个数组中存放的是每对文件的源地址和目的地址，该方法还负责对<code>expand</code>属性相关参数进行解析，最后生成多个源地址和目的地址对存在在<code>files</code>数组中。这个方法大大方便了grunt中关于文件的操作和配置。</p>\n<p>到这里 grunt 源码的解析就差不多了，更多的东西需要不断在实践中去理解，关于源码的详细注释请看 <a href=\"https://github.com/lakb248/grunt\">这里</a>。</p>"},{"title":"(译)ECMAScript 6 特性速览","date":"2014-05-24T01:50:00.000Z","_content":"原文地址:http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/\n\n　　下一个Javascript版本，也就是ECMAScript 6(ES6或者Harmony)，给我们带来了很多令人兴奋的特性。下面我们来快速看看这些特性。下面列出的这些特性是我觉得很可能会在你日常工作中用到的。\n　　如果你是一个Javascript新手或者原来是做服务器端开发的，那么你也不必担心，我相信现在是学习Javascript的最好时机，因为ES6有很多简介并且友好的特性。\n<!-- more -->\n# 类\n\n　　总所周知，Javascript不像其他面向对象语言那样支持类，但是Javascript可以通过函数和原型来模拟类。\n　　下面是一个创建类的新语法。如果你学习过Java或者其他面向对象语言的话，你会觉得很熟悉。\n```javascript\nclass Project {  \n  constructor(name) {\n    this.name = name;\n  }\n\n  start() {\n    return \"Project \" + this.name + \" starting\";\n  }\n}\n\nvar project = new Project(\"Journal\");  \nproject.start(); // \"Project Journal starting\"\n```\n\n　　所有你在类里面声明的方法都会添加到类的原型中。\n　\n# ES6和原型中的继承\n　　正如前面说的，Javascript不支持类。所以，既然它不支持类，那么它支持继承吗？\n　　的确，Javascript中的继承大部分是通过原型实现。如果你对原型不熟悉，那么一个好消息就是在ES6中你没必要了解原型就可以使用类和继承。原型并不难学习但是在这里你只要知道原型是javascript中实现继承的一种方式就可以了。\n　　下面我创建了一个Project的子类，命名为WebProject并且继承Project中的属性和方法\n```javascript\nclass WebProject extends Project {  \n  constructor(name, technologies) {\n    super(name);\n    this.technologies = technologies;\n  }\n\n  info() {\n    return this.name + \" uses \" + arrayToString(this.technology);\n  }\n}\n\nfunction arrayToString(param) {  \n  // ... some implementation\n}\n\nvar webJournal = new WebProject(\"FrontEnd Journal\", \"javascript\");  \nwebJournal.start(); // \"FrontEnd Journal starting\"  \nwebJournal.info(); // \"FrontEnd Journal uses javascript\"  \n```\n　　注意到在WebProject的构造函数中调用了Project的构造函数，然后就可以使用它的属性和方法了。\n　　\n# 模块\n　　如果你不想把你的JS代码都放在一个文件中或者你想在你的应用中的其他部分重用一些功能，那么你就很可能要用到模块。你需要记住的一个变量是`export`，只要在你要暴露出来的方法前面加上`export`就可以了。\n　　下面是我们应用的结构。Project类和WebProject类被放在application.js中。\n```javascript\nmyproject (folder)  \n |\n -- modules (folder)\n |   |\n |   -- helpers.js\n |\n -- application.js\n```\n　　让我们把`arrayToString()`方法从`application.js`中分离出来然后放在`modules/helpers.js`模块中，这样我们就可以在其他地方重用它了。\n```javascript\n// modules/helper.js\nexport function arrayToString(param) {  \n  // some implementation\n}\n```\n　　现在我们只需要在`application.js`中导入我们的模块就可以了。\n```javascript\n// application.js\nimport { arrayToString } from 'modules/helpers';\n\nclass WebProject extends Project {  \n  constructor(name, technologies) {\n    super(name);\n    this.technologies = technology;\n  }\n\n  info() {\n    return this.name + \" uses \" + arrayToString(this.technology);\n  }\n}\n\n// ...\n```\n# ES6的其他特性\n　　下面两个ES6中的特性就比较有趣了。`let`和`const`。\n## let\n　　为了理解`let`，首先我们需要记住`var`创建的是函数作用域的变量:\n```javascript\nfunction printName() {  \n  if(true) {\n    var name = \"Rafael\";\n  }\n  console.log(name); // Rafael\n}\n```\n　　注意到，不像Java或者许多其他语言那样，Javascript中任何在一个函数内部创建的变量都会被提升到函数的顶部。这就意味着无论你在哪里声明的变量，效果就像都是在函数顶部声明的一样。这种行为就叫做`提升`\n　　所以上面的函数可以理解成下面这样：\n```javascript\nfunction printName() {  \n  var name; // variable declaration is hoisted to the top\n  if(true) {\n    name = \"Rafael\";\n  }\n  console.log(name); // Rafael\n}\n```\n　　那么，`let`是如何工作的呢？\n　　我们用同样的例子来看看:\n```javascript\nfunction printName() {  \n  if(true) {\n    let name = \"Rafael\";\n  }\n  console.log(name); // ReferenceError: name is not defined\n}\n```\n　　由于`let`是在块内部，所以`name`变量只能在块中访问。\n```javascript\nfunction printName() {  \n  var name = \"Hey\";\n  if(true) {\n    let name = \"Rafael\";\n    console.log(name); // Rafael\n  }\n  console.log(name); // Hey\n}\n```\n　　在这个例子中，由于`let`引用了已经声明的变量，所以\"Rafael\"只在块内部合法。在块的外部`name`的值是\"Hey\"。\n　　总之，`var`是函数作用域的而`let`是块级作用域的。\n## const\n　　Javascript在过去很长一段时间都不支持创建常量。随着ES6的到来，你将可以创建常量并且保证它的值不会被改变。\n　　创建常量的语法如下:\n```javascript\nconst SERVER_URL = \"http://frontendjournal.com\"  \n```\n# 其他有趣的特性\n　　ECMAScript 6 同时还带来了很多其他特性:`Map`，`WeakMap`，`Generators`和`Proxies`。\n# 什么时候可以开始使用ES6？\n　　Firefoxs是支持最多特性的浏览器而Juriy Zaytsev已经把主要浏览器的支持列出来了。 http://kangax.github.com/es5-compat-table/es6/\n　　一些ES6特性在NodeJS中也可以使用。可以查看Alex Young的博客[ES6 for Node](http://dailyjs.com/2012/10/15/preparing-for-esnext/)。\n# 结论\n　　下一个版本的Javascript会带来一个更加简单更加友好的语法来帮助那些从面向对象语言转过来的开发者的学习。现在的唯一的问题就是主要浏览器对ES6的全面支持还需要一些时间。\n\n# 译者注:\n　　目前对ECMAScript 6支持比较好的两个浏览器就是Chrome和Firefox，为了更好地体验ES6，我们需要下载开发者版本的浏览器，Chrome Canary [下载地址](http://www.google.com/intl/zh-CN/chrome/browser/canary.html)，Firefox Aurora [下载地址](http://www.mozilla.org/en-US/firefox/channel/#aurora)。\n　　要在Firfox中开启ECMAScript 6，需要把`<script type= \"text/javascript\">`标签改为`<script type=\"applicationjavascript;version=1.8\">`。1.8是Firefox现在支持的版本最高的javascript。\n　　在Chrome中开启ECMAScript 6，只需要使用严格模式就可以了，也就是在脚本前面加上`\"use strict\"`。不过在这之前还需要在地址栏中输入`chrome://flags/`，然后启用实验性 JavaScript。\n","source":"_posts/overview-of-es6.md","raw":"title: (译)ECMAScript 6 特性速览\ndate: 2014-05-24 09:50\ntags: ['javascript', 'es6']\n---\n原文地址:http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/\n\n　　下一个Javascript版本，也就是ECMAScript 6(ES6或者Harmony)，给我们带来了很多令人兴奋的特性。下面我们来快速看看这些特性。下面列出的这些特性是我觉得很可能会在你日常工作中用到的。\n　　如果你是一个Javascript新手或者原来是做服务器端开发的，那么你也不必担心，我相信现在是学习Javascript的最好时机，因为ES6有很多简介并且友好的特性。\n<!-- more -->\n# 类\n\n　　总所周知，Javascript不像其他面向对象语言那样支持类，但是Javascript可以通过函数和原型来模拟类。\n　　下面是一个创建类的新语法。如果你学习过Java或者其他面向对象语言的话，你会觉得很熟悉。\n```javascript\nclass Project {  \n  constructor(name) {\n    this.name = name;\n  }\n\n  start() {\n    return \"Project \" + this.name + \" starting\";\n  }\n}\n\nvar project = new Project(\"Journal\");  \nproject.start(); // \"Project Journal starting\"\n```\n\n　　所有你在类里面声明的方法都会添加到类的原型中。\n　\n# ES6和原型中的继承\n　　正如前面说的，Javascript不支持类。所以，既然它不支持类，那么它支持继承吗？\n　　的确，Javascript中的继承大部分是通过原型实现。如果你对原型不熟悉，那么一个好消息就是在ES6中你没必要了解原型就可以使用类和继承。原型并不难学习但是在这里你只要知道原型是javascript中实现继承的一种方式就可以了。\n　　下面我创建了一个Project的子类，命名为WebProject并且继承Project中的属性和方法\n```javascript\nclass WebProject extends Project {  \n  constructor(name, technologies) {\n    super(name);\n    this.technologies = technologies;\n  }\n\n  info() {\n    return this.name + \" uses \" + arrayToString(this.technology);\n  }\n}\n\nfunction arrayToString(param) {  \n  // ... some implementation\n}\n\nvar webJournal = new WebProject(\"FrontEnd Journal\", \"javascript\");  \nwebJournal.start(); // \"FrontEnd Journal starting\"  \nwebJournal.info(); // \"FrontEnd Journal uses javascript\"  \n```\n　　注意到在WebProject的构造函数中调用了Project的构造函数，然后就可以使用它的属性和方法了。\n　　\n# 模块\n　　如果你不想把你的JS代码都放在一个文件中或者你想在你的应用中的其他部分重用一些功能，那么你就很可能要用到模块。你需要记住的一个变量是`export`，只要在你要暴露出来的方法前面加上`export`就可以了。\n　　下面是我们应用的结构。Project类和WebProject类被放在application.js中。\n```javascript\nmyproject (folder)  \n |\n -- modules (folder)\n |   |\n |   -- helpers.js\n |\n -- application.js\n```\n　　让我们把`arrayToString()`方法从`application.js`中分离出来然后放在`modules/helpers.js`模块中，这样我们就可以在其他地方重用它了。\n```javascript\n// modules/helper.js\nexport function arrayToString(param) {  \n  // some implementation\n}\n```\n　　现在我们只需要在`application.js`中导入我们的模块就可以了。\n```javascript\n// application.js\nimport { arrayToString } from 'modules/helpers';\n\nclass WebProject extends Project {  \n  constructor(name, technologies) {\n    super(name);\n    this.technologies = technology;\n  }\n\n  info() {\n    return this.name + \" uses \" + arrayToString(this.technology);\n  }\n}\n\n// ...\n```\n# ES6的其他特性\n　　下面两个ES6中的特性就比较有趣了。`let`和`const`。\n## let\n　　为了理解`let`，首先我们需要记住`var`创建的是函数作用域的变量:\n```javascript\nfunction printName() {  \n  if(true) {\n    var name = \"Rafael\";\n  }\n  console.log(name); // Rafael\n}\n```\n　　注意到，不像Java或者许多其他语言那样，Javascript中任何在一个函数内部创建的变量都会被提升到函数的顶部。这就意味着无论你在哪里声明的变量，效果就像都是在函数顶部声明的一样。这种行为就叫做`提升`\n　　所以上面的函数可以理解成下面这样：\n```javascript\nfunction printName() {  \n  var name; // variable declaration is hoisted to the top\n  if(true) {\n    name = \"Rafael\";\n  }\n  console.log(name); // Rafael\n}\n```\n　　那么，`let`是如何工作的呢？\n　　我们用同样的例子来看看:\n```javascript\nfunction printName() {  \n  if(true) {\n    let name = \"Rafael\";\n  }\n  console.log(name); // ReferenceError: name is not defined\n}\n```\n　　由于`let`是在块内部，所以`name`变量只能在块中访问。\n```javascript\nfunction printName() {  \n  var name = \"Hey\";\n  if(true) {\n    let name = \"Rafael\";\n    console.log(name); // Rafael\n  }\n  console.log(name); // Hey\n}\n```\n　　在这个例子中，由于`let`引用了已经声明的变量，所以\"Rafael\"只在块内部合法。在块的外部`name`的值是\"Hey\"。\n　　总之，`var`是函数作用域的而`let`是块级作用域的。\n## const\n　　Javascript在过去很长一段时间都不支持创建常量。随着ES6的到来，你将可以创建常量并且保证它的值不会被改变。\n　　创建常量的语法如下:\n```javascript\nconst SERVER_URL = \"http://frontendjournal.com\"  \n```\n# 其他有趣的特性\n　　ECMAScript 6 同时还带来了很多其他特性:`Map`，`WeakMap`，`Generators`和`Proxies`。\n# 什么时候可以开始使用ES6？\n　　Firefoxs是支持最多特性的浏览器而Juriy Zaytsev已经把主要浏览器的支持列出来了。 http://kangax.github.com/es5-compat-table/es6/\n　　一些ES6特性在NodeJS中也可以使用。可以查看Alex Young的博客[ES6 for Node](http://dailyjs.com/2012/10/15/preparing-for-esnext/)。\n# 结论\n　　下一个版本的Javascript会带来一个更加简单更加友好的语法来帮助那些从面向对象语言转过来的开发者的学习。现在的唯一的问题就是主要浏览器对ES6的全面支持还需要一些时间。\n\n# 译者注:\n　　目前对ECMAScript 6支持比较好的两个浏览器就是Chrome和Firefox，为了更好地体验ES6，我们需要下载开发者版本的浏览器，Chrome Canary [下载地址](http://www.google.com/intl/zh-CN/chrome/browser/canary.html)，Firefox Aurora [下载地址](http://www.mozilla.org/en-US/firefox/channel/#aurora)。\n　　要在Firfox中开启ECMAScript 6，需要把`<script type= \"text/javascript\">`标签改为`<script type=\"applicationjavascript;version=1.8\">`。1.8是Firefox现在支持的版本最高的javascript。\n　　在Chrome中开启ECMAScript 6，只需要使用严格模式就可以了，也就是在脚本前面加上`\"use strict\"`。不过在这之前还需要在地址栏中输入`chrome://flags/`，然后启用实验性 JavaScript。\n","slug":"overview-of-es6","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvkk000g0povk8ducpva","content":"<p>原文地址:<a href=\"http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/\" target=\"_blank\" rel=\"external\">http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/</a></p>\n<p>　　下一个Javascript版本，也就是ECMAScript 6(ES6或者Harmony)，给我们带来了很多令人兴奋的特性。下面我们来快速看看这些特性。下面列出的这些特性是我觉得很可能会在你日常工作中用到的。<br>　　如果你是一个Javascript新手或者原来是做服务器端开发的，那么你也不必担心，我相信现在是学习Javascript的最好时机，因为ES6有很多简介并且友好的特性。<br><a id=\"more\"></a></p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>　　总所周知，Javascript不像其他面向对象语言那样支持类，但是Javascript可以通过函数和原型来模拟类。<br>　　下面是一个创建类的新语法。如果你学习过Java或者其他面向对象语言的话，你会觉得很熟悉。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  start() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Project \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" starting\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> project = <span class=\"keyword\">new</span> Project(<span class=\"string\">\"Journal\"</span>);  </div><div class=\"line\">project.start(); <span class=\"comment\">// \"Project Journal starting\"</span></div></pre></td></tr></table></figure></p>\n<p>　　所有你在类里面声明的方法都会添加到类的原型中。\n　</p>\n<h1 id=\"ES6和原型中的继承\"><a href=\"#ES6和原型中的继承\" class=\"headerlink\" title=\"ES6和原型中的继承\"></a>ES6和原型中的继承</h1><p>　　正如前面说的，Javascript不支持类。所以，既然它不支持类，那么它支持继承吗？<br>　　的确，Javascript中的继承大部分是通过原型实现。如果你对原型不熟悉，那么一个好消息就是在ES6中你没必要了解原型就可以使用类和继承。原型并不难学习但是在这里你只要知道原型是javascript中实现继承的一种方式就可以了。<br>　　下面我创建了一个Project的子类，命名为WebProject并且继承Project中的属性和方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebProject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, technologies) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.technologies = technologies;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  info() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\" uses \"</span> + arrayToString(<span class=\"keyword\">this</span>.technology);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToString</span>(<span class=\"params\">param</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"comment\">// ... some implementation</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> webJournal = <span class=\"keyword\">new</span> WebProject(<span class=\"string\">\"FrontEnd Journal\"</span>, <span class=\"string\">\"javascript\"</span>);  </div><div class=\"line\">webJournal.start(); <span class=\"comment\">// \"FrontEnd Journal starting\"  </span></div><div class=\"line\">webJournal.info(); <span class=\"comment\">// \"FrontEnd Journal uses javascript\"</span></div></pre></td></tr></table></figure></p>\n<p>　　注意到在WebProject的构造函数中调用了Project的构造函数，然后就可以使用它的属性和方法了。\n　　</p>\n<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><p>　　如果你不想把你的JS代码都放在一个文件中或者你想在你的应用中的其他部分重用一些功能，那么你就很可能要用到模块。你需要记住的一个变量是<code>export</code>，只要在你要暴露出来的方法前面加上<code>export</code>就可以了。<br>　　下面是我们应用的结构。Project类和WebProject类被放在application.js中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myproject (folder)  </div><div class=\"line\"> |</div><div class=\"line\"> -- modules (folder)</div><div class=\"line\"> |   |</div><div class=\"line\"> |   -- helpers.js</div><div class=\"line\"> |</div><div class=\"line\"> -- application.js</div></pre></td></tr></table></figure></p>\n<p>　　让我们把<code>arrayToString()</code>方法从<code>application.js</code>中分离出来然后放在<code>modules/helpers.js</code>模块中，这样我们就可以在其他地方重用它了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/helper.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToString</span>(<span class=\"params\">param</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"comment\">// some implementation</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　现在我们只需要在<code>application.js</code>中导入我们的模块就可以了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// application.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; arrayToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'modules/helpers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebProject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, technologies) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.technologies = technology;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  info() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\" uses \"</span> + arrayToString(<span class=\"keyword\">this</span>.technology);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"ES6的其他特性\"><a href=\"#ES6的其他特性\" class=\"headerlink\" title=\"ES6的其他特性\"></a>ES6的其他特性</h1><p>　　下面两个ES6中的特性就比较有趣了。<code>let</code>和<code>const</code>。</p>\n<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>　　为了理解<code>let</code>，首先我们需要记住<code>var</code>创建的是函数作用域的变量:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　注意到，不像Java或者许多其他语言那样，Javascript中任何在一个函数内部创建的变量都会被提升到函数的顶部。这就意味着无论你在哪里声明的变量，效果就像都是在函数顶部声明的一样。这种行为就叫做<code>提升</code><br>　　所以上面的函数可以理解成下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> name; <span class=\"comment\">// variable declaration is hoisted to the top</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　那么，<code>let</code>是如何工作的呢？<br>　　我们用同样的例子来看看:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// ReferenceError: name is not defined</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　由于<code>let</code>是在块内部，所以<code>name</code>变量只能在块中访问。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Hey\"</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Hey</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　在这个例子中，由于<code>let</code>引用了已经声明的变量，所以”Rafael”只在块内部合法。在块的外部<code>name</code>的值是”Hey”。<br>　　总之，<code>var</code>是函数作用域的而<code>let</code>是块级作用域的。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>　　Javascript在过去很长一段时间都不支持创建常量。随着ES6的到来，你将可以创建常量并且保证它的值不会被改变。<br>　　创建常量的语法如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> SERVER_URL = <span class=\"string\">\"http://frontendjournal.com\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"其他有趣的特性\"><a href=\"#其他有趣的特性\" class=\"headerlink\" title=\"其他有趣的特性\"></a>其他有趣的特性</h1><p>　　ECMAScript 6 同时还带来了很多其他特性:<code>Map</code>，<code>WeakMap</code>，<code>Generators</code>和<code>Proxies</code>。</p>\n<h1 id=\"什么时候可以开始使用ES6？\"><a href=\"#什么时候可以开始使用ES6？\" class=\"headerlink\" title=\"什么时候可以开始使用ES6？\"></a>什么时候可以开始使用ES6？</h1><p>　　Firefoxs是支持最多特性的浏览器而Juriy Zaytsev已经把主要浏览器的支持列出来了。 <a href=\"http://kangax.github.com/es5-compat-table/es6/\" target=\"_blank\" rel=\"external\">http://kangax.github.com/es5-compat-table/es6/</a><br>　　一些ES6特性在NodeJS中也可以使用。可以查看Alex Young的博客<a href=\"http://dailyjs.com/2012/10/15/preparing-for-esnext/\" target=\"_blank\" rel=\"external\">ES6 for Node</a>。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>　　下一个版本的Javascript会带来一个更加简单更加友好的语法来帮助那些从面向对象语言转过来的开发者的学习。现在的唯一的问题就是主要浏览器对ES6的全面支持还需要一些时间。</p>\n<h1 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注:\"></a>译者注:</h1><p>　　目前对ECMAScript 6支持比较好的两个浏览器就是Chrome和Firefox，为了更好地体验ES6，我们需要下载开发者版本的浏览器，Chrome Canary <a href=\"http://www.google.com/intl/zh-CN/chrome/browser/canary.html\" target=\"_blank\" rel=\"external\">下载地址</a>，Firefox Aurora <a href=\"http://www.mozilla.org/en-US/firefox/channel/#aurora\" target=\"_blank\" rel=\"external\">下载地址</a>。<br>　　要在Firfox中开启ECMAScript 6，需要把<code>&lt;script type= &quot;text/javascript&quot;&gt;</code>标签改为<code>&lt;script type=&quot;applicationjavascript;version=1.8&quot;&gt;</code>。1.8是Firefox现在支持的版本最高的javascript。<br>　　在Chrome中开启ECMAScript 6，只需要使用严格模式就可以了，也就是在脚本前面加上<code>&quot;use strict&quot;</code>。不过在这之前还需要在地址栏中输入<code>chrome://flags/</code>，然后启用实验性 JavaScript。</p>\n","excerpt":"<p>原文地址:<a href=\"http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/\">http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/</a></p>\n<p>　　下一个Javascript版本，也就是ECMAScript 6(ES6或者Harmony)，给我们带来了很多令人兴奋的特性。下面我们来快速看看这些特性。下面列出的这些特性是我觉得很可能会在你日常工作中用到的。<br>　　如果你是一个Javascript新手或者原来是做服务器端开发的，那么你也不必担心，我相信现在是学习Javascript的最好时机，因为ES6有很多简介并且友好的特性。<br>","more":"</p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>　　总所周知，Javascript不像其他面向对象语言那样支持类，但是Javascript可以通过函数和原型来模拟类。<br>　　下面是一个创建类的新语法。如果你学习过Java或者其他面向对象语言的话，你会觉得很熟悉。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  start() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Project \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" starting\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> project = <span class=\"keyword\">new</span> Project(<span class=\"string\">\"Journal\"</span>);  </div><div class=\"line\">project.start(); <span class=\"comment\">// \"Project Journal starting\"</span></div></pre></td></tr></table></figure></p>\n<p>　　所有你在类里面声明的方法都会添加到类的原型中。\n　</p>\n<h1 id=\"ES6和原型中的继承\"><a href=\"#ES6和原型中的继承\" class=\"headerlink\" title=\"ES6和原型中的继承\"></a>ES6和原型中的继承</h1><p>　　正如前面说的，Javascript不支持类。所以，既然它不支持类，那么它支持继承吗？<br>　　的确，Javascript中的继承大部分是通过原型实现。如果你对原型不熟悉，那么一个好消息就是在ES6中你没必要了解原型就可以使用类和继承。原型并不难学习但是在这里你只要知道原型是javascript中实现继承的一种方式就可以了。<br>　　下面我创建了一个Project的子类，命名为WebProject并且继承Project中的属性和方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebProject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, technologies) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.technologies = technologies;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  info() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\" uses \"</span> + arrayToString(<span class=\"keyword\">this</span>.technology);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToString</span>(<span class=\"params\">param</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"comment\">// ... some implementation</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> webJournal = <span class=\"keyword\">new</span> WebProject(<span class=\"string\">\"FrontEnd Journal\"</span>, <span class=\"string\">\"javascript\"</span>);  </div><div class=\"line\">webJournal.start(); <span class=\"comment\">// \"FrontEnd Journal starting\"  </span></div><div class=\"line\">webJournal.info(); <span class=\"comment\">// \"FrontEnd Journal uses javascript\"</span></div></pre></td></tr></table></figure></p>\n<p>　　注意到在WebProject的构造函数中调用了Project的构造函数，然后就可以使用它的属性和方法了。\n　　</p>\n<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><p>　　如果你不想把你的JS代码都放在一个文件中或者你想在你的应用中的其他部分重用一些功能，那么你就很可能要用到模块。你需要记住的一个变量是<code>export</code>，只要在你要暴露出来的方法前面加上<code>export</code>就可以了。<br>　　下面是我们应用的结构。Project类和WebProject类被放在application.js中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myproject (folder)  </div><div class=\"line\"> |</div><div class=\"line\"> -- modules (folder)</div><div class=\"line\"> |   |</div><div class=\"line\"> |   -- helpers.js</div><div class=\"line\"> |</div><div class=\"line\"> -- application.js</div></pre></td></tr></table></figure></p>\n<p>　　让我们把<code>arrayToString()</code>方法从<code>application.js</code>中分离出来然后放在<code>modules/helpers.js</code>模块中，这样我们就可以在其他地方重用它了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/helper.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToString</span>(<span class=\"params\">param</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"comment\">// some implementation</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　现在我们只需要在<code>application.js</code>中导入我们的模块就可以了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// application.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; arrayToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'modules/helpers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebProject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, technologies) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.technologies = technology;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  info() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\" uses \"</span> + arrayToString(<span class=\"keyword\">this</span>.technology);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"ES6的其他特性\"><a href=\"#ES6的其他特性\" class=\"headerlink\" title=\"ES6的其他特性\"></a>ES6的其他特性</h1><p>　　下面两个ES6中的特性就比较有趣了。<code>let</code>和<code>const</code>。</p>\n<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>　　为了理解<code>let</code>，首先我们需要记住<code>var</code>创建的是函数作用域的变量:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　注意到，不像Java或者许多其他语言那样，Javascript中任何在一个函数内部创建的变量都会被提升到函数的顶部。这就意味着无论你在哪里声明的变量，效果就像都是在函数顶部声明的一样。这种行为就叫做<code>提升</code><br>　　所以上面的函数可以理解成下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> name; <span class=\"comment\">// variable declaration is hoisted to the top</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　那么，<code>let</code>是如何工作的呢？<br>　　我们用同样的例子来看看:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// ReferenceError: name is not defined</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　由于<code>let</code>是在块内部，所以<code>name</code>变量只能在块中访问。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Hey\"</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Hey</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　在这个例子中，由于<code>let</code>引用了已经声明的变量，所以”Rafael”只在块内部合法。在块的外部<code>name</code>的值是”Hey”。<br>　　总之，<code>var</code>是函数作用域的而<code>let</code>是块级作用域的。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>　　Javascript在过去很长一段时间都不支持创建常量。随着ES6的到来，你将可以创建常量并且保证它的值不会被改变。<br>　　创建常量的语法如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> SERVER_URL = <span class=\"string\">\"http://frontendjournal.com\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"其他有趣的特性\"><a href=\"#其他有趣的特性\" class=\"headerlink\" title=\"其他有趣的特性\"></a>其他有趣的特性</h1><p>　　ECMAScript 6 同时还带来了很多其他特性:<code>Map</code>，<code>WeakMap</code>，<code>Generators</code>和<code>Proxies</code>。</p>\n<h1 id=\"什么时候可以开始使用ES6？\"><a href=\"#什么时候可以开始使用ES6？\" class=\"headerlink\" title=\"什么时候可以开始使用ES6？\"></a>什么时候可以开始使用ES6？</h1><p>　　Firefoxs是支持最多特性的浏览器而Juriy Zaytsev已经把主要浏览器的支持列出来了。 <a href=\"http://kangax.github.com/es5-compat-table/es6/\">http://kangax.github.com/es5-compat-table/es6/</a><br>　　一些ES6特性在NodeJS中也可以使用。可以查看Alex Young的博客<a href=\"http://dailyjs.com/2012/10/15/preparing-for-esnext/\">ES6 for Node</a>。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>　　下一个版本的Javascript会带来一个更加简单更加友好的语法来帮助那些从面向对象语言转过来的开发者的学习。现在的唯一的问题就是主要浏览器对ES6的全面支持还需要一些时间。</p>\n<h1 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注:\"></a>译者注:</h1><p>　　目前对ECMAScript 6支持比较好的两个浏览器就是Chrome和Firefox，为了更好地体验ES6，我们需要下载开发者版本的浏览器，Chrome Canary <a href=\"http://www.google.com/intl/zh-CN/chrome/browser/canary.html\">下载地址</a>，Firefox Aurora <a href=\"http://www.mozilla.org/en-US/firefox/channel/#aurora\">下载地址</a>。<br>　　要在Firfox中开启ECMAScript 6，需要把<code>&lt;script type= &quot;text/javascript&quot;&gt;</code>标签改为<code>&lt;script type=&quot;applicationjavascript;version=1.8&quot;&gt;</code>。1.8是Firefox现在支持的版本最高的javascript。<br>　　在Chrome中开启ECMAScript 6，只需要使用严格模式就可以了，也就是在脚本前面加上<code>&quot;use strict&quot;</code>。不过在这之前还需要在地址栏中输入<code>chrome://flags/</code>，然后启用实验性 JavaScript。</p>"},{"title":"有趣的HTML5：离线存储","date":"2014-10-21T06:45:31.000Z","_content":"最近由于找工作一直没时间也没有精力更新博客，找工作真是一件苦逼的事情啊。。。不抱怨了，我们来看看HTML5的新特性---离线存储吧。\n\n随着Web App的发展，越来越多的移动端App使用HTML5的方式来开发，除了一些HybridApp以外，其他一部分Web App还是通过浏览器来访问的，通过浏览器访问就需要联网发送请求，这样就使得用户在离线的状态下无法使用App，同时Web App中一部分资源并不是经常改变，并不需要每次都向服务器发出请求，出于这些原因，HTML5提出的一个新的特性：离线存储。通过离线存储，我们可以通过把需要离线存储在本地的文件列在一个manifest配置文件中，这样即使在离线的情况下，用户也可以正常使用App。\n<!-- more -->\n## 怎么用\n首先来讲解下离线存储的使用方法，说起来也很简单。只要在你的页面头部像下面一样加入一个`manifest`的属性就可以了。\n```html\n<!DOCTYPE HTML>\n<html manifest = \"cache.manifest\">\n...\n</html>\n```\n然后`cache.manifest`文件的书写方式，就像下面这样：\n```javascript\nCACHE MANIFEST\n#v0.11\n\nCACHE:\n\njs/app.js\ncss/style.css\n\nNETWORK:\nresourse/logo.png\n\nFALLBACK:\n/ /offline.html\n```\n离线存储的manifest一般由三个部分组成:\n1.CACHE:表示需要离线存储的资源列表，由于包含manifest文件的页面将被自动离线存储，所以不需要把页面自身也列出来。\n2.NETWORK:表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在CACHE和NETWORK中有一个相同的资源，那么这个资源还是会被离线存储，也就是说CACHE的优先级更高。\n3.FALLBACK:表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问offline.html。\n\n## 浏览器怎么解析manifest\n\n那么浏览器是怎么对离线的资源进行管理和加载的呢？这里需要分两种情况来讨论。\n\n+ 在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n+ 离线的情况下，浏览器就直接使用离线存储的资源。\n\n这个过程中有几个问题需要注意。\n\n+ 如果服务器对离线的资源进行了更新，那么必须更新manifest文件之后这些资源才能被浏览器重新下载，如果只是更新了资源而没有更新manifest文件的话，浏览器并不会重新下载资源，也就是说还是使用原来离线存储的资源。\n+ 对于manifest文件进行缓存的时候需要十分小心，因为可能出现一种情况就是你对manifest文件进行了更新，但是http的缓存规则告诉浏览器本地缓存的manifest文件还没过期，这个情况下浏览器还是使用原来的manifest文件，所以对于manifest文件最好不要设置缓存。\n+ 浏览器在下载manifest文件中的资源的时候，它会一次性下载所有资源，如果某个资源由于某种原因下载失败，那么这次的所有更新就算是失败的，浏览器还是会使用原来的资源。\n+ 在更新了资源之后，新的资源需要到下次再打开app才会生效，如果需要资源马上就能生效，那么可以使用`window.applicationCache.swapCache()`方法来使之生效，出现这种现象的原因是浏览器会先使用离线资源加载页面，然后再去检查manifest是否有更新，所以需要到下次打开页面才能生效。\n\n## 咱们来试试吧\n说了这么多，不如自己动手来试试。这里需要说明的是，如果需要看到离线存储的效果，那么你需要把你的网页部署到服务器上，不管是本地还是生产环境服务器中，通过本地文件打开网页是无法体验到离线存储的。\n我在我的电脑上跑了一个本地node服务器，通过localhost访问。我的manifest文件向下面这样：\n```javascript\nCACHE MANIFEST\n#v0.11\n\nCACHE:\nlib/ionic/js/ionic.bundle.js\nlib/angular-ui-router.js\njs/app.js\nlib/ionic/css/ionic.css\ncss/style.css\nviews/login_header.html\nviews/login.html\nlib/ionic/fonts/ionicons.ttf?v=1.5.2\nlib/ionic/fonts/ionicons.woff?v=1.5.2\n\nNETWORK:\nlib/ionic/fonts/ionicons.ttf?v=1.5.2\nlib/ionic/fonts/ionicons.woff?v=1.5.2\ncss/style.css\n```\n然后我们访问网页看看效果。\n\n![图片描述][1]\n\n可以看出浏览器根据manifest文件下载相应资源并且缓存在本地，现在我们来试试再次访问网页\n\n![图片描述][2]\n\n资源已经离线存储在本地，所以浏览器不需要再次下载资源，可以直接使用本地缓存的资源。接着，我们更新下服务器上的资源，比如我修改下`app.js`，结果我这里就不显示了，跟上面那张图是一样的，更新的资源并没有生效，现在我们更新下manifest文件，比如把版本改为`0.12`\n\n![图片描述][3]\n\n很显然，只有更新了manifest文件，对离线资源的更新才能在浏览器上生效。\n最后，我们来试试离线状态下是什么情况，这才是离线存储的重头戏。通过Chrome设置离线状态，刷新页面\n\n![图片描述][4]\n\n由于在离线状态，所以浏览器无法访问到manifest文件，但是网页还是可以正常访问，这就是离线存储的威力。\n对于HTML5中离线存储对象`window.applicationCache`有几个事件需要我们关注下：\n\n![图片描述][5]\n\n1.`oncached`:当离线资源存储完成之后触发这个事件，这个是文档的说法，我在Chrome上面测试的时候并没有触发这个事件。\n2.`onchecking`:当浏览器对离线存储资源进行更新检查的时候会触发这个事件\n3.`ondownloading`:当浏览器开始下载离线资源的时候会触发这个事件\n4.`onprogress`:当浏览器在下载每一个资源的时候会触发这个事件，每下载一个资源就会触发一次。\n5.`onupdateready`:当浏览器对离线资源更新完成之后会触发这个事件\n6.`onnoupdate`:当浏览器检查更新之后发现没有资源更新的时候触发这个事件\n\n\n参考文章：\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\nhttp://diveintohtml5.info/offline.html\n  [1]: https://segmentfault.com/img/bVdeEM\n  [2]: https://segmentfault.com/img/bVdeEN\n  [3]: https://segmentfault.com/img/bVdeEO\n  [4]: https://segmentfault.com/img/bVdeEP\n  [5]: https://segmentfault.com/img/bVdeE1\n","source":"_posts/html5-offline-cache.md","raw":"title: 有趣的HTML5：离线存储\ndate: 2014-10-21 14:45:31\ntags: ['html5', 'application-cache']\n---\n最近由于找工作一直没时间也没有精力更新博客，找工作真是一件苦逼的事情啊。。。不抱怨了，我们来看看HTML5的新特性---离线存储吧。\n\n随着Web App的发展，越来越多的移动端App使用HTML5的方式来开发，除了一些HybridApp以外，其他一部分Web App还是通过浏览器来访问的，通过浏览器访问就需要联网发送请求，这样就使得用户在离线的状态下无法使用App，同时Web App中一部分资源并不是经常改变，并不需要每次都向服务器发出请求，出于这些原因，HTML5提出的一个新的特性：离线存储。通过离线存储，我们可以通过把需要离线存储在本地的文件列在一个manifest配置文件中，这样即使在离线的情况下，用户也可以正常使用App。\n<!-- more -->\n## 怎么用\n首先来讲解下离线存储的使用方法，说起来也很简单。只要在你的页面头部像下面一样加入一个`manifest`的属性就可以了。\n```html\n<!DOCTYPE HTML>\n<html manifest = \"cache.manifest\">\n...\n</html>\n```\n然后`cache.manifest`文件的书写方式，就像下面这样：\n```javascript\nCACHE MANIFEST\n#v0.11\n\nCACHE:\n\njs/app.js\ncss/style.css\n\nNETWORK:\nresourse/logo.png\n\nFALLBACK:\n/ /offline.html\n```\n离线存储的manifest一般由三个部分组成:\n1.CACHE:表示需要离线存储的资源列表，由于包含manifest文件的页面将被自动离线存储，所以不需要把页面自身也列出来。\n2.NETWORK:表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在CACHE和NETWORK中有一个相同的资源，那么这个资源还是会被离线存储，也就是说CACHE的优先级更高。\n3.FALLBACK:表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问offline.html。\n\n## 浏览器怎么解析manifest\n\n那么浏览器是怎么对离线的资源进行管理和加载的呢？这里需要分两种情况来讨论。\n\n+ 在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n+ 离线的情况下，浏览器就直接使用离线存储的资源。\n\n这个过程中有几个问题需要注意。\n\n+ 如果服务器对离线的资源进行了更新，那么必须更新manifest文件之后这些资源才能被浏览器重新下载，如果只是更新了资源而没有更新manifest文件的话，浏览器并不会重新下载资源，也就是说还是使用原来离线存储的资源。\n+ 对于manifest文件进行缓存的时候需要十分小心，因为可能出现一种情况就是你对manifest文件进行了更新，但是http的缓存规则告诉浏览器本地缓存的manifest文件还没过期，这个情况下浏览器还是使用原来的manifest文件，所以对于manifest文件最好不要设置缓存。\n+ 浏览器在下载manifest文件中的资源的时候，它会一次性下载所有资源，如果某个资源由于某种原因下载失败，那么这次的所有更新就算是失败的，浏览器还是会使用原来的资源。\n+ 在更新了资源之后，新的资源需要到下次再打开app才会生效，如果需要资源马上就能生效，那么可以使用`window.applicationCache.swapCache()`方法来使之生效，出现这种现象的原因是浏览器会先使用离线资源加载页面，然后再去检查manifest是否有更新，所以需要到下次打开页面才能生效。\n\n## 咱们来试试吧\n说了这么多，不如自己动手来试试。这里需要说明的是，如果需要看到离线存储的效果，那么你需要把你的网页部署到服务器上，不管是本地还是生产环境服务器中，通过本地文件打开网页是无法体验到离线存储的。\n我在我的电脑上跑了一个本地node服务器，通过localhost访问。我的manifest文件向下面这样：\n```javascript\nCACHE MANIFEST\n#v0.11\n\nCACHE:\nlib/ionic/js/ionic.bundle.js\nlib/angular-ui-router.js\njs/app.js\nlib/ionic/css/ionic.css\ncss/style.css\nviews/login_header.html\nviews/login.html\nlib/ionic/fonts/ionicons.ttf?v=1.5.2\nlib/ionic/fonts/ionicons.woff?v=1.5.2\n\nNETWORK:\nlib/ionic/fonts/ionicons.ttf?v=1.5.2\nlib/ionic/fonts/ionicons.woff?v=1.5.2\ncss/style.css\n```\n然后我们访问网页看看效果。\n\n![图片描述][1]\n\n可以看出浏览器根据manifest文件下载相应资源并且缓存在本地，现在我们来试试再次访问网页\n\n![图片描述][2]\n\n资源已经离线存储在本地，所以浏览器不需要再次下载资源，可以直接使用本地缓存的资源。接着，我们更新下服务器上的资源，比如我修改下`app.js`，结果我这里就不显示了，跟上面那张图是一样的，更新的资源并没有生效，现在我们更新下manifest文件，比如把版本改为`0.12`\n\n![图片描述][3]\n\n很显然，只有更新了manifest文件，对离线资源的更新才能在浏览器上生效。\n最后，我们来试试离线状态下是什么情况，这才是离线存储的重头戏。通过Chrome设置离线状态，刷新页面\n\n![图片描述][4]\n\n由于在离线状态，所以浏览器无法访问到manifest文件，但是网页还是可以正常访问，这就是离线存储的威力。\n对于HTML5中离线存储对象`window.applicationCache`有几个事件需要我们关注下：\n\n![图片描述][5]\n\n1.`oncached`:当离线资源存储完成之后触发这个事件，这个是文档的说法，我在Chrome上面测试的时候并没有触发这个事件。\n2.`onchecking`:当浏览器对离线存储资源进行更新检查的时候会触发这个事件\n3.`ondownloading`:当浏览器开始下载离线资源的时候会触发这个事件\n4.`onprogress`:当浏览器在下载每一个资源的时候会触发这个事件，每下载一个资源就会触发一次。\n5.`onupdateready`:当浏览器对离线资源更新完成之后会触发这个事件\n6.`onnoupdate`:当浏览器检查更新之后发现没有资源更新的时候触发这个事件\n\n\n参考文章：\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\nhttp://diveintohtml5.info/offline.html\n  [1]: https://segmentfault.com/img/bVdeEM\n  [2]: https://segmentfault.com/img/bVdeEN\n  [3]: https://segmentfault.com/img/bVdeEO\n  [4]: https://segmentfault.com/img/bVdeEP\n  [5]: https://segmentfault.com/img/bVdeE1\n","slug":"html5-offline-cache","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvkl000i0povlj5so3nu","content":"<p>最近由于找工作一直没时间也没有精力更新博客，找工作真是一件苦逼的事情啊。。。不抱怨了，我们来看看HTML5的新特性—离线存储吧。</p>\n<p>随着Web App的发展，越来越多的移动端App使用HTML5的方式来开发，除了一些HybridApp以外，其他一部分Web App还是通过浏览器来访问的，通过浏览器访问就需要联网发送请求，这样就使得用户在离线的状态下无法使用App，同时Web App中一部分资源并不是经常改变，并不需要每次都向服务器发出请求，出于这些原因，HTML5提出的一个新的特性：离线存储。通过离线存储，我们可以通过把需要离线存储在本地的文件列在一个manifest配置文件中，这样即使在离线的情况下，用户也可以正常使用App。<br><a id=\"more\"></a></p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>首先来讲解下离线存储的使用方法，说起来也很简单。只要在你的页面头部像下面一样加入一个<code>manifest</code>的属性就可以了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span> = <span class=\"string\">\"cache.manifest\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后<code>cache.manifest</code>文件的书写方式，就像下面这样：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST</div><div class=\"line\">#v0.11</div><div class=\"line\"></div><div class=\"line\">CACHE:</div><div class=\"line\"></div><div class=\"line\">js/app.js</div><div class=\"line\">css/style.css</div><div class=\"line\"></div><div class=\"line\">NETWORK:</div><div class=\"line\">resourse/logo.png</div><div class=\"line\"></div><div class=\"line\">FALLBACK:</div><div class=\"line\">/ /offline.html</div></pre></td></tr></table></figure></p>\n<p>离线存储的manifest一般由三个部分组成:<br>1.CACHE:表示需要离线存储的资源列表，由于包含manifest文件的页面将被自动离线存储，所以不需要把页面自身也列出来。<br>2.NETWORK:表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在CACHE和NETWORK中有一个相同的资源，那么这个资源还是会被离线存储，也就是说CACHE的优先级更高。<br>3.FALLBACK:表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问offline.html。</p>\n<h2 id=\"浏览器怎么解析manifest\"><a href=\"#浏览器怎么解析manifest\" class=\"headerlink\" title=\"浏览器怎么解析manifest\"></a>浏览器怎么解析manifest</h2><p>那么浏览器是怎么对离线的资源进行管理和加载的呢？这里需要分两种情况来讨论。</p>\n<ul>\n<li>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li>\n<li>离线的情况下，浏览器就直接使用离线存储的资源。</li>\n</ul>\n<p>这个过程中有几个问题需要注意。</p>\n<ul>\n<li>如果服务器对离线的资源进行了更新，那么必须更新manifest文件之后这些资源才能被浏览器重新下载，如果只是更新了资源而没有更新manifest文件的话，浏览器并不会重新下载资源，也就是说还是使用原来离线存储的资源。</li>\n<li>对于manifest文件进行缓存的时候需要十分小心，因为可能出现一种情况就是你对manifest文件进行了更新，但是http的缓存规则告诉浏览器本地缓存的manifest文件还没过期，这个情况下浏览器还是使用原来的manifest文件，所以对于manifest文件最好不要设置缓存。</li>\n<li>浏览器在下载manifest文件中的资源的时候，它会一次性下载所有资源，如果某个资源由于某种原因下载失败，那么这次的所有更新就算是失败的，浏览器还是会使用原来的资源。</li>\n<li>在更新了资源之后，新的资源需要到下次再打开app才会生效，如果需要资源马上就能生效，那么可以使用<code>window.applicationCache.swapCache()</code>方法来使之生效，出现这种现象的原因是浏览器会先使用离线资源加载页面，然后再去检查manifest是否有更新，所以需要到下次打开页面才能生效。</li>\n</ul>\n<h2 id=\"咱们来试试吧\"><a href=\"#咱们来试试吧\" class=\"headerlink\" title=\"咱们来试试吧\"></a>咱们来试试吧</h2><p>说了这么多，不如自己动手来试试。这里需要说明的是，如果需要看到离线存储的效果，那么你需要把你的网页部署到服务器上，不管是本地还是生产环境服务器中，通过本地文件打开网页是无法体验到离线存储的。<br>我在我的电脑上跑了一个本地node服务器，通过localhost访问。我的manifest文件向下面这样：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST</div><div class=\"line\">#v0.11</div><div class=\"line\"></div><div class=\"line\">CACHE:</div><div class=\"line\">lib/ionic/js/ionic.bundle.js</div><div class=\"line\">lib/angular-ui-router.js</div><div class=\"line\">js/app.js</div><div class=\"line\">lib/ionic/css/ionic.css</div><div class=\"line\">css/style.css</div><div class=\"line\">views/login_header.html</div><div class=\"line\">views/login.html</div><div class=\"line\">lib/ionic/fonts/ionicons.ttf?v=1.5.2</div><div class=\"line\">lib/ionic/fonts/ionicons.woff?v=1.5.2</div><div class=\"line\"></div><div class=\"line\">NETWORK:</div><div class=\"line\">lib/ionic/fonts/ionicons.ttf?v=1.5.2</div><div class=\"line\">lib/ionic/fonts/ionicons.woff?v=1.5.2</div><div class=\"line\">css/style.css</div></pre></td></tr></table></figure></p>\n<p>然后我们访问网页看看效果。</p>\n<p><img src=\"https://segmentfault.com/img/bVdeEM\" alt=\"图片描述\"></p>\n<p>可以看出浏览器根据manifest文件下载相应资源并且缓存在本地，现在我们来试试再次访问网页</p>\n<p><img src=\"https://segmentfault.com/img/bVdeEN\" alt=\"图片描述\"></p>\n<p>资源已经离线存储在本地，所以浏览器不需要再次下载资源，可以直接使用本地缓存的资源。接着，我们更新下服务器上的资源，比如我修改下<code>app.js</code>，结果我这里就不显示了，跟上面那张图是一样的，更新的资源并没有生效，现在我们更新下manifest文件，比如把版本改为<code>0.12</code></p>\n<p><img src=\"https://segmentfault.com/img/bVdeEO\" alt=\"图片描述\"></p>\n<p>很显然，只有更新了manifest文件，对离线资源的更新才能在浏览器上生效。<br>最后，我们来试试离线状态下是什么情况，这才是离线存储的重头戏。通过Chrome设置离线状态，刷新页面</p>\n<p><img src=\"https://segmentfault.com/img/bVdeEP\" alt=\"图片描述\"></p>\n<p>由于在离线状态，所以浏览器无法访问到manifest文件，但是网页还是可以正常访问，这就是离线存储的威力。<br>对于HTML5中离线存储对象<code>window.applicationCache</code>有几个事件需要我们关注下：</p>\n<p><img src=\"https://segmentfault.com/img/bVdeE1\" alt=\"图片描述\"></p>\n<p>1.<code>oncached</code>:当离线资源存储完成之后触发这个事件，这个是文档的说法，我在Chrome上面测试的时候并没有触发这个事件。<br>2.<code>onchecking</code>:当浏览器对离线存储资源进行更新检查的时候会触发这个事件<br>3.<code>ondownloading</code>:当浏览器开始下载离线资源的时候会触发这个事件<br>4.<code>onprogress</code>:当浏览器在下载每一个资源的时候会触发这个事件，每下载一个资源就会触发一次。<br>5.<code>onupdateready</code>:当浏览器对离线资源更新完成之后会触发这个事件<br>6.<code>onnoupdate</code>:当浏览器检查更新之后发现没有资源更新的时候触发这个事件</p>\n<p>参考文章：<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache</a><br><a href=\"http://diveintohtml5.info/offline.html\" target=\"_blank\" rel=\"external\">http://diveintohtml5.info/offline.html</a></p>\n","excerpt":"<p>最近由于找工作一直没时间也没有精力更新博客，找工作真是一件苦逼的事情啊。。。不抱怨了，我们来看看HTML5的新特性—离线存储吧。</p>\n<p>随着Web App的发展，越来越多的移动端App使用HTML5的方式来开发，除了一些HybridApp以外，其他一部分Web App还是通过浏览器来访问的，通过浏览器访问就需要联网发送请求，这样就使得用户在离线的状态下无法使用App，同时Web App中一部分资源并不是经常改变，并不需要每次都向服务器发出请求，出于这些原因，HTML5提出的一个新的特性：离线存储。通过离线存储，我们可以通过把需要离线存储在本地的文件列在一个manifest配置文件中，这样即使在离线的情况下，用户也可以正常使用App。<br>","more":"</p>\n<h2 id=\"怎么用\"><a href=\"#怎么用\" class=\"headerlink\" title=\"怎么用\"></a>怎么用</h2><p>首先来讲解下离线存储的使用方法，说起来也很简单。只要在你的页面头部像下面一样加入一个<code>manifest</code>的属性就可以了。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span> = <span class=\"string\">\"cache.manifest\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然后<code>cache.manifest</code>文件的书写方式，就像下面这样：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST</div><div class=\"line\">#v0.11</div><div class=\"line\"></div><div class=\"line\">CACHE:</div><div class=\"line\"></div><div class=\"line\">js/app.js</div><div class=\"line\">css/style.css</div><div class=\"line\"></div><div class=\"line\">NETWORK:</div><div class=\"line\">resourse/logo.png</div><div class=\"line\"></div><div class=\"line\">FALLBACK:</div><div class=\"line\">/ /offline.html</div></pre></td></tr></table></figure></p>\n<p>离线存储的manifest一般由三个部分组成:<br>1.CACHE:表示需要离线存储的资源列表，由于包含manifest文件的页面将被自动离线存储，所以不需要把页面自身也列出来。<br>2.NETWORK:表示在它下面列出来的资源只有在在线的情况下才能访问，他们不会被离线存储，所以在离线情况下无法使用这些资源。不过，如果在CACHE和NETWORK中有一个相同的资源，那么这个资源还是会被离线存储，也就是说CACHE的优先级更高。<br>3.FALLBACK:表示如果访问第一个资源失败，那么就使用第二个资源来替换他，比如上面这个文件表示的就是如果访问根目录下任何一个资源失败了，那么就去访问offline.html。</p>\n<h2 id=\"浏览器怎么解析manifest\"><a href=\"#浏览器怎么解析manifest\" class=\"headerlink\" title=\"浏览器怎么解析manifest\"></a>浏览器怎么解析manifest</h2><p>那么浏览器是怎么对离线的资源进行管理和加载的呢？这里需要分两种情况来讨论。</p>\n<ul>\n<li>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li>\n<li>离线的情况下，浏览器就直接使用离线存储的资源。</li>\n</ul>\n<p>这个过程中有几个问题需要注意。</p>\n<ul>\n<li>如果服务器对离线的资源进行了更新，那么必须更新manifest文件之后这些资源才能被浏览器重新下载，如果只是更新了资源而没有更新manifest文件的话，浏览器并不会重新下载资源，也就是说还是使用原来离线存储的资源。</li>\n<li>对于manifest文件进行缓存的时候需要十分小心，因为可能出现一种情况就是你对manifest文件进行了更新，但是http的缓存规则告诉浏览器本地缓存的manifest文件还没过期，这个情况下浏览器还是使用原来的manifest文件，所以对于manifest文件最好不要设置缓存。</li>\n<li>浏览器在下载manifest文件中的资源的时候，它会一次性下载所有资源，如果某个资源由于某种原因下载失败，那么这次的所有更新就算是失败的，浏览器还是会使用原来的资源。</li>\n<li>在更新了资源之后，新的资源需要到下次再打开app才会生效，如果需要资源马上就能生效，那么可以使用<code>window.applicationCache.swapCache()</code>方法来使之生效，出现这种现象的原因是浏览器会先使用离线资源加载页面，然后再去检查manifest是否有更新，所以需要到下次打开页面才能生效。</li>\n</ul>\n<h2 id=\"咱们来试试吧\"><a href=\"#咱们来试试吧\" class=\"headerlink\" title=\"咱们来试试吧\"></a>咱们来试试吧</h2><p>说了这么多，不如自己动手来试试。这里需要说明的是，如果需要看到离线存储的效果，那么你需要把你的网页部署到服务器上，不管是本地还是生产环境服务器中，通过本地文件打开网页是无法体验到离线存储的。<br>我在我的电脑上跑了一个本地node服务器，通过localhost访问。我的manifest文件向下面这样：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST</div><div class=\"line\">#v0.11</div><div class=\"line\"></div><div class=\"line\">CACHE:</div><div class=\"line\">lib/ionic/js/ionic.bundle.js</div><div class=\"line\">lib/angular-ui-router.js</div><div class=\"line\">js/app.js</div><div class=\"line\">lib/ionic/css/ionic.css</div><div class=\"line\">css/style.css</div><div class=\"line\">views/login_header.html</div><div class=\"line\">views/login.html</div><div class=\"line\">lib/ionic/fonts/ionicons.ttf?v=1.5.2</div><div class=\"line\">lib/ionic/fonts/ionicons.woff?v=1.5.2</div><div class=\"line\"></div><div class=\"line\">NETWORK:</div><div class=\"line\">lib/ionic/fonts/ionicons.ttf?v=1.5.2</div><div class=\"line\">lib/ionic/fonts/ionicons.woff?v=1.5.2</div><div class=\"line\">css/style.css</div></pre></td></tr></table></figure></p>\n<p>然后我们访问网页看看效果。</p>\n<p><img src=\"https://segmentfault.com/img/bVdeEM\" alt=\"图片描述\"></p>\n<p>可以看出浏览器根据manifest文件下载相应资源并且缓存在本地，现在我们来试试再次访问网页</p>\n<p><img src=\"https://segmentfault.com/img/bVdeEN\" alt=\"图片描述\"></p>\n<p>资源已经离线存储在本地，所以浏览器不需要再次下载资源，可以直接使用本地缓存的资源。接着，我们更新下服务器上的资源，比如我修改下<code>app.js</code>，结果我这里就不显示了，跟上面那张图是一样的，更新的资源并没有生效，现在我们更新下manifest文件，比如把版本改为<code>0.12</code></p>\n<p><img src=\"https://segmentfault.com/img/bVdeEO\" alt=\"图片描述\"></p>\n<p>很显然，只有更新了manifest文件，对离线资源的更新才能在浏览器上生效。<br>最后，我们来试试离线状态下是什么情况，这才是离线存储的重头戏。通过Chrome设置离线状态，刷新页面</p>\n<p><img src=\"https://segmentfault.com/img/bVdeEP\" alt=\"图片描述\"></p>\n<p>由于在离线状态，所以浏览器无法访问到manifest文件，但是网页还是可以正常访问，这就是离线存储的威力。<br>对于HTML5中离线存储对象<code>window.applicationCache</code>有几个事件需要我们关注下：</p>\n<p><img src=\"https://segmentfault.com/img/bVdeE1\" alt=\"图片描述\"></p>\n<p>1.<code>oncached</code>:当离线资源存储完成之后触发这个事件，这个是文档的说法，我在Chrome上面测试的时候并没有触发这个事件。<br>2.<code>onchecking</code>:当浏览器对离线存储资源进行更新检查的时候会触发这个事件<br>3.<code>ondownloading</code>:当浏览器开始下载离线资源的时候会触发这个事件<br>4.<code>onprogress</code>:当浏览器在下载每一个资源的时候会触发这个事件，每下载一个资源就会触发一次。<br>5.<code>onupdateready</code>:当浏览器对离线资源更新完成之后会触发这个事件<br>6.<code>onnoupdate</code>:当浏览器检查更新之后发现没有资源更新的时候触发这个事件</p>\n<p>参考文章：<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache\">https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache</a><br><a href=\"http://diveintohtml5.info/offline.html\">http://diveintohtml5.info/offline.html</a></p>"},{"title":"Markdown初探","date":"2014-05-24T06:34:25.000Z","_content":"\n听说Markdown是在很早以前了，可是一直不知道这是用来干嘛的。这次由于使用Hexo搭建了博客需要使用Markdown来写博客，专门了解了一下。\n<!-- more -->\n# 何为Markdown\n　　下面是Markdown的官网解释\n> Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML.\n\n　　大致意思就是说Markdown是一个把文本转换成html的工具，它可以让我们用易于读写的文本格式在写作，然后转换为格式化的XHML。按我自己的理解，Markdown就是一种标签语言，和HTML一样，它可以用简单的符号来表示不同的文本格式，最后显示成HTML。它最大的特点就是易于读写，不管你是否了解编程，都可以用Markdown来写作。\n　　\n# 基本语法\n　　下面这段文本涵盖了Markdown一些比较常用比较基本的语法，看完大家也就会对Markdown的语法有大致的了解。\n\n```markdown\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n以此类推最多可以有六级标题\n\n在文本两边加上*号表示 *斜体*\n\n在文本两边加上两个*号表示 **粗体**\n\n在文本两边加上三个* 号表示  ***粗体并且斜体***\n\n一个空行表示一个段落\n\n*/-/+号后面加个空格表示无序列表\n\n* 列表1\n- 列表2\n+ 列表3\n\n数字点后面加上空格表示有序列表\n\n1. 有序列表1\n2. 有序列表2\n\n>加空格表示引用\n>引用内容\n\n一个Tab代表代码块\n\n代码块\n\n可是代码块更适合用三个`包含来实现\n\n\n链接用[]包含然后跟上()括号中写上链接地址[链接](http://lakb248.github.io)\n\n```\n\n\n# 一级标题\n## 二级标题\n### 三级标题\n\n以此类推最多可以有六级标题\n\n在文本两边加上 * 号表示 *斜体*\n\n在文本两边加上两个 * 号表示 **粗体**\n\n在文本两边加上三个 * 号表示  ***粗体并且斜体***，注意星号和文本之间没有空格\n\n一个空行表示一个段落\n\n*/-/+号后面加个空格表示无序列表\n\n* 列表1\n- 列表2\n+ 列表3  \n\n阿拉伯数字点后面加上空格表示有序列表\n\n1. 有序列表1\n2. 有序列表2\n3. 有序列表3\n\n　>加空格表示引用\n　\n>引用内容\n\n一个Tab代表代码块\n\n    代码块\n\n\n可是代码块更适合用三个`包含来实现\n\n```javascript\n\tvar javascript = function(){\n\t\tfor(var i = 0 ; i < length ; i ++){}\n\t}\n```\n\n\n链接用[]包含然后跟上()括号中写上链接地址[链接](http://bin-playground.top)\n\n　　基本的语法就是上面这些，更多的语法请看[这里](http://wowubuntu.com/markdown/)。当然要熟练这些语法还是需要自己通过不断的使用来达到。\n","source":"_posts/overview-of-markdown.md","raw":"title: Markdown初探\ndate: 2014-05-24 14:34:25\ntags: ['markdown']\n---\n\n听说Markdown是在很早以前了，可是一直不知道这是用来干嘛的。这次由于使用Hexo搭建了博客需要使用Markdown来写博客，专门了解了一下。\n<!-- more -->\n# 何为Markdown\n　　下面是Markdown的官网解释\n> Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML.\n\n　　大致意思就是说Markdown是一个把文本转换成html的工具，它可以让我们用易于读写的文本格式在写作，然后转换为格式化的XHML。按我自己的理解，Markdown就是一种标签语言，和HTML一样，它可以用简单的符号来表示不同的文本格式，最后显示成HTML。它最大的特点就是易于读写，不管你是否了解编程，都可以用Markdown来写作。\n　　\n# 基本语法\n　　下面这段文本涵盖了Markdown一些比较常用比较基本的语法，看完大家也就会对Markdown的语法有大致的了解。\n\n```markdown\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n以此类推最多可以有六级标题\n\n在文本两边加上*号表示 *斜体*\n\n在文本两边加上两个*号表示 **粗体**\n\n在文本两边加上三个* 号表示  ***粗体并且斜体***\n\n一个空行表示一个段落\n\n*/-/+号后面加个空格表示无序列表\n\n* 列表1\n- 列表2\n+ 列表3\n\n数字点后面加上空格表示有序列表\n\n1. 有序列表1\n2. 有序列表2\n\n>加空格表示引用\n>引用内容\n\n一个Tab代表代码块\n\n代码块\n\n可是代码块更适合用三个`包含来实现\n\n\n链接用[]包含然后跟上()括号中写上链接地址[链接](http://lakb248.github.io)\n\n```\n\n\n# 一级标题\n## 二级标题\n### 三级标题\n\n以此类推最多可以有六级标题\n\n在文本两边加上 * 号表示 *斜体*\n\n在文本两边加上两个 * 号表示 **粗体**\n\n在文本两边加上三个 * 号表示  ***粗体并且斜体***，注意星号和文本之间没有空格\n\n一个空行表示一个段落\n\n*/-/+号后面加个空格表示无序列表\n\n* 列表1\n- 列表2\n+ 列表3  \n\n阿拉伯数字点后面加上空格表示有序列表\n\n1. 有序列表1\n2. 有序列表2\n3. 有序列表3\n\n　>加空格表示引用\n　\n>引用内容\n\n一个Tab代表代码块\n\n    代码块\n\n\n可是代码块更适合用三个`包含来实现\n\n```javascript\n\tvar javascript = function(){\n\t\tfor(var i = 0 ; i < length ; i ++){}\n\t}\n```\n\n\n链接用[]包含然后跟上()括号中写上链接地址[链接](http://bin-playground.top)\n\n　　基本的语法就是上面这些，更多的语法请看[这里](http://wowubuntu.com/markdown/)。当然要熟练这些语法还是需要自己通过不断的使用来达到。\n","slug":"overview-of-markdown","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvko000l0povckc59u0p","content":"<p>听说Markdown是在很早以前了，可是一直不知道这是用来干嘛的。这次由于使用Hexo搭建了博客需要使用Markdown来写博客，专门了解了一下。<br><a id=\"more\"></a></p>\n<h1 id=\"何为Markdown\"><a href=\"#何为Markdown\" class=\"headerlink\" title=\"何为Markdown\"></a>何为Markdown</h1><p>　　下面是Markdown的官网解释</p>\n<blockquote>\n<p>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML.</p>\n</blockquote>\n<p>　　大致意思就是说Markdown是一个把文本转换成html的工具，它可以让我们用易于读写的文本格式在写作，然后转换为格式化的XHML。按我自己的理解，Markdown就是一种标签语言，和HTML一样，它可以用简单的符号来表示不同的文本格式，最后显示成HTML。它最大的特点就是易于读写，不管你是否了解编程，都可以用Markdown来写作。\n　　</p>\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>　　下面这段文本涵盖了Markdown一些比较常用比较基本的语法，看完大家也就会对Markdown的语法有大致的了解。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">## 二级标题</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\"></div><div class=\"line\">以此类推最多可以有六级标题</div><div class=\"line\"></div><div class=\"line\">在文本两边加上<span class=\"emphasis\">*号表示 *</span>斜体*</div><div class=\"line\"></div><div class=\"line\">在文本两边加上两个<span class=\"emphasis\">*号表示 *</span><span class=\"emphasis\">*粗体*</span>*</div><div class=\"line\"></div><div class=\"line\">在文本两边加上三个<span class=\"bullet\">* 号表示  *</span><span class=\"strong\">**粗体并且斜体**</span>*</div><div class=\"line\"></div><div class=\"line\">一个空行表示一个段落</div><div class=\"line\"></div><div class=\"line\">*/-/+号后面加个空格表示无序列表</div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">* </span>列表1</div><div class=\"line\"><span class=\"bullet\">- </span>列表2</div><div class=\"line\"><span class=\"bullet\">+ </span>列表3</div><div class=\"line\"></div><div class=\"line\">数字点后面加上空格表示有序列表</div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">1. </span>有序列表1</div><div class=\"line\"><span class=\"bullet\">2. </span>有序列表2</div><div class=\"line\"></div><div class=\"line\">&gt;加空格表示引用</div><div class=\"line\">&gt;引用内容</div><div class=\"line\"></div><div class=\"line\">一个Tab代表代码块</div><div class=\"line\"></div><div class=\"line\">代码块</div><div class=\"line\"></div><div class=\"line\">可是代码块更适合用三个`包含来实现</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">链接用[<span class=\"string\"></span>]包含然后跟上()括号中写上链接地址[<span class=\"string\">链接</span>](<span class=\"link\">http://lakb248.github.io</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><p>以此类推最多可以有六级标题</p>\n<p>在文本两边加上 <em> 号表示 </em>斜体*</p>\n<p>在文本两边加上两个 <em> 号表示 <em>*粗体</em></em></p>\n<p>在文本两边加上三个 <em> 号表示  **</em>粗体并且斜体<em>*</em>，注意星号和文本之间没有空格</p>\n<p>一个空行表示一个段落</p>\n<p>*/-/+号后面加个空格表示无序列表</p>\n<ul>\n<li>列表1</li>\n</ul>\n<ul>\n<li>列表2</li>\n</ul>\n<ul>\n<li>列表3  </li>\n</ul>\n<p>阿拉伯数字点后面加上空格表示有序列表</p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2</li>\n<li>有序列表3</li>\n</ol>\n<p>　&gt;加空格表示引用\n　</p>\n<blockquote>\n<p>引用内容</p>\n</blockquote>\n<p>一个Tab代表代码块</p>\n<pre><code>代码块\n</code></pre><p>可是代码块更适合用三个`包含来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> javascript = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>链接用[]包含然后跟上()括号中写上链接地址<a href=\"http://bin-playground.top\" target=\"_blank\" rel=\"external\">链接</a></p>\n<p>　　基本的语法就是上面这些，更多的语法请看<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">这里</a>。当然要熟练这些语法还是需要自己通过不断的使用来达到。</p>\n","excerpt":"<p>听说Markdown是在很早以前了，可是一直不知道这是用来干嘛的。这次由于使用Hexo搭建了博客需要使用Markdown来写博客，专门了解了一下。<br>","more":"</p>\n<h1 id=\"何为Markdown\"><a href=\"#何为Markdown\" class=\"headerlink\" title=\"何为Markdown\"></a>何为Markdown</h1><p>　　下面是Markdown的官网解释</p>\n<blockquote>\n<p>Markdown is a text-to-HTML conversion tool for web writers. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML.</p>\n</blockquote>\n<p>　　大致意思就是说Markdown是一个把文本转换成html的工具，它可以让我们用易于读写的文本格式在写作，然后转换为格式化的XHML。按我自己的理解，Markdown就是一种标签语言，和HTML一样，它可以用简单的符号来表示不同的文本格式，最后显示成HTML。它最大的特点就是易于读写，不管你是否了解编程，都可以用Markdown来写作。\n　　</p>\n<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><p>　　下面这段文本涵盖了Markdown一些比较常用比较基本的语法，看完大家也就会对Markdown的语法有大致的了解。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">## 二级标题</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\"></div><div class=\"line\">以此类推最多可以有六级标题</div><div class=\"line\"></div><div class=\"line\">在文本两边加上<span class=\"emphasis\">*号表示 *</span>斜体*</div><div class=\"line\"></div><div class=\"line\">在文本两边加上两个<span class=\"emphasis\">*号表示 *</span><span class=\"emphasis\">*粗体*</span>*</div><div class=\"line\"></div><div class=\"line\">在文本两边加上三个<span class=\"bullet\">* 号表示  *</span><span class=\"strong\">**粗体并且斜体**</span>*</div><div class=\"line\"></div><div class=\"line\">一个空行表示一个段落</div><div class=\"line\"></div><div class=\"line\">*/-/+号后面加个空格表示无序列表</div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">* </span>列表1</div><div class=\"line\"><span class=\"bullet\">- </span>列表2</div><div class=\"line\"><span class=\"bullet\">+ </span>列表3</div><div class=\"line\"></div><div class=\"line\">数字点后面加上空格表示有序列表</div><div class=\"line\"></div><div class=\"line\"><span class=\"bullet\">1. </span>有序列表1</div><div class=\"line\"><span class=\"bullet\">2. </span>有序列表2</div><div class=\"line\"></div><div class=\"line\">&gt;加空格表示引用</div><div class=\"line\">&gt;引用内容</div><div class=\"line\"></div><div class=\"line\">一个Tab代表代码块</div><div class=\"line\"></div><div class=\"line\">代码块</div><div class=\"line\"></div><div class=\"line\">可是代码块更适合用三个`包含来实现</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">链接用[<span class=\"string\"></span>]包含然后跟上()括号中写上链接地址[<span class=\"string\">链接</span>](<span class=\"link\">http://lakb248.github.io</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><p>以此类推最多可以有六级标题</p>\n<p>在文本两边加上 <em> 号表示 </em>斜体*</p>\n<p>在文本两边加上两个 <em> 号表示 <em>*粗体</em></em></p>\n<p>在文本两边加上三个 <em> 号表示  **</em>粗体并且斜体<em>*</em>，注意星号和文本之间没有空格</p>\n<p>一个空行表示一个段落</p>\n<p>*/-/+号后面加个空格表示无序列表</p>\n<ul>\n<li>列表1</li>\n</ul>\n<ul>\n<li>列表2</li>\n</ul>\n<ul>\n<li>列表3  </li>\n</ul>\n<p>阿拉伯数字点后面加上空格表示有序列表</p>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2</li>\n<li>有序列表3</li>\n</ol>\n<p>　&gt;加空格表示引用\n　</p>\n<blockquote>\n<p>引用内容</p>\n</blockquote>\n<p>一个Tab代表代码块</p>\n<pre><code>代码块\n</code></pre><p>可是代码块更适合用三个`包含来实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> javascript = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>链接用[]包含然后跟上()括号中写上链接地址<a href=\"http://bin-playground.top\">链接</a></p>\n<p>　　基本的语法就是上面这些，更多的语法请看<a href=\"http://wowubuntu.com/markdown/\">这里</a>。当然要熟练这些语法还是需要自己通过不断的使用来达到。</p>"},{"title":"angularjs实践过程中的心得总结","date":"2015-03-10T06:46:12.000Z","_content":"利用寒假的时间给我家女神做了一个WebApp作为情人节礼物，一为表表忠心，二为练练手，在过程中也发现一些问题，在此总结总结。这里面除了angular方面的问题，还有一些单页面应用开发过程中的问题。\n<!-- more -->\n##加载优化\nWebApp第一个版本完成之后兴高采烈的打开浏览器测试，结果Chrome的加载时间让我大跌眼镜，整整用了八秒钟的时间首页在显示出来，这明显是不可接受的。所以必须进行拆分加载。整个WebApp分为一个首页和三个功能模块，所以很自然把三个模块拆分出来，优先加载首页，在点击导航的时候再依次加载对应模块代码。\n功能模块的延迟加载实际上就是与功能有关的控制器，服务和路由的延迟加载，所以在拆分加载中遇到的问题就是来自这些方面。首先常用的`module.controller`的controller定义方式无法满足App启动之后的controller动态定义，也就是说如果在angular启动了App之后再使用`module.controller`的方式定义controller是无效的，仍然会报controller undefined的错误。这时候就需要使用`$controllerProvider`的`register`方法来动态定义controller。功能模块的异步加载自然而然想到了`requirejs`,具体实现如下：\n```javascript\nvar meng = angular.module('meng',['ionic','ngRoute']) ;\n//异步加载功能模块\nvar resolveController = function(names){\n return {\n     loadController : ['$q','$rootScope',function($q,$rootScope){\n         var defer = $q.defer() ;\n         require(names,function(){\n             defer.resolve() ;\n             $rootScope.$apply() ;\n         }) ;\n         return defer.promise ;\n     }]\n }\n} ;\n\n//route config\nmeng.config(\n  ['$routeProvider','$controllerProvider','$provide','$compileProvider',\n  function($routeProvider,$controllerProvider,$provide,$compileProvider){\n\n  meng.register = {\n      controller: $controllerProvider.register,\n      factory: $provide.factory,\n      directive: $compileProvider.directive\n  };\n\n  $provide.decorator('$route',function($delegate){\n      var $route = $delegate ;\n      $route.when = function( path, route ) {\n          $routeProvider.when( path, route );\n          return this ;\n      };\n      return $route ;\n  }) ;\n\n  $routeProvider\n      .when('/',{\n          templateUrl : 'views/main.html'\n      })\n      .when('/info',{\n          templateUrl : 'views/info.html'\n      })\n      .when('/task',{\n          templateUrl : 'views/task/task.html',\n          controller : 'taskController',\n          resolve : resolveController(['TaskModule'])\n      })\n      .when('/wallet',{\n          templateUrl : 'views/wallet/wallet.html',\n          controller : 'walletController',\n          resolve : resolveController(['WalletModule'])\n      })\n      .when('/note',{\n          templateUrl : 'views/note/note_list.html',\n          controller : 'noteController',\n          resolve : resolveController(['NoteModule'])\n      })\n      .otherwise('/');\n}]) ;\n\n```\n上面的实现的关键就是`resolveController`方法，它在路由过程中利用require方法去加载功能对应的模块代码，在代码加载完成后进行路由跳转。上面省略了require的配置部分，`TaskModule`，`WalletModule`，`NoteModule`分别对于task.js，wallet.js和note.js三个文件。\n上面代码中还解决了延迟加载中的另一个问题，angular中路由配置是通过`$routeProvider`完成的，但是这个服务在config的时候才能获取，在App启动之后是无法获取进行路由配置的，而`$route`对象是随时都可以获取的，所以这里在config过程中对利用angular提供的装饰方法对`$route`进行了扩展，增加了一个when方法指向`$routeProvider`的`when`方法，这样就可以在其他地方对路由进行配置。\n通过上面的方法进行加载拆分有一个问题，它并没有很好的利用angular中模块化的特性，为了延迟加载功能不得不把原来分为三个module的代码都合并到一个module中，这样破坏了模块的独立性，如何在angular的module上进行延迟加载我还在寻找方法。\n##数据缓存\n高响应是单页面应用的一大优势，这是因为单页面应用会尽可能少的刷新页面。除了通过减少刷新来提高响应以外，减少不必要的数据交互也是一个关键。而为了减少不必要的数据交互，对数据进行缓存是很有必要的。在首次请求数据返回之后，将数据缓存下来，在下一次请求数据是先在缓存中查找，如果没有再去请求服务器数据，在这个过程中我们必须要保证缓存的数据与服务器数据保持同步，所以在进行增删改的时候需要同时对本地和服务器的数据进行增删改。而我在开发过程中把这部分功能实现放在Model中，这样向上隐藏内部的数据层实现。在数据缓存这方面大家如果有更好的办法，欢迎交流。\n##离线存储\nHTML5中的ApplicationCache离线存储是一个很好的提高App加载速度的途径，但是它也会给开发过程中带来一些不便，经常出现更新资源但是没有更新manifest文件带来的失误，而且希望更新生效需要进行两次页面刷新，这是比较不方便的。所以这个东西好用确实好用，只是加入离线存储应该放在开发过程的最后，在完成功能实现的前提下再把ApplicationCache加上去，这样可以避免它给开发过程中带来的不便。\n##小结\n上面所说的三个问题只是目前遇到的主要的三个问题，App还在改进中。对于angular的使用还不够熟练，对于单页面中的组织结构划分和模块化的理解还不够透彻，除了上面所说的问题以外还有几个问题有待继续钻研，比如如何更高效的处理数据缓存，移动设备上点击的击穿现象，还有CSS动画的问题，总之就是多动手多思考少吃零食多睡觉。\nPS:做了这个App之后发现自己真是不适合做设计，改了又改界面才勉强达到我家女神的要求，再接再厉吧。\n","source":"_posts/some-angular-practice.md","raw":"title: angularjs实践过程中的心得总结\ndate: 2015-03-10 14:46:12\ntags: ['angular']\n---\n利用寒假的时间给我家女神做了一个WebApp作为情人节礼物，一为表表忠心，二为练练手，在过程中也发现一些问题，在此总结总结。这里面除了angular方面的问题，还有一些单页面应用开发过程中的问题。\n<!-- more -->\n##加载优化\nWebApp第一个版本完成之后兴高采烈的打开浏览器测试，结果Chrome的加载时间让我大跌眼镜，整整用了八秒钟的时间首页在显示出来，这明显是不可接受的。所以必须进行拆分加载。整个WebApp分为一个首页和三个功能模块，所以很自然把三个模块拆分出来，优先加载首页，在点击导航的时候再依次加载对应模块代码。\n功能模块的延迟加载实际上就是与功能有关的控制器，服务和路由的延迟加载，所以在拆分加载中遇到的问题就是来自这些方面。首先常用的`module.controller`的controller定义方式无法满足App启动之后的controller动态定义，也就是说如果在angular启动了App之后再使用`module.controller`的方式定义controller是无效的，仍然会报controller undefined的错误。这时候就需要使用`$controllerProvider`的`register`方法来动态定义controller。功能模块的异步加载自然而然想到了`requirejs`,具体实现如下：\n```javascript\nvar meng = angular.module('meng',['ionic','ngRoute']) ;\n//异步加载功能模块\nvar resolveController = function(names){\n return {\n     loadController : ['$q','$rootScope',function($q,$rootScope){\n         var defer = $q.defer() ;\n         require(names,function(){\n             defer.resolve() ;\n             $rootScope.$apply() ;\n         }) ;\n         return defer.promise ;\n     }]\n }\n} ;\n\n//route config\nmeng.config(\n  ['$routeProvider','$controllerProvider','$provide','$compileProvider',\n  function($routeProvider,$controllerProvider,$provide,$compileProvider){\n\n  meng.register = {\n      controller: $controllerProvider.register,\n      factory: $provide.factory,\n      directive: $compileProvider.directive\n  };\n\n  $provide.decorator('$route',function($delegate){\n      var $route = $delegate ;\n      $route.when = function( path, route ) {\n          $routeProvider.when( path, route );\n          return this ;\n      };\n      return $route ;\n  }) ;\n\n  $routeProvider\n      .when('/',{\n          templateUrl : 'views/main.html'\n      })\n      .when('/info',{\n          templateUrl : 'views/info.html'\n      })\n      .when('/task',{\n          templateUrl : 'views/task/task.html',\n          controller : 'taskController',\n          resolve : resolveController(['TaskModule'])\n      })\n      .when('/wallet',{\n          templateUrl : 'views/wallet/wallet.html',\n          controller : 'walletController',\n          resolve : resolveController(['WalletModule'])\n      })\n      .when('/note',{\n          templateUrl : 'views/note/note_list.html',\n          controller : 'noteController',\n          resolve : resolveController(['NoteModule'])\n      })\n      .otherwise('/');\n}]) ;\n\n```\n上面的实现的关键就是`resolveController`方法，它在路由过程中利用require方法去加载功能对应的模块代码，在代码加载完成后进行路由跳转。上面省略了require的配置部分，`TaskModule`，`WalletModule`，`NoteModule`分别对于task.js，wallet.js和note.js三个文件。\n上面代码中还解决了延迟加载中的另一个问题，angular中路由配置是通过`$routeProvider`完成的，但是这个服务在config的时候才能获取，在App启动之后是无法获取进行路由配置的，而`$route`对象是随时都可以获取的，所以这里在config过程中对利用angular提供的装饰方法对`$route`进行了扩展，增加了一个when方法指向`$routeProvider`的`when`方法，这样就可以在其他地方对路由进行配置。\n通过上面的方法进行加载拆分有一个问题，它并没有很好的利用angular中模块化的特性，为了延迟加载功能不得不把原来分为三个module的代码都合并到一个module中，这样破坏了模块的独立性，如何在angular的module上进行延迟加载我还在寻找方法。\n##数据缓存\n高响应是单页面应用的一大优势，这是因为单页面应用会尽可能少的刷新页面。除了通过减少刷新来提高响应以外，减少不必要的数据交互也是一个关键。而为了减少不必要的数据交互，对数据进行缓存是很有必要的。在首次请求数据返回之后，将数据缓存下来，在下一次请求数据是先在缓存中查找，如果没有再去请求服务器数据，在这个过程中我们必须要保证缓存的数据与服务器数据保持同步，所以在进行增删改的时候需要同时对本地和服务器的数据进行增删改。而我在开发过程中把这部分功能实现放在Model中，这样向上隐藏内部的数据层实现。在数据缓存这方面大家如果有更好的办法，欢迎交流。\n##离线存储\nHTML5中的ApplicationCache离线存储是一个很好的提高App加载速度的途径，但是它也会给开发过程中带来一些不便，经常出现更新资源但是没有更新manifest文件带来的失误，而且希望更新生效需要进行两次页面刷新，这是比较不方便的。所以这个东西好用确实好用，只是加入离线存储应该放在开发过程的最后，在完成功能实现的前提下再把ApplicationCache加上去，这样可以避免它给开发过程中带来的不便。\n##小结\n上面所说的三个问题只是目前遇到的主要的三个问题，App还在改进中。对于angular的使用还不够熟练，对于单页面中的组织结构划分和模块化的理解还不够透彻，除了上面所说的问题以外还有几个问题有待继续钻研，比如如何更高效的处理数据缓存，移动设备上点击的击穿现象，还有CSS动画的问题，总之就是多动手多思考少吃零食多睡觉。\nPS:做了这个App之后发现自己真是不适合做设计，改了又改界面才勉强达到我家女神的要求，再接再厉吧。\n","slug":"some-angular-practice","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvkr000n0pov85s571s1","content":"<p>利用寒假的时间给我家女神做了一个WebApp作为情人节礼物，一为表表忠心，二为练练手，在过程中也发现一些问题，在此总结总结。这里面除了angular方面的问题，还有一些单页面应用开发过程中的问题。<br><a id=\"more\"></a></p>\n<p>##加载优化<br>WebApp第一个版本完成之后兴高采烈的打开浏览器测试，结果Chrome的加载时间让我大跌眼镜，整整用了八秒钟的时间首页在显示出来，这明显是不可接受的。所以必须进行拆分加载。整个WebApp分为一个首页和三个功能模块，所以很自然把三个模块拆分出来，优先加载首页，在点击导航的时候再依次加载对应模块代码。<br>功能模块的延迟加载实际上就是与功能有关的控制器，服务和路由的延迟加载，所以在拆分加载中遇到的问题就是来自这些方面。首先常用的<code>module.controller</code>的controller定义方式无法满足App启动之后的controller动态定义，也就是说如果在angular启动了App之后再使用<code>module.controller</code>的方式定义controller是无效的，仍然会报controller undefined的错误。这时候就需要使用<code>$controllerProvider</code>的<code>register</code>方法来动态定义controller。功能模块的异步加载自然而然想到了<code>requirejs</code>,具体实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> meng = angular.module(<span class=\"string\">'meng'</span>,[<span class=\"string\">'ionic'</span>,<span class=\"string\">'ngRoute'</span>]) ;</div><div class=\"line\"><span class=\"comment\">//异步加载功能模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> resolveController = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">names</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">     loadController : [<span class=\"string\">'$q'</span>,<span class=\"string\">'$rootScope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q,$rootScope</span>)</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">var</span> defer = $q.defer() ;</div><div class=\"line\">         <span class=\"built_in\">require</span>(names,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">             defer.resolve() ;</div><div class=\"line\">             $rootScope.$apply() ;</div><div class=\"line\">         &#125;) ;</div><div class=\"line\">         <span class=\"keyword\">return</span> defer.promise ;</div><div class=\"line\">     &#125;]</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//route config</span></div><div class=\"line\">meng.config(</div><div class=\"line\">  [<span class=\"string\">'$routeProvider'</span>,<span class=\"string\">'$controllerProvider'</span>,<span class=\"string\">'$provide'</span>,<span class=\"string\">'$compileProvider'</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider,$controllerProvider,$provide,$compileProvider</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  meng.register = &#123;</div><div class=\"line\">      controller: $controllerProvider.register,</div><div class=\"line\">      factory: $provide.factory,</div><div class=\"line\">      directive: $compileProvider.directive</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  $provide.decorator(<span class=\"string\">'$route'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$delegate</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> $route = $delegate ;</div><div class=\"line\">      $route.when = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> path, route </span>) </span>&#123;</div><div class=\"line\">          $routeProvider.when( path, route );</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> ;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">return</span> $route ;</div><div class=\"line\">  &#125;) ;</div><div class=\"line\"></div><div class=\"line\">  $routeProvider</div><div class=\"line\">      .when(<span class=\"string\">'/'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/main.html'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/info'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/info.html'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/task'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/task/task.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'taskController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'TaskModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/wallet'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/wallet/wallet.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'walletController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'WalletModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/note'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/note/note_list.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'noteController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'NoteModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .otherwise(<span class=\"string\">'/'</span>);</div><div class=\"line\">&#125;]) ;</div></pre></td></tr></table></figure></p>\n<p>上面的实现的关键就是<code>resolveController</code>方法，它在路由过程中利用require方法去加载功能对应的模块代码，在代码加载完成后进行路由跳转。上面省略了require的配置部分，<code>TaskModule</code>，<code>WalletModule</code>，<code>NoteModule</code>分别对于task.js，wallet.js和note.js三个文件。<br>上面代码中还解决了延迟加载中的另一个问题，angular中路由配置是通过<code>$routeProvider</code>完成的，但是这个服务在config的时候才能获取，在App启动之后是无法获取进行路由配置的，而<code>$route</code>对象是随时都可以获取的，所以这里在config过程中对利用angular提供的装饰方法对<code>$route</code>进行了扩展，增加了一个when方法指向<code>$routeProvider</code>的<code>when</code>方法，这样就可以在其他地方对路由进行配置。<br>通过上面的方法进行加载拆分有一个问题，它并没有很好的利用angular中模块化的特性，为了延迟加载功能不得不把原来分为三个module的代码都合并到一个module中，这样破坏了模块的独立性，如何在angular的module上进行延迟加载我还在寻找方法。</p>\n<p>##数据缓存<br>高响应是单页面应用的一大优势，这是因为单页面应用会尽可能少的刷新页面。除了通过减少刷新来提高响应以外，减少不必要的数据交互也是一个关键。而为了减少不必要的数据交互，对数据进行缓存是很有必要的。在首次请求数据返回之后，将数据缓存下来，在下一次请求数据是先在缓存中查找，如果没有再去请求服务器数据，在这个过程中我们必须要保证缓存的数据与服务器数据保持同步，所以在进行增删改的时候需要同时对本地和服务器的数据进行增删改。而我在开发过程中把这部分功能实现放在Model中，这样向上隐藏内部的数据层实现。在数据缓存这方面大家如果有更好的办法，欢迎交流。</p>\n<p>##离线存储<br>HTML5中的ApplicationCache离线存储是一个很好的提高App加载速度的途径，但是它也会给开发过程中带来一些不便，经常出现更新资源但是没有更新manifest文件带来的失误，而且希望更新生效需要进行两次页面刷新，这是比较不方便的。所以这个东西好用确实好用，只是加入离线存储应该放在开发过程的最后，在完成功能实现的前提下再把ApplicationCache加上去，这样可以避免它给开发过程中带来的不便。</p>\n<p>##小结<br>上面所说的三个问题只是目前遇到的主要的三个问题，App还在改进中。对于angular的使用还不够熟练，对于单页面中的组织结构划分和模块化的理解还不够透彻，除了上面所说的问题以外还有几个问题有待继续钻研，比如如何更高效的处理数据缓存，移动设备上点击的击穿现象，还有CSS动画的问题，总之就是多动手多思考少吃零食多睡觉。<br>PS:做了这个App之后发现自己真是不适合做设计，改了又改界面才勉强达到我家女神的要求，再接再厉吧。</p>\n","excerpt":"<p>利用寒假的时间给我家女神做了一个WebApp作为情人节礼物，一为表表忠心，二为练练手，在过程中也发现一些问题，在此总结总结。这里面除了angular方面的问题，还有一些单页面应用开发过程中的问题。<br>","more":"</p>\n<p>##加载优化<br>WebApp第一个版本完成之后兴高采烈的打开浏览器测试，结果Chrome的加载时间让我大跌眼镜，整整用了八秒钟的时间首页在显示出来，这明显是不可接受的。所以必须进行拆分加载。整个WebApp分为一个首页和三个功能模块，所以很自然把三个模块拆分出来，优先加载首页，在点击导航的时候再依次加载对应模块代码。<br>功能模块的延迟加载实际上就是与功能有关的控制器，服务和路由的延迟加载，所以在拆分加载中遇到的问题就是来自这些方面。首先常用的<code>module.controller</code>的controller定义方式无法满足App启动之后的controller动态定义，也就是说如果在angular启动了App之后再使用<code>module.controller</code>的方式定义controller是无效的，仍然会报controller undefined的错误。这时候就需要使用<code>$controllerProvider</code>的<code>register</code>方法来动态定义controller。功能模块的异步加载自然而然想到了<code>requirejs</code>,具体实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> meng = angular.module(<span class=\"string\">'meng'</span>,[<span class=\"string\">'ionic'</span>,<span class=\"string\">'ngRoute'</span>]) ;</div><div class=\"line\"><span class=\"comment\">//异步加载功能模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> resolveController = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">names</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">     loadController : [<span class=\"string\">'$q'</span>,<span class=\"string\">'$rootScope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q,$rootScope</span>)</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">var</span> defer = $q.defer() ;</div><div class=\"line\">         <span class=\"built_in\">require</span>(names,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">             defer.resolve() ;</div><div class=\"line\">             $rootScope.$apply() ;</div><div class=\"line\">         &#125;) ;</div><div class=\"line\">         <span class=\"keyword\">return</span> defer.promise ;</div><div class=\"line\">     &#125;]</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//route config</span></div><div class=\"line\">meng.config(</div><div class=\"line\">  [<span class=\"string\">'$routeProvider'</span>,<span class=\"string\">'$controllerProvider'</span>,<span class=\"string\">'$provide'</span>,<span class=\"string\">'$compileProvider'</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider,$controllerProvider,$provide,$compileProvider</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  meng.register = &#123;</div><div class=\"line\">      controller: $controllerProvider.register,</div><div class=\"line\">      factory: $provide.factory,</div><div class=\"line\">      directive: $compileProvider.directive</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  $provide.decorator(<span class=\"string\">'$route'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$delegate</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> $route = $delegate ;</div><div class=\"line\">      $route.when = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> path, route </span>) </span>&#123;</div><div class=\"line\">          $routeProvider.when( path, route );</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> ;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">return</span> $route ;</div><div class=\"line\">  &#125;) ;</div><div class=\"line\"></div><div class=\"line\">  $routeProvider</div><div class=\"line\">      .when(<span class=\"string\">'/'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/main.html'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/info'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/info.html'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/task'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/task/task.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'taskController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'TaskModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/wallet'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/wallet/wallet.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'walletController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'WalletModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/note'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/note/note_list.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'noteController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'NoteModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .otherwise(<span class=\"string\">'/'</span>);</div><div class=\"line\">&#125;]) ;</div></pre></td></tr></table></figure></p>\n<p>上面的实现的关键就是<code>resolveController</code>方法，它在路由过程中利用require方法去加载功能对应的模块代码，在代码加载完成后进行路由跳转。上面省略了require的配置部分，<code>TaskModule</code>，<code>WalletModule</code>，<code>NoteModule</code>分别对于task.js，wallet.js和note.js三个文件。<br>上面代码中还解决了延迟加载中的另一个问题，angular中路由配置是通过<code>$routeProvider</code>完成的，但是这个服务在config的时候才能获取，在App启动之后是无法获取进行路由配置的，而<code>$route</code>对象是随时都可以获取的，所以这里在config过程中对利用angular提供的装饰方法对<code>$route</code>进行了扩展，增加了一个when方法指向<code>$routeProvider</code>的<code>when</code>方法，这样就可以在其他地方对路由进行配置。<br>通过上面的方法进行加载拆分有一个问题，它并没有很好的利用angular中模块化的特性，为了延迟加载功能不得不把原来分为三个module的代码都合并到一个module中，这样破坏了模块的独立性，如何在angular的module上进行延迟加载我还在寻找方法。</p>\n<p>##数据缓存<br>高响应是单页面应用的一大优势，这是因为单页面应用会尽可能少的刷新页面。除了通过减少刷新来提高响应以外，减少不必要的数据交互也是一个关键。而为了减少不必要的数据交互，对数据进行缓存是很有必要的。在首次请求数据返回之后，将数据缓存下来，在下一次请求数据是先在缓存中查找，如果没有再去请求服务器数据，在这个过程中我们必须要保证缓存的数据与服务器数据保持同步，所以在进行增删改的时候需要同时对本地和服务器的数据进行增删改。而我在开发过程中把这部分功能实现放在Model中，这样向上隐藏内部的数据层实现。在数据缓存这方面大家如果有更好的办法，欢迎交流。</p>\n<p>##离线存储<br>HTML5中的ApplicationCache离线存储是一个很好的提高App加载速度的途径，但是它也会给开发过程中带来一些不便，经常出现更新资源但是没有更新manifest文件带来的失误，而且希望更新生效需要进行两次页面刷新，这是比较不方便的。所以这个东西好用确实好用，只是加入离线存储应该放在开发过程的最后，在完成功能实现的前提下再把ApplicationCache加上去，这样可以避免它给开发过程中带来的不便。</p>\n<p>##小结<br>上面所说的三个问题只是目前遇到的主要的三个问题，App还在改进中。对于angular的使用还不够熟练，对于单页面中的组织结构划分和模块化的理解还不够透彻，除了上面所说的问题以外还有几个问题有待继续钻研，比如如何更高效的处理数据缓存，移动设备上点击的击穿现象，还有CSS动画的问题，总之就是多动手多思考少吃零食多睡觉。<br>PS:做了这个App之后发现自己真是不适合做设计，改了又改界面才勉强达到我家女神的要求，再接再厉吧。</p>"},{"title":"再谈Javascript原型继承","date":"2014-11-09T06:45:50.000Z","_content":"真正意义上来说Javascript并不是一门面向对象的语言，没有提供传统的继承方式，但是它提供了一种原型继承的方式，利用自身提供的原型属性来实现继承。Javascript原型继承是一个被说烂掉了的话题，但是自己对于这个问题一直没有彻底理解，今天花了点时间又看了一遍《Javascript模式》中关于原型实现继承的几种方法，下面来一一说明下，在最后我根据自己的理解提出了一个关于继承比较完整的实现，如果大家有不同意见，欢迎建议。\n<!-- more -->\n## 原型与原型链\n说原型继承之前还是要先说说原型和原型链，毕竟这是实现原型继承的基础。\n在Javascript中，每个函数都有一个原型属性`prototype`指向自身的原型，而由这个函数创建的对象也有一个`__proto__`属性指向这个原型，而函数的原型是一个对象，所以这个对象也会有一个`__proto`__指向自己的原型，这样逐层深入直到`Object`对象的原型，这样就形成了原型链。下面这张图很好的解释了Javascript中的原型和原型链的关系。\n![图片描述][1]\n\n\n每个函数都是Function函数创建的对象，所以每个函数也有一个`__proto__`属性指向Function函数的原型。这里需要指出的是，真正形成原型链的是每个对象的`__proto__`属性，而不是函数的`prototype`属性，这是很重要的。\n## 原型继承\n### 基本模式\n```javascript\nvar Parent = function(){\n  this.name = 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(){\n  this.name = 'child' ;\n} ;\nChild.prototype = new Parent() ;\n\nvar parent = new Parent() ;\nvar child = new Child() ;\n\nconsole.log(parent.getName()) ; //parent\nconsole.log(child.getName()) ; //child\n```\n这种是最简单实现原型继承的方法，直接把父类的对象赋值给子类构造函数的原型，这样子类的对象就可以访问到父类以及父类构造函数的`prototype`中的属性。 这种方法的原型继承图如下：\n![图片描述][2]\n\n这种方法的优点很明显，实现十分简单，不需要任何特殊的操作；同时缺点也很明显，如果子类需要做跟父类构造函数中相同的初始化动作，那么就得在子类构造函数中再重复一遍父类中的操作：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  this.name = name || 'child' ;\n} ;\nChild.prototype = new Parent() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n\n```\n上面这种情况还只是需要初始化`name`属性，如果初始化工作不断增加，这种方式是很不方便的。因此就有了下面一种改进的方式。\n### 借用构造函数\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nChild.prototype = new Parent() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n```\n上面这种方法在子类构造函数中通过`apply`调用父类的构造函数来进行相同的初始化工作，这样不管父类中做了多少初始化工作，子类也可以执行同样的初始化工作。但是上面这种实现还存在一个问题，父类构造函数被执行了两次，一次是在子类构造函数中，一次在赋值子类原型时，这是很多余的，所以我们还需要做一个改进：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nChild.prototype = Parent.prototype ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n```\n这样我们就只需要在子类构造函数中执行一次父类的构造函数，同时又可以继承父类原型中的属性，这也比较符合原型的初衷，就是把需要复用的内容放在原型中，我们也只是继承了原型中可复用的内容。上面这种方式的原型图如下：\n![图片描述][3]\n\n### 临时构造函数模式(圣杯模式)\n上面借用构造函数模式最后改进的版本还是存在问题，它把父类的原型直接赋值给子类的原型，这就会造成一个问题，就是如果对子类的原型做了修改，那么这个修改同时也会影响到父类的原型，进而影响父类对象，这个肯定不是大家所希望看到的。为了解决这个问题就有了临时构造函数模式。\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nvar F = new Function(){} ;\nF.prototype = Parent.prototype ;\nChild.prototype = new F() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n```\n该方法的原型继承图如下：\n![图片描述][4]\n很容易可以看出，通过在父类原型和子类原型之间加入一个临时的构造函数`F`，切断了子类原型和父类原型之间的联系，这样当子类原型做修改时就不会影响到父类原型。\n\n### 我的方法\n《Javascript模式》中到圣杯模式就结束了，可是不管上面哪一种方法都有一个不容易被发现的问题。大家可以看到我在'Parent'的`prototype`属性中加入了一个`obj`对象字面量属性，但是一直都没有用。我们在圣杯模式的基础上来看看下面这种情况：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nvar F = new Function(){} ;\nF.prototype = Parent.prototype ;\nChild.prototype = new F() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(child.obj.a) ; //1\nconsole.log(parent.obj.a) ; //1\nchild.obj.a = 2 ;\nconsole.log(child.obj.a) ; //2\nconsole.log(parent.obj.a) ; //2\n```\n在上面这种情况中，当我修改`child`对象`obj.a`的时候，同时父类的原型中的`obj.a`也会被修改，这就发生了和共享原型同样的问题。出现这个情况是因为当访问`child.obj.a`的时候，我们会沿着原型链一直找到父类的`prototype`中，然后找到了`obj`属性，然后对`obj.a`进行修改。再看看下面这种情况：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nvar F = new Function(){} ;\nF.prototype = Parent.prototype ;\nChild.prototype = new F() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(child.obj.a) ; //1\nconsole.log(parent.obj.a) ; //1\nchild.obj.a = 2 ;\nconsole.log(child.obj.a) ; //2\nconsole.log(parent.obj.a) ; //2\n```\n这里有一个关键的问题，当对象访问原型中的属性时，原型中的属性对于对象来说是只读的，也就是说`child`对象可以读取`obj`对象，但是无法修改原型中`obj`对象引用，所以当`child`修改`obj`的时候并不会对原型中的`obj`产生影响，它只是在自身对象添加了一个`obj`属性，覆盖了父类原型中的`obj`属性。而当`child`对象修改`obj.a`时，它先读取了原型中`obj`的引用，这时候`child.obj`和`Parent.prototype.obj`是指向同一个对象的，所以`child`对`obj.a`的修改会影响到`Parent.prototype.obj.a`的值，进而影响父类的对象。`AngularJS`中关于`$scope`嵌套的继承方式就是模范Javasript中的原型继承来实现的。\n根据上面的描述，只要子类对象中访问到的原型跟父类原型是同一个对象，那么就会出现上面这种情况，所以我们可以对父类原型进行拷贝然后再赋值给子类原型，这样当子类修改原型中的属性时就只是修改父类原型的一个拷贝，并不会影响到父类原型。具体实现如下：\n```javascript\nvar deepClone = function(source,target){\n  source = source || {} ;\n  target = target || {};\n  var toStr = Object.prototype.toString ,\n      arrStr = '[object array]' ;\n  for(var i in source){\n      if(source.hasOwnProperty(i)){\n          var item = source[i] ;\n          if(typeof item === 'object'){\n              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : {} ;\n              deepClone(item,target[i]) ;    \n          }else{\n              target[i] = item;\n          }\n      }\n  }\n  return target ;\n} ;\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : '1'} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nChild.prototype = deepClone(Parent.prototype) ;\n\nvar child = new Child('child') ;\nvar parent = new Parent('parent') ;\n\nconsole.log(child.obj.a) ; //1\nconsole.log(parent.obj.a) ; //1\nchild.obj.a = '2' ;\nconsole.log(child.obj.a) ; //2\nconsole.log(parent.obj.a) ; //1\n```\n综合上面所有的考虑，Javascript继承的具体实现如下，这里只考虑了Child和Parent都是函数的情况下：\n```javascript\nvar deepClone = function(source,target){\n  source = source || {} ;\n  target = target || {};\n  var toStr = Object.prototype.toString ,\n      arrStr = '[object array]' ;\n  for(var i in source){\n      if(source.hasOwnProperty(i)){\n          var item = source[i] ;\n          if(typeof item === 'object'){\n              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : {} ;\n              deepClone(item,target[i]) ;    \n          }else{\n              target[i] = item;\n          }\n      }\n  }\n  return target ;\n} ;\n\nvar extend = function(Parent,Child){\n  Child = Child || function(){} ;\n  if(Parent === undefined)\n      return Child ;\n  //借用父类构造函数\n  Child = function(){\n      Parent.apply(this,argument) ;\n  } ;\n  //通过深拷贝继承父类原型    \n  Child.prototype = deepClone(Parent.prototype) ;\n  //重置constructor属性\n  Child.prototype.constructor = Child ;\n} ;\n\n```\n\n## 总结\n说了这么多，其实Javascript中实现继承是十分灵活多样的，并没有一种最好的方法，需要根据不同的需求实现不同方式的继承，最重要的是要理解Javascript中实现继承的原理，也就是原型和原型链的问题，只要理解了这些，自己实现继承就可以游刃有余。\n\n\n[1]: https://segmentfault.com/img/bVco7f\n[2]: https://segmentfault.com/img/bVdnzS\n[3]: https://segmentfault.com/img/bVdnzU\n[4]: https://segmentfault.com/img/bVdnzV\n","source":"_posts/talk-about-javascript-prototype-inheritance.md","raw":"title: 再谈Javascript原型继承\ndate: 2014-11-09 14:45:50\ntags: ['javascript']\n---\n真正意义上来说Javascript并不是一门面向对象的语言，没有提供传统的继承方式，但是它提供了一种原型继承的方式，利用自身提供的原型属性来实现继承。Javascript原型继承是一个被说烂掉了的话题，但是自己对于这个问题一直没有彻底理解，今天花了点时间又看了一遍《Javascript模式》中关于原型实现继承的几种方法，下面来一一说明下，在最后我根据自己的理解提出了一个关于继承比较完整的实现，如果大家有不同意见，欢迎建议。\n<!-- more -->\n## 原型与原型链\n说原型继承之前还是要先说说原型和原型链，毕竟这是实现原型继承的基础。\n在Javascript中，每个函数都有一个原型属性`prototype`指向自身的原型，而由这个函数创建的对象也有一个`__proto__`属性指向这个原型，而函数的原型是一个对象，所以这个对象也会有一个`__proto`__指向自己的原型，这样逐层深入直到`Object`对象的原型，这样就形成了原型链。下面这张图很好的解释了Javascript中的原型和原型链的关系。\n![图片描述][1]\n\n\n每个函数都是Function函数创建的对象，所以每个函数也有一个`__proto__`属性指向Function函数的原型。这里需要指出的是，真正形成原型链的是每个对象的`__proto__`属性，而不是函数的`prototype`属性，这是很重要的。\n## 原型继承\n### 基本模式\n```javascript\nvar Parent = function(){\n  this.name = 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(){\n  this.name = 'child' ;\n} ;\nChild.prototype = new Parent() ;\n\nvar parent = new Parent() ;\nvar child = new Child() ;\n\nconsole.log(parent.getName()) ; //parent\nconsole.log(child.getName()) ; //child\n```\n这种是最简单实现原型继承的方法，直接把父类的对象赋值给子类构造函数的原型，这样子类的对象就可以访问到父类以及父类构造函数的`prototype`中的属性。 这种方法的原型继承图如下：\n![图片描述][2]\n\n这种方法的优点很明显，实现十分简单，不需要任何特殊的操作；同时缺点也很明显，如果子类需要做跟父类构造函数中相同的初始化动作，那么就得在子类构造函数中再重复一遍父类中的操作：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  this.name = name || 'child' ;\n} ;\nChild.prototype = new Parent() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n\n```\n上面这种情况还只是需要初始化`name`属性，如果初始化工作不断增加，这种方式是很不方便的。因此就有了下面一种改进的方式。\n### 借用构造函数\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nChild.prototype = new Parent() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n```\n上面这种方法在子类构造函数中通过`apply`调用父类的构造函数来进行相同的初始化工作，这样不管父类中做了多少初始化工作，子类也可以执行同样的初始化工作。但是上面这种实现还存在一个问题，父类构造函数被执行了两次，一次是在子类构造函数中，一次在赋值子类原型时，这是很多余的，所以我们还需要做一个改进：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nChild.prototype = Parent.prototype ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n```\n这样我们就只需要在子类构造函数中执行一次父类的构造函数，同时又可以继承父类原型中的属性，这也比较符合原型的初衷，就是把需要复用的内容放在原型中，我们也只是继承了原型中可复用的内容。上面这种方式的原型图如下：\n![图片描述][3]\n\n### 临时构造函数模式(圣杯模式)\n上面借用构造函数模式最后改进的版本还是存在问题，它把父类的原型直接赋值给子类的原型，这就会造成一个问题，就是如果对子类的原型做了修改，那么这个修改同时也会影响到父类的原型，进而影响父类对象，这个肯定不是大家所希望看到的。为了解决这个问题就有了临时构造函数模式。\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nvar F = new Function(){} ;\nF.prototype = Parent.prototype ;\nChild.prototype = new F() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(parent.getName()) ; //myParent\nconsole.log(child.getName()) ; //myChild\n```\n该方法的原型继承图如下：\n![图片描述][4]\n很容易可以看出，通过在父类原型和子类原型之间加入一个临时的构造函数`F`，切断了子类原型和父类原型之间的联系，这样当子类原型做修改时就不会影响到父类原型。\n\n### 我的方法\n《Javascript模式》中到圣杯模式就结束了，可是不管上面哪一种方法都有一个不容易被发现的问题。大家可以看到我在'Parent'的`prototype`属性中加入了一个`obj`对象字面量属性，但是一直都没有用。我们在圣杯模式的基础上来看看下面这种情况：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nvar F = new Function(){} ;\nF.prototype = Parent.prototype ;\nChild.prototype = new F() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(child.obj.a) ; //1\nconsole.log(parent.obj.a) ; //1\nchild.obj.a = 2 ;\nconsole.log(child.obj.a) ; //2\nconsole.log(parent.obj.a) ; //2\n```\n在上面这种情况中，当我修改`child`对象`obj.a`的时候，同时父类的原型中的`obj.a`也会被修改，这就发生了和共享原型同样的问题。出现这个情况是因为当访问`child.obj.a`的时候，我们会沿着原型链一直找到父类的`prototype`中，然后找到了`obj`属性，然后对`obj.a`进行修改。再看看下面这种情况：\n```javascript\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : 1} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nvar F = new Function(){} ;\nF.prototype = Parent.prototype ;\nChild.prototype = new F() ;\n\nvar parent = new Parent('myParent') ;\nvar child = new Child('myChild') ;\n\nconsole.log(child.obj.a) ; //1\nconsole.log(parent.obj.a) ; //1\nchild.obj.a = 2 ;\nconsole.log(child.obj.a) ; //2\nconsole.log(parent.obj.a) ; //2\n```\n这里有一个关键的问题，当对象访问原型中的属性时，原型中的属性对于对象来说是只读的，也就是说`child`对象可以读取`obj`对象，但是无法修改原型中`obj`对象引用，所以当`child`修改`obj`的时候并不会对原型中的`obj`产生影响，它只是在自身对象添加了一个`obj`属性，覆盖了父类原型中的`obj`属性。而当`child`对象修改`obj.a`时，它先读取了原型中`obj`的引用，这时候`child.obj`和`Parent.prototype.obj`是指向同一个对象的，所以`child`对`obj.a`的修改会影响到`Parent.prototype.obj.a`的值，进而影响父类的对象。`AngularJS`中关于`$scope`嵌套的继承方式就是模范Javasript中的原型继承来实现的。\n根据上面的描述，只要子类对象中访问到的原型跟父类原型是同一个对象，那么就会出现上面这种情况，所以我们可以对父类原型进行拷贝然后再赋值给子类原型，这样当子类修改原型中的属性时就只是修改父类原型的一个拷贝，并不会影响到父类原型。具体实现如下：\n```javascript\nvar deepClone = function(source,target){\n  source = source || {} ;\n  target = target || {};\n  var toStr = Object.prototype.toString ,\n      arrStr = '[object array]' ;\n  for(var i in source){\n      if(source.hasOwnProperty(i)){\n          var item = source[i] ;\n          if(typeof item === 'object'){\n              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : {} ;\n              deepClone(item,target[i]) ;    \n          }else{\n              target[i] = item;\n          }\n      }\n  }\n  return target ;\n} ;\nvar Parent = function(name){\n  this.name = name || 'parent' ;\n} ;\nParent.prototype.getName = function(){\n  return this.name ;\n} ;\nParent.prototype.obj = {a : '1'} ;\n\nvar Child = function(name){\n  Parent.apply(this,arguments) ;\n} ;\nChild.prototype = deepClone(Parent.prototype) ;\n\nvar child = new Child('child') ;\nvar parent = new Parent('parent') ;\n\nconsole.log(child.obj.a) ; //1\nconsole.log(parent.obj.a) ; //1\nchild.obj.a = '2' ;\nconsole.log(child.obj.a) ; //2\nconsole.log(parent.obj.a) ; //1\n```\n综合上面所有的考虑，Javascript继承的具体实现如下，这里只考虑了Child和Parent都是函数的情况下：\n```javascript\nvar deepClone = function(source,target){\n  source = source || {} ;\n  target = target || {};\n  var toStr = Object.prototype.toString ,\n      arrStr = '[object array]' ;\n  for(var i in source){\n      if(source.hasOwnProperty(i)){\n          var item = source[i] ;\n          if(typeof item === 'object'){\n              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : {} ;\n              deepClone(item,target[i]) ;    \n          }else{\n              target[i] = item;\n          }\n      }\n  }\n  return target ;\n} ;\n\nvar extend = function(Parent,Child){\n  Child = Child || function(){} ;\n  if(Parent === undefined)\n      return Child ;\n  //借用父类构造函数\n  Child = function(){\n      Parent.apply(this,argument) ;\n  } ;\n  //通过深拷贝继承父类原型    \n  Child.prototype = deepClone(Parent.prototype) ;\n  //重置constructor属性\n  Child.prototype.constructor = Child ;\n} ;\n\n```\n\n## 总结\n说了这么多，其实Javascript中实现继承是十分灵活多样的，并没有一种最好的方法，需要根据不同的需求实现不同方式的继承，最重要的是要理解Javascript中实现继承的原理，也就是原型和原型链的问题，只要理解了这些，自己实现继承就可以游刃有余。\n\n\n[1]: https://segmentfault.com/img/bVco7f\n[2]: https://segmentfault.com/img/bVdnzS\n[3]: https://segmentfault.com/img/bVdnzU\n[4]: https://segmentfault.com/img/bVdnzV\n","slug":"talk-about-javascript-prototype-inheritance","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvku000p0pov2riid8p6","content":"<p>真正意义上来说Javascript并不是一门面向对象的语言，没有提供传统的继承方式，但是它提供了一种原型继承的方式，利用自身提供的原型属性来实现继承。Javascript原型继承是一个被说烂掉了的话题，但是自己对于这个问题一直没有彻底理解，今天花了点时间又看了一遍《Javascript模式》中关于原型实现继承的几种方法，下面来一一说明下，在最后我根据自己的理解提出了一个关于继承比较完整的实现，如果大家有不同意见，欢迎建议。<br><a id=\"more\"></a></p>\n<h2 id=\"原型与原型链\"><a href=\"#原型与原型链\" class=\"headerlink\" title=\"原型与原型链\"></a>原型与原型链</h2><p>说原型继承之前还是要先说说原型和原型链，毕竟这是实现原型继承的基础。<br>在Javascript中，每个函数都有一个原型属性<code>prototype</code>指向自身的原型，而由这个函数创建的对象也有一个<code>__proto__</code>属性指向这个原型，而函数的原型是一个对象，所以这个对象也会有一个<code>__proto</code>__指向自己的原型，这样逐层深入直到<code>Object</code>对象的原型，这样就形成了原型链。下面这张图很好的解释了Javascript中的原型和原型链的关系。<br><img src=\"https://segmentfault.com/img/bVco7f\" alt=\"图片描述\"></p>\n<p>每个函数都是Function函数创建的对象，所以每个函数也有一个<code>__proto__</code>属性指向Function函数的原型。这里需要指出的是，真正形成原型链的是每个对象的<code>__proto__</code>属性，而不是函数的<code>prototype</code>属性，这是很重要的。</p>\n<h2 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h2><h3 id=\"基本模式\"><a href=\"#基本模式\" class=\"headerlink\" title=\"基本模式\"></a>基本模式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'child'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//parent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//child</span></div></pre></td></tr></table></figure>\n<p>这种是最简单实现原型继承的方法，直接把父类的对象赋值给子类构造函数的原型，这样子类的对象就可以访问到父类以及父类构造函数的<code>prototype</code>中的属性。 这种方法的原型继承图如下：<br><img src=\"https://segmentfault.com/img/bVdnzS\" alt=\"图片描述\"></p>\n<p>这种方法的优点很明显，实现十分简单，不需要任何特殊的操作；同时缺点也很明显，如果子类需要做跟父类构造函数中相同的初始化动作，那么就得在子类构造函数中再重复一遍父类中的操作：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'child'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure></p>\n<p>上面这种情况还只是需要初始化<code>name</code>属性，如果初始化工作不断增加，这种方式是很不方便的。因此就有了下面一种改进的方式。</p>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure>\n<p>上面这种方法在子类构造函数中通过<code>apply</code>调用父类的构造函数来进行相同的初始化工作，这样不管父类中做了多少初始化工作，子类也可以执行同样的初始化工作。但是上面这种实现还存在一个问题，父类构造函数被执行了两次，一次是在子类构造函数中，一次在赋值子类原型时，这是很多余的，所以我们还需要做一个改进：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = Parent.prototype ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure></p>\n<p>这样我们就只需要在子类构造函数中执行一次父类的构造函数，同时又可以继承父类原型中的属性，这也比较符合原型的初衷，就是把需要复用的内容放在原型中，我们也只是继承了原型中可复用的内容。上面这种方式的原型图如下：<br><img src=\"https://segmentfault.com/img/bVdnzU\" alt=\"图片描述\"></p>\n<h3 id=\"临时构造函数模式-圣杯模式\"><a href=\"#临时构造函数模式-圣杯模式\" class=\"headerlink\" title=\"临时构造函数模式(圣杯模式)\"></a>临时构造函数模式(圣杯模式)</h3><p>上面借用构造函数模式最后改进的版本还是存在问题，它把父类的原型直接赋值给子类的原型，这就会造成一个问题，就是如果对子类的原型做了修改，那么这个修改同时也会影响到父类的原型，进而影响父类对象，这个肯定不是大家所希望看到的。为了解决这个问题就有了临时构造函数模式。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;&#125; ;</div><div class=\"line\">F.prototype = Parent.prototype ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure></p>\n<p>该方法的原型继承图如下：<br><img src=\"https://segmentfault.com/img/bVdnzV\" alt=\"图片描述\"><br>很容易可以看出，通过在父类原型和子类原型之间加入一个临时的构造函数<code>F</code>，切断了子类原型和父类原型之间的联系，这样当子类原型做修改时就不会影响到父类原型。</p>\n<h3 id=\"我的方法\"><a href=\"#我的方法\" class=\"headerlink\" title=\"我的方法\"></a>我的方法</h3><p>《Javascript模式》中到圣杯模式就结束了，可是不管上面哪一种方法都有一个不容易被发现的问题。大家可以看到我在’Parent’的<code>prototype</code>属性中加入了一个<code>obj</code>对象字面量属性，但是一直都没有用。我们在圣杯模式的基础上来看看下面这种情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;&#125; ;</div><div class=\"line\">F.prototype = Parent.prototype ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\">child.obj.a = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>在上面这种情况中，当我修改<code>child</code>对象<code>obj.a</code>的时候，同时父类的原型中的<code>obj.a</code>也会被修改，这就发生了和共享原型同样的问题。出现这个情况是因为当访问<code>child.obj.a</code>的时候，我们会沿着原型链一直找到父类的<code>prototype</code>中，然后找到了<code>obj</code>属性，然后对<code>obj.a</code>进行修改。再看看下面这种情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;&#125; ;</div><div class=\"line\">F.prototype = Parent.prototype ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\">child.obj.a = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>这里有一个关键的问题，当对象访问原型中的属性时，原型中的属性对于对象来说是只读的，也就是说<code>child</code>对象可以读取<code>obj</code>对象，但是无法修改原型中<code>obj</code>对象引用，所以当<code>child</code>修改<code>obj</code>的时候并不会对原型中的<code>obj</code>产生影响，它只是在自身对象添加了一个<code>obj</code>属性，覆盖了父类原型中的<code>obj</code>属性。而当<code>child</code>对象修改<code>obj.a</code>时，它先读取了原型中<code>obj</code>的引用，这时候<code>child.obj</code>和<code>Parent.prototype.obj</code>是指向同一个对象的，所以<code>child</code>对<code>obj.a</code>的修改会影响到<code>Parent.prototype.obj.a</code>的值，进而影响父类的对象。<code>AngularJS</code>中关于<code>$scope</code>嵌套的继承方式就是模范Javasript中的原型继承来实现的。<br>根据上面的描述，只要子类对象中访问到的原型跟父类原型是同一个对象，那么就会出现上面这种情况，所以我们可以对父类原型进行拷贝然后再赋值给子类原型，这样当子类修改原型中的属性时就只是修改父类原型的一个拷贝，并不会影响到父类原型。具体实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deepClone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,target</span>)</span>&#123;</div><div class=\"line\">  source = source || &#123;&#125; ;</div><div class=\"line\">  target = target || &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> toStr = <span class=\"built_in\">Object</span>.prototype.toString ,</div><div class=\"line\">      arrStr = <span class=\"string\">'[object array]'</span> ;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(source.hasOwnProperty(i))&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> item = source[i] ;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item === <span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : &#123;&#125; ;</div><div class=\"line\">              deepClone(item,target[i]) ;    </div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              target[i] = item;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> target ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"string\">'1'</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = deepClone(Parent.prototype) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'child'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'parent'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\">child.obj.a = <span class=\"string\">'2'</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div></pre></td></tr></table></figure></p>\n<p>综合上面所有的考虑，Javascript继承的具体实现如下，这里只考虑了Child和Parent都是函数的情况下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deepClone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,target</span>)</span>&#123;</div><div class=\"line\">  source = source || &#123;&#125; ;</div><div class=\"line\">  target = target || &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> toStr = <span class=\"built_in\">Object</span>.prototype.toString ,</div><div class=\"line\">      arrStr = <span class=\"string\">'[object array]'</span> ;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(source.hasOwnProperty(i))&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> item = source[i] ;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item === <span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : &#123;&#125; ;</div><div class=\"line\">              deepClone(item,target[i]) ;    </div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              target[i] = item;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> target ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Parent,Child</span>)</span>&#123;</div><div class=\"line\">  Child = Child || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; ;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Parent === <span class=\"literal\">undefined</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> Child ;</div><div class=\"line\">  <span class=\"comment\">//借用父类构造函数</span></div><div class=\"line\">  Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      Parent.apply(<span class=\"keyword\">this</span>,argument) ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\">  <span class=\"comment\">//通过深拷贝继承父类原型    </span></div><div class=\"line\">  Child.prototype = deepClone(Parent.prototype) ;</div><div class=\"line\">  <span class=\"comment\">//重置constructor属性</span></div><div class=\"line\">  Child.prototype.constructor = Child ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>说了这么多，其实Javascript中实现继承是十分灵活多样的，并没有一种最好的方法，需要根据不同的需求实现不同方式的继承，最重要的是要理解Javascript中实现继承的原理，也就是原型和原型链的问题，只要理解了这些，自己实现继承就可以游刃有余。</p>\n","excerpt":"<p>真正意义上来说Javascript并不是一门面向对象的语言，没有提供传统的继承方式，但是它提供了一种原型继承的方式，利用自身提供的原型属性来实现继承。Javascript原型继承是一个被说烂掉了的话题，但是自己对于这个问题一直没有彻底理解，今天花了点时间又看了一遍《Javascript模式》中关于原型实现继承的几种方法，下面来一一说明下，在最后我根据自己的理解提出了一个关于继承比较完整的实现，如果大家有不同意见，欢迎建议。<br>","more":"</p>\n<h2 id=\"原型与原型链\"><a href=\"#原型与原型链\" class=\"headerlink\" title=\"原型与原型链\"></a>原型与原型链</h2><p>说原型继承之前还是要先说说原型和原型链，毕竟这是实现原型继承的基础。<br>在Javascript中，每个函数都有一个原型属性<code>prototype</code>指向自身的原型，而由这个函数创建的对象也有一个<code>__proto__</code>属性指向这个原型，而函数的原型是一个对象，所以这个对象也会有一个<code>__proto</code>__指向自己的原型，这样逐层深入直到<code>Object</code>对象的原型，这样就形成了原型链。下面这张图很好的解释了Javascript中的原型和原型链的关系。<br><img src=\"https://segmentfault.com/img/bVco7f\" alt=\"图片描述\"></p>\n<p>每个函数都是Function函数创建的对象，所以每个函数也有一个<code>__proto__</code>属性指向Function函数的原型。这里需要指出的是，真正形成原型链的是每个对象的<code>__proto__</code>属性，而不是函数的<code>prototype</code>属性，这是很重要的。</p>\n<h2 id=\"原型继承\"><a href=\"#原型继承\" class=\"headerlink\" title=\"原型继承\"></a>原型继承</h2><h3 id=\"基本模式\"><a href=\"#基本模式\" class=\"headerlink\" title=\"基本模式\"></a>基本模式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = <span class=\"string\">'child'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//parent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//child</span></div></pre></td></tr></table></figure>\n<p>这种是最简单实现原型继承的方法，直接把父类的对象赋值给子类构造函数的原型，这样子类的对象就可以访问到父类以及父类构造函数的<code>prototype</code>中的属性。 这种方法的原型继承图如下：<br><img src=\"https://segmentfault.com/img/bVdnzS\" alt=\"图片描述\"></p>\n<p>这种方法的优点很明显，实现十分简单，不需要任何特殊的操作；同时缺点也很明显，如果子类需要做跟父类构造函数中相同的初始化动作，那么就得在子类构造函数中再重复一遍父类中的操作：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'child'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure></p>\n<p>上面这种情况还只是需要初始化<code>name</code>属性，如果初始化工作不断增加，这种方式是很不方便的。因此就有了下面一种改进的方式。</p>\n<h3 id=\"借用构造函数\"><a href=\"#借用构造函数\" class=\"headerlink\" title=\"借用构造函数\"></a>借用构造函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure>\n<p>上面这种方法在子类构造函数中通过<code>apply</code>调用父类的构造函数来进行相同的初始化工作，这样不管父类中做了多少初始化工作，子类也可以执行同样的初始化工作。但是上面这种实现还存在一个问题，父类构造函数被执行了两次，一次是在子类构造函数中，一次在赋值子类原型时，这是很多余的，所以我们还需要做一个改进：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = Parent.prototype ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure></p>\n<p>这样我们就只需要在子类构造函数中执行一次父类的构造函数，同时又可以继承父类原型中的属性，这也比较符合原型的初衷，就是把需要复用的内容放在原型中，我们也只是继承了原型中可复用的内容。上面这种方式的原型图如下：<br><img src=\"https://segmentfault.com/img/bVdnzU\" alt=\"图片描述\"></p>\n<h3 id=\"临时构造函数模式-圣杯模式\"><a href=\"#临时构造函数模式-圣杯模式\" class=\"headerlink\" title=\"临时构造函数模式(圣杯模式)\"></a>临时构造函数模式(圣杯模式)</h3><p>上面借用构造函数模式最后改进的版本还是存在问题，它把父类的原型直接赋值给子类的原型，这就会造成一个问题，就是如果对子类的原型做了修改，那么这个修改同时也会影响到父类的原型，进而影响父类对象，这个肯定不是大家所希望看到的。为了解决这个问题就有了临时构造函数模式。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;&#125; ;</div><div class=\"line\">F.prototype = Parent.prototype ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.getName()) ; <span class=\"comment\">//myParent</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.getName()) ; <span class=\"comment\">//myChild</span></div></pre></td></tr></table></figure></p>\n<p>该方法的原型继承图如下：<br><img src=\"https://segmentfault.com/img/bVdnzV\" alt=\"图片描述\"><br>很容易可以看出，通过在父类原型和子类原型之间加入一个临时的构造函数<code>F</code>，切断了子类原型和父类原型之间的联系，这样当子类原型做修改时就不会影响到父类原型。</p>\n<h3 id=\"我的方法\"><a href=\"#我的方法\" class=\"headerlink\" title=\"我的方法\"></a>我的方法</h3><p>《Javascript模式》中到圣杯模式就结束了，可是不管上面哪一种方法都有一个不容易被发现的问题。大家可以看到我在’Parent’的<code>prototype</code>属性中加入了一个<code>obj</code>对象字面量属性，但是一直都没有用。我们在圣杯模式的基础上来看看下面这种情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;&#125; ;</div><div class=\"line\">F.prototype = Parent.prototype ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\">child.obj.a = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>在上面这种情况中，当我修改<code>child</code>对象<code>obj.a</code>的时候，同时父类的原型中的<code>obj.a</code>也会被修改，这就发生了和共享原型同样的问题。出现这个情况是因为当访问<code>child.obj.a</code>的时候，我们会沿着原型链一直找到父类的<code>prototype</code>中，然后找到了<code>obj</code>属性，然后对<code>obj.a</code>进行修改。再看看下面这种情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"number\">1</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> F = <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>()&#123;&#125; ;</div><div class=\"line\">F.prototype = Parent.prototype ;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> F() ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'myParent'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'myChild'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\">child.obj.a = <span class=\"number\">2</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>这里有一个关键的问题，当对象访问原型中的属性时，原型中的属性对于对象来说是只读的，也就是说<code>child</code>对象可以读取<code>obj</code>对象，但是无法修改原型中<code>obj</code>对象引用，所以当<code>child</code>修改<code>obj</code>的时候并不会对原型中的<code>obj</code>产生影响，它只是在自身对象添加了一个<code>obj</code>属性，覆盖了父类原型中的<code>obj</code>属性。而当<code>child</code>对象修改<code>obj.a</code>时，它先读取了原型中<code>obj</code>的引用，这时候<code>child.obj</code>和<code>Parent.prototype.obj</code>是指向同一个对象的，所以<code>child</code>对<code>obj.a</code>的修改会影响到<code>Parent.prototype.obj.a</code>的值，进而影响父类的对象。<code>AngularJS</code>中关于<code>$scope</code>嵌套的继承方式就是模范Javasript中的原型继承来实现的。<br>根据上面的描述，只要子类对象中访问到的原型跟父类原型是同一个对象，那么就会出现上面这种情况，所以我们可以对父类原型进行拷贝然后再赋值给子类原型，这样当子类修改原型中的属性时就只是修改父类原型的一个拷贝，并不会影响到父类原型。具体实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deepClone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,target</span>)</span>&#123;</div><div class=\"line\">  source = source || &#123;&#125; ;</div><div class=\"line\">  target = target || &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> toStr = <span class=\"built_in\">Object</span>.prototype.toString ,</div><div class=\"line\">      arrStr = <span class=\"string\">'[object array]'</span> ;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(source.hasOwnProperty(i))&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> item = source[i] ;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item === <span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : &#123;&#125; ;</div><div class=\"line\">              deepClone(item,target[i]) ;    </div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              target[i] = item;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> target ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> Parent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name || <span class=\"string\">'parent'</span> ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Parent.prototype.obj = &#123;a : <span class=\"string\">'1'</span>&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">  Parent.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\">Child.prototype = deepClone(Parent.prototype) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Child(<span class=\"string\">'child'</span>) ;</div><div class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent(<span class=\"string\">'parent'</span>) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div><div class=\"line\">child.obj.a = <span class=\"string\">'2'</span> ;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(child.obj.a) ; <span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(parent.obj.a) ; <span class=\"comment\">//1</span></div></pre></td></tr></table></figure></p>\n<p>综合上面所有的考虑，Javascript继承的具体实现如下，这里只考虑了Child和Parent都是函数的情况下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deepClone = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source,target</span>)</span>&#123;</div><div class=\"line\">  source = source || &#123;&#125; ;</div><div class=\"line\">  target = target || &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> toStr = <span class=\"built_in\">Object</span>.prototype.toString ,</div><div class=\"line\">      arrStr = <span class=\"string\">'[object array]'</span> ;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(source.hasOwnProperty(i))&#123;</div><div class=\"line\">          <span class=\"keyword\">var</span> item = source[i] ;</div><div class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> item === <span class=\"string\">'object'</span>)&#123;</div><div class=\"line\">              target[i] = (toStr.apply(item).toLowerCase() === arrStr) ? [] : &#123;&#125; ;</div><div class=\"line\">              deepClone(item,target[i]) ;    </div><div class=\"line\">          &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">              target[i] = item;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> target ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">Parent,Child</span>)</span>&#123;</div><div class=\"line\">  Child = Child || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; ;</div><div class=\"line\">  <span class=\"keyword\">if</span>(Parent === <span class=\"literal\">undefined</span>)</div><div class=\"line\">      <span class=\"keyword\">return</span> Child ;</div><div class=\"line\">  <span class=\"comment\">//借用父类构造函数</span></div><div class=\"line\">  Child = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      Parent.apply(<span class=\"keyword\">this</span>,argument) ;</div><div class=\"line\">  &#125; ;</div><div class=\"line\">  <span class=\"comment\">//通过深拷贝继承父类原型    </span></div><div class=\"line\">  Child.prototype = deepClone(Parent.prototype) ;</div><div class=\"line\">  <span class=\"comment\">//重置constructor属性</span></div><div class=\"line\">  Child.prototype.constructor = Child ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>说了这么多，其实Javascript中实现继承是十分灵活多样的，并没有一种最好的方法，需要根据不同的需求实现不同方式的继承，最重要的是要理解Javascript中实现继承的原理，也就是原型和原型链的问题，只要理解了这些，自己实现继承就可以游刃有余。</p>"},{"title":"CSS那些事","date":"2014-08-02T06:45:09.000Z","_content":"今天跟大家分享一下CSS中一些比较重要和比较容易被忽略的东西，开始吧。\n<!-- more -->\n# 样式优先级\n当你在不同地方不同的选择器中对同一个元素属性添加了不同的样式的时候，该如何判断最后哪个样式会作用到元素上呢？判断的依据就是样式的优先级。样式优先级的判断分为三个步骤：\n\n+ 首先，根据样式的来源和重要性进行分组，一共可以分成五组(优先级从高到低)\n\n  + 用户自定义样式中带!important的样式\n  + 作者样式中带!important的样式\n  + 作者样式\n  + 用户自定义样式\n  + 浏览器样式\n\n+ 然后，如果在第一步中无法分出胜负，那么就根据选择器的权重进行判断。\n每种CSS选择器都有各自的权重，权重从大到小排列分别是：\n\n  + ID选择器\n  + 类选择器，伪类选择器，属性选择器\n  + 标签选择器，伪元素选择器\n\n在计算样式优先级的时候除了考虑选择器的权重以外，当然还需要考虑内联样式和外联样式，很明显内联样式的优先级比外联的高，那么它的权重也大。综合这两种情况我们就有下面这样的计算方式：\n```javascript\n行内样式 1,0,0,0\nID选择器 0,n,0,0\n类选择器，伪类选择器，属性选择器 0,0,n,0\n标签选择器，伪元素选择器 0,0,0,n\n```\n在上面n代表对应选择器的个数。根据这个方法，每组选择器都会有一个这样的四位数来表示权重，哪个选择器的数字权重越大它们的样式优先级就越高。比如下面几组选择器的权重\n```javascript\ndiv .one{} 0,0,1,1\ndiv #one{} 0,1,0,1\ndiv a[href=\"one\"] #one{}0,1,1,2\n```\n在这一步计算样式优先级的时候有两个特殊情况，一个是通配符选择器它的权重是`0,0,0,0`，另一个是继承的样式没有优先级，也就是说它连0都没有。这两个特殊情况就会造成一种现象：\n```html\n#out *{\n    color:green;\n}\n#out #in{\n    color:black;\n}\n<div id=\"out\">\n    <div id=\"in\">\n        <div id=\"iin\">TEST</div>\n    </div>\n</div>\n```\n上面代码的结果是字体颜色为绿色而不是很多人想的黑色。在这段代码中，TEST有两个color样式，一个是#out *中的，一个是从#in中继承的，最后前者取得了胜利，就是因为继承的样式没有优先级，它连通配符都不如。所以说在重置样式的时候使用通配符不是一个好的习惯，因为它可能会带来一些奇怪的现象。\n\n+ 最后，如果第二步之后还是没办法区分出优先级的话，那么就很简单了，后出现的优先级更高。\n\n在平时的开发中，我们应该善用样式的优先级规则，不能一味的通过增加选择器权重来覆盖样式，这样长久之后会使得代码变得无法维护。\n\n### 参考\n1. http://www.smashingmagazine.com/2010/11/02/the-important-css-declaration-how-and-when-to-use-it/\n2. http://www.smashingmagazine.com/2010/04/07/css-specificity-and-inheritance/\n3. http://css-tricks.com/specifics-on-css-specificity/\n4. http://snook.ca/archives/html_and_css/understanding_c\n\n# 块级元素\n块级元素通常独占一行并且在正常流中垂直摆放，可以设置高度和宽度。块级元素在格式化的时候可以分为水平格式化和垂直格式化。\n在水平方向上，元素的所有横向宽度之和要等于包含块的宽度，也就是要满足下面的等式：\n`margin-left+border-left-width+padding-left+width+padding-right+border-right-right+margin-right=包含块的width`。\n当width为auto时，块级元素的宽度会填满整个包含块。当margin-left和margin-right出现auto时，会根据上面公式计算使得margin-left=margin-right，这也就是设置margin为auto时可以实现居中效果的原因。\n在垂直方向上，情况就比水平方向上要复杂，因为可能会出现外边距叠加的现象。\n当height为auto时，跟水平方向不同，height会根据内容的高度来计算。而margin-top和margin-bottom为auto时，会被设置为0。\n\n下面来说说垂直方向上外边距叠加的情况。首先，什么是外边距叠加？\n\n    外边距叠加是指在正常流中毗邻的两个以上块级元素在垂直方向上的外边距发生叠加的现象。\n根据上面的定义我们可以发生外边距叠加需要下面几个条件：\n1. 元素必须在正常流中，也就是说position不为absolute或fixed，并且没有浮动的元素\n2. 元素必须是块级元素，很明显在行内元素上设置上下外边距是没有效果的\n3. 发生外边距叠加的元素必须是毗邻的，也就是说两个元素是相邻的两个兄弟元素或者是父子关系的元素，而父子关系中必须是父元素和它的第一个子元素或者最后一个子元素。总结起来就是下面四种情况：\n\n+ 父元素的margin-top和它第一个子元素的margin-top\n+ 父元素的margin-bottom和它最后一个子元素的margin-bottom\n+ 元素的margin-bottom和它相邻的兄弟节点的margin-top\n+ 元素自身的margin-top和margin-bottom\n\n下面来看前三种情况：[DEMO](http://codepen.io/lakb248/pen/gyAxm/)\n很明显，父元素#out的上外边距和第一个子元素#first的上外边距发生了重叠；然后#first的下外边距和它的兄弟#last的上外边距发生了叠加；最后，父元素#out的下外边距和最后一个子元素#last的下外边距发生了叠加。\n对于外边距叠加，我觉得下面参考中smallni的总结很好，我就借用他的总结一下：\n\n+ 父元素和它的第一个子元素\n    + 父元素没有创建BFC\n    + 父子元素之间没有非空内容\n    + 父元素没有padding-top和border-top  \n+ 父元素和它的最后一个子元素\n    + 父元素没有创建BFC\n    + 父子元素之间没有非空内容\n    + 父元素没有padding-bottom和border-bottom\n    + 父元素的height为auto，min-height为0\n+ 兄弟元素之间\n    + 兄弟元素都不是float元素\n    + 兄弟元素都不是absolute元素\n    + 兄弟元素都不是inline-block元素\n\n根据上面的总结，我们也可以得出防止外边距叠加的方法：对于父子元素之间的情况，大多数情况下都是采用让父元素创建BFC的方式，对于BFC的概念大家可以google一下，这个也是CSS中一个很重要的概念，当然还有一个办法就是添加padding或border；而对于兄弟元素之间的情况，破坏那三条中间任意一条就可以了。\n讲了外边距叠加，那在发生外边距叠加的时候，元素之间的外边距该怎么计算了，这也需要分几种情况讨论。\n+ 如果发生叠加的外边距都是正值，那么就取两者中间最大的那个作为最后的边距\n+ 如果发生叠加的外边距都是负值，那么就取两者绝对值较大的那个然后进行负向位移\n+ 如果发生叠加的外边距有正有负，那么就把负值中间绝对值最大的那个和正值中最大的相加，最后得出的就是最后的边距\n最后在进行计算的时候，所有相邻的外边距应该一起参与计算，不能分别进行计算然后再加起来。比如下面的情况：\n```html\n<div style=\"margin:50px 0; background-color:green; width:50px;\">\n    <div style=\"margin:-60px 0;\">\n           <div style=\"margin:150px 0;\">A</div>\n    </div>\n</div>\n<div style=\"margin:-100px 0; background-color:green; width:50px;\">\n    <div style=\"margin:-120px 0;\">\n           <div style=\"margin:200px 0;\">B</div>\n    </div>\n</div>\n```\n正确的计算A和B之间边距的方法应该是，取出所有负值然后找绝对值最大的也就是-120，然后在找出正值中最大的200，最后把这两个边距相加得出80，也就是最后A和B之间的边距。\n\n### 参考\n1. http://www.smallni.com/collapsing-margin/\n2. http://www.w3help.org/zh-cn/kb/006/\n\n# 行内元素\n行内元素在摆放的时候不会产生换行，也就是说行内元素在空间足够的情况下会出现在同一行中。行内元素有几个比较重要的概念：\n1. 对于行内元素设置高度和宽度是无效的\n2. 内容区：由内容高度所决定的区域\n3. 行内框：对于非替换元素(`<a>`,`<span>`...)高度由line-height决定，对于替换元素(`<img>`)高度由内容和内外边距决定\n4. 内容区的上下加上line-height与font-size差值的一半就形成了行内框\n5. vertical-align是根据行内框进行对其的\n记住上面几个概念，对于行内元素的布局应该就能明白了。\n\n# 边距和边框\n## 外边距\n外边距是什么我就不多说了，这里提几个比较容易误会的地方。\n首先，当外边距是百分比时，它是根据父元素的宽度进行计算的，上下边距也是根据这个值进行计算。也就是说上下外边距的值也是以父元素的宽度为标准的。\n其次，大家有时候书写margin属性的时候都喜欢使用缩写的方式，写两个宽度或者一个，可是如果写上三个的话会怎么样呢？浏览器对于外边距的计算有下面几个规则：\n\n+ 当缺少下边距时，使用上边距\n+ 当缺少左边距时，使用右边距\n+ 当缺少右边距时，使用上边距\n\n用上面这三条规则就可以很好的解释边距缩写的原理了。这个原则对于所有边距和边框的缩写都适用。\n\n## 内边距\n对于内边距唯一要说的就是IE盒模型和W3C的盒模型的区别，在IE中padding和border是包括在元素width和height中的，而W3C的盒模型是不包括这两个的。还有一个问题就是内边距为百分比时的计算和内边距一样，都是以父元素的宽度为标准。\n\n## 边框\n边框有一个特点就是元素的背景会延续到边框，也就是说边框是覆盖在元素背景之上的。\n\n# 浮动和定位\n## 包含块\n元素的包含块就是包含元素的那个元素，但是对于不同的元素情况会不一样：\n\n+ 浮动元素的包含块是最近的块级元素祖先的内容区域\n+ 绝对定位元素的包含块是最近的有定位的祖先。如果这个祖先是块级元素，那么包含块就是块级元素的边框区域；如果是行内元素，那么包含块就是行内元素的内容区域。\n+ 相对定位和static定位的元素的包含块就是最近的块级元素或者行内元素的内容区域\n\n## 浮动\n\n+ 浮动元素会形成块级元素\n+ 浮动元素和块级元素重叠时，块级元素的背景在浮动元素下，而内容在上\n+ 浮动元素和行内元素重叠时，行内元素在上\n看[DEMO](http://codepen.io/lakb248/pen/LhCxw/)\n从上面例子很容易看出浮动元素和块级元素重叠的时候不同的现象。\n\n## 绝对定位\n+ 对于绝对定位在横向方向上也有一个计算公式：\n`left+(margin-left)+(border-left-width)+(padding-left)+width-(padding-right)+(border-right-width)+`\n`(margin-right)+right=包含块width`\n这个公式在同时指定了绝对定位并且还指定了外边距的情况下非常有用。\n\n+ 如果绝对定位不指定偏移，那么元素会怎么布局呢？很多人认为是相对于包含块进行定位，其实不是这样的。如果不指定偏移的话，元素会根据原来正常流中的位置进行定位。\n[DEMO](http://codepen.io/lakb248/pen/pKnxG/)\n如果你在上面添加一个left偏移，你会发现它是在正常流的情况下发生偏移的，只有同时指定了两个方向的偏移，才会根据包含块进行定位。\n\n+ 如果绝对定位的元素没有指定width和height那么我们可以通过设置偏移来对元素进行拉伸。\n[DEMO](http://codepen.io/lakb248/pen/syhnm/)\n通过修改偏移，你就可以控制元素的大小。\n\n+ 在同时具有margin和偏移的时候该怎么给元素定位呢？\n    + 非替换元素\n        + 如果left,right,width都为auto，那么按照正常流方式进行布局，并且把值为auto的margin-left和margin-right设为0\n        + 如果left,right,width都不为auto\n            + 如果margin-left和margin-right都为auto，那么根据公式把两个设为相同的长度；如果计算出的长度为负数，那么就把margin-left设为0\n            + 如果margin-lef或margin-right其中有一个为auto,那么根据公式计算出auto的值\n        + 其他情况，首先把值为auto的margin设为0\n            + 如果left不为auto，width根据内容计算值，其他值根据公式进行计算\n            + 如果width不为auto，首先按照正常流定位，然后根据公式计算margin的值\n            + 如果right不为auto，width根据内容计算，其他值根据公式进行计算\n            + 如果left,width不为auto，right根据公式计算\n            + 如果left,right不为auto，width的值根据公式计算\n            + 如果width,right不为auto，left根据公式计算\n    + 替换元素\n        + 宽度由内容区决定\n        + 如果left和right为auto，那么根据正常流定位\n        + 如果left或right为auto，则把对于的值为auto的margin改为0\n        + 如果此时，margin都是auto，那么根据公式计算平方剩余长度\n        + 如果这时候left还是auto，那么根据公式计算left的值\n上面这些计算原则就可以解释一个现象，就是之前在网上看到一种绝对居中的方法：\n[DEMO](http://codepen.io/lakb248/pen/Janfg/)\n这个方法把绝对定位元素的偏移都设为0，然后通过`margin:auto`来实现居中，这个方法用上面的原则就可以说通了。\n\n## 相对定位\n相对定位相对来说就比较容易了。就两个点：\n+ 偏移是根据元素本来在正常流中的位置计算的\n+ 相对定位会影响其他元素的定位，相对定位元素会占据它原来的空间\n\nPS:这篇博客大家看得可能有点痛苦，貌似现在SegmentFault不支持CodePen，不知道大家有没有什么办法可以做到。\n","source":"_posts/something-about-css.md","raw":"title: CSS那些事\ndate: 2014-08-02 14:45:09\ntags: ['css']\n---\n今天跟大家分享一下CSS中一些比较重要和比较容易被忽略的东西，开始吧。\n<!-- more -->\n# 样式优先级\n当你在不同地方不同的选择器中对同一个元素属性添加了不同的样式的时候，该如何判断最后哪个样式会作用到元素上呢？判断的依据就是样式的优先级。样式优先级的判断分为三个步骤：\n\n+ 首先，根据样式的来源和重要性进行分组，一共可以分成五组(优先级从高到低)\n\n  + 用户自定义样式中带!important的样式\n  + 作者样式中带!important的样式\n  + 作者样式\n  + 用户自定义样式\n  + 浏览器样式\n\n+ 然后，如果在第一步中无法分出胜负，那么就根据选择器的权重进行判断。\n每种CSS选择器都有各自的权重，权重从大到小排列分别是：\n\n  + ID选择器\n  + 类选择器，伪类选择器，属性选择器\n  + 标签选择器，伪元素选择器\n\n在计算样式优先级的时候除了考虑选择器的权重以外，当然还需要考虑内联样式和外联样式，很明显内联样式的优先级比外联的高，那么它的权重也大。综合这两种情况我们就有下面这样的计算方式：\n```javascript\n行内样式 1,0,0,0\nID选择器 0,n,0,0\n类选择器，伪类选择器，属性选择器 0,0,n,0\n标签选择器，伪元素选择器 0,0,0,n\n```\n在上面n代表对应选择器的个数。根据这个方法，每组选择器都会有一个这样的四位数来表示权重，哪个选择器的数字权重越大它们的样式优先级就越高。比如下面几组选择器的权重\n```javascript\ndiv .one{} 0,0,1,1\ndiv #one{} 0,1,0,1\ndiv a[href=\"one\"] #one{}0,1,1,2\n```\n在这一步计算样式优先级的时候有两个特殊情况，一个是通配符选择器它的权重是`0,0,0,0`，另一个是继承的样式没有优先级，也就是说它连0都没有。这两个特殊情况就会造成一种现象：\n```html\n#out *{\n    color:green;\n}\n#out #in{\n    color:black;\n}\n<div id=\"out\">\n    <div id=\"in\">\n        <div id=\"iin\">TEST</div>\n    </div>\n</div>\n```\n上面代码的结果是字体颜色为绿色而不是很多人想的黑色。在这段代码中，TEST有两个color样式，一个是#out *中的，一个是从#in中继承的，最后前者取得了胜利，就是因为继承的样式没有优先级，它连通配符都不如。所以说在重置样式的时候使用通配符不是一个好的习惯，因为它可能会带来一些奇怪的现象。\n\n+ 最后，如果第二步之后还是没办法区分出优先级的话，那么就很简单了，后出现的优先级更高。\n\n在平时的开发中，我们应该善用样式的优先级规则，不能一味的通过增加选择器权重来覆盖样式，这样长久之后会使得代码变得无法维护。\n\n### 参考\n1. http://www.smashingmagazine.com/2010/11/02/the-important-css-declaration-how-and-when-to-use-it/\n2. http://www.smashingmagazine.com/2010/04/07/css-specificity-and-inheritance/\n3. http://css-tricks.com/specifics-on-css-specificity/\n4. http://snook.ca/archives/html_and_css/understanding_c\n\n# 块级元素\n块级元素通常独占一行并且在正常流中垂直摆放，可以设置高度和宽度。块级元素在格式化的时候可以分为水平格式化和垂直格式化。\n在水平方向上，元素的所有横向宽度之和要等于包含块的宽度，也就是要满足下面的等式：\n`margin-left+border-left-width+padding-left+width+padding-right+border-right-right+margin-right=包含块的width`。\n当width为auto时，块级元素的宽度会填满整个包含块。当margin-left和margin-right出现auto时，会根据上面公式计算使得margin-left=margin-right，这也就是设置margin为auto时可以实现居中效果的原因。\n在垂直方向上，情况就比水平方向上要复杂，因为可能会出现外边距叠加的现象。\n当height为auto时，跟水平方向不同，height会根据内容的高度来计算。而margin-top和margin-bottom为auto时，会被设置为0。\n\n下面来说说垂直方向上外边距叠加的情况。首先，什么是外边距叠加？\n\n    外边距叠加是指在正常流中毗邻的两个以上块级元素在垂直方向上的外边距发生叠加的现象。\n根据上面的定义我们可以发生外边距叠加需要下面几个条件：\n1. 元素必须在正常流中，也就是说position不为absolute或fixed，并且没有浮动的元素\n2. 元素必须是块级元素，很明显在行内元素上设置上下外边距是没有效果的\n3. 发生外边距叠加的元素必须是毗邻的，也就是说两个元素是相邻的两个兄弟元素或者是父子关系的元素，而父子关系中必须是父元素和它的第一个子元素或者最后一个子元素。总结起来就是下面四种情况：\n\n+ 父元素的margin-top和它第一个子元素的margin-top\n+ 父元素的margin-bottom和它最后一个子元素的margin-bottom\n+ 元素的margin-bottom和它相邻的兄弟节点的margin-top\n+ 元素自身的margin-top和margin-bottom\n\n下面来看前三种情况：[DEMO](http://codepen.io/lakb248/pen/gyAxm/)\n很明显，父元素#out的上外边距和第一个子元素#first的上外边距发生了重叠；然后#first的下外边距和它的兄弟#last的上外边距发生了叠加；最后，父元素#out的下外边距和最后一个子元素#last的下外边距发生了叠加。\n对于外边距叠加，我觉得下面参考中smallni的总结很好，我就借用他的总结一下：\n\n+ 父元素和它的第一个子元素\n    + 父元素没有创建BFC\n    + 父子元素之间没有非空内容\n    + 父元素没有padding-top和border-top  \n+ 父元素和它的最后一个子元素\n    + 父元素没有创建BFC\n    + 父子元素之间没有非空内容\n    + 父元素没有padding-bottom和border-bottom\n    + 父元素的height为auto，min-height为0\n+ 兄弟元素之间\n    + 兄弟元素都不是float元素\n    + 兄弟元素都不是absolute元素\n    + 兄弟元素都不是inline-block元素\n\n根据上面的总结，我们也可以得出防止外边距叠加的方法：对于父子元素之间的情况，大多数情况下都是采用让父元素创建BFC的方式，对于BFC的概念大家可以google一下，这个也是CSS中一个很重要的概念，当然还有一个办法就是添加padding或border；而对于兄弟元素之间的情况，破坏那三条中间任意一条就可以了。\n讲了外边距叠加，那在发生外边距叠加的时候，元素之间的外边距该怎么计算了，这也需要分几种情况讨论。\n+ 如果发生叠加的外边距都是正值，那么就取两者中间最大的那个作为最后的边距\n+ 如果发生叠加的外边距都是负值，那么就取两者绝对值较大的那个然后进行负向位移\n+ 如果发生叠加的外边距有正有负，那么就把负值中间绝对值最大的那个和正值中最大的相加，最后得出的就是最后的边距\n最后在进行计算的时候，所有相邻的外边距应该一起参与计算，不能分别进行计算然后再加起来。比如下面的情况：\n```html\n<div style=\"margin:50px 0; background-color:green; width:50px;\">\n    <div style=\"margin:-60px 0;\">\n           <div style=\"margin:150px 0;\">A</div>\n    </div>\n</div>\n<div style=\"margin:-100px 0; background-color:green; width:50px;\">\n    <div style=\"margin:-120px 0;\">\n           <div style=\"margin:200px 0;\">B</div>\n    </div>\n</div>\n```\n正确的计算A和B之间边距的方法应该是，取出所有负值然后找绝对值最大的也就是-120，然后在找出正值中最大的200，最后把这两个边距相加得出80，也就是最后A和B之间的边距。\n\n### 参考\n1. http://www.smallni.com/collapsing-margin/\n2. http://www.w3help.org/zh-cn/kb/006/\n\n# 行内元素\n行内元素在摆放的时候不会产生换行，也就是说行内元素在空间足够的情况下会出现在同一行中。行内元素有几个比较重要的概念：\n1. 对于行内元素设置高度和宽度是无效的\n2. 内容区：由内容高度所决定的区域\n3. 行内框：对于非替换元素(`<a>`,`<span>`...)高度由line-height决定，对于替换元素(`<img>`)高度由内容和内外边距决定\n4. 内容区的上下加上line-height与font-size差值的一半就形成了行内框\n5. vertical-align是根据行内框进行对其的\n记住上面几个概念，对于行内元素的布局应该就能明白了。\n\n# 边距和边框\n## 外边距\n外边距是什么我就不多说了，这里提几个比较容易误会的地方。\n首先，当外边距是百分比时，它是根据父元素的宽度进行计算的，上下边距也是根据这个值进行计算。也就是说上下外边距的值也是以父元素的宽度为标准的。\n其次，大家有时候书写margin属性的时候都喜欢使用缩写的方式，写两个宽度或者一个，可是如果写上三个的话会怎么样呢？浏览器对于外边距的计算有下面几个规则：\n\n+ 当缺少下边距时，使用上边距\n+ 当缺少左边距时，使用右边距\n+ 当缺少右边距时，使用上边距\n\n用上面这三条规则就可以很好的解释边距缩写的原理了。这个原则对于所有边距和边框的缩写都适用。\n\n## 内边距\n对于内边距唯一要说的就是IE盒模型和W3C的盒模型的区别，在IE中padding和border是包括在元素width和height中的，而W3C的盒模型是不包括这两个的。还有一个问题就是内边距为百分比时的计算和内边距一样，都是以父元素的宽度为标准。\n\n## 边框\n边框有一个特点就是元素的背景会延续到边框，也就是说边框是覆盖在元素背景之上的。\n\n# 浮动和定位\n## 包含块\n元素的包含块就是包含元素的那个元素，但是对于不同的元素情况会不一样：\n\n+ 浮动元素的包含块是最近的块级元素祖先的内容区域\n+ 绝对定位元素的包含块是最近的有定位的祖先。如果这个祖先是块级元素，那么包含块就是块级元素的边框区域；如果是行内元素，那么包含块就是行内元素的内容区域。\n+ 相对定位和static定位的元素的包含块就是最近的块级元素或者行内元素的内容区域\n\n## 浮动\n\n+ 浮动元素会形成块级元素\n+ 浮动元素和块级元素重叠时，块级元素的背景在浮动元素下，而内容在上\n+ 浮动元素和行内元素重叠时，行内元素在上\n看[DEMO](http://codepen.io/lakb248/pen/LhCxw/)\n从上面例子很容易看出浮动元素和块级元素重叠的时候不同的现象。\n\n## 绝对定位\n+ 对于绝对定位在横向方向上也有一个计算公式：\n`left+(margin-left)+(border-left-width)+(padding-left)+width-(padding-right)+(border-right-width)+`\n`(margin-right)+right=包含块width`\n这个公式在同时指定了绝对定位并且还指定了外边距的情况下非常有用。\n\n+ 如果绝对定位不指定偏移，那么元素会怎么布局呢？很多人认为是相对于包含块进行定位，其实不是这样的。如果不指定偏移的话，元素会根据原来正常流中的位置进行定位。\n[DEMO](http://codepen.io/lakb248/pen/pKnxG/)\n如果你在上面添加一个left偏移，你会发现它是在正常流的情况下发生偏移的，只有同时指定了两个方向的偏移，才会根据包含块进行定位。\n\n+ 如果绝对定位的元素没有指定width和height那么我们可以通过设置偏移来对元素进行拉伸。\n[DEMO](http://codepen.io/lakb248/pen/syhnm/)\n通过修改偏移，你就可以控制元素的大小。\n\n+ 在同时具有margin和偏移的时候该怎么给元素定位呢？\n    + 非替换元素\n        + 如果left,right,width都为auto，那么按照正常流方式进行布局，并且把值为auto的margin-left和margin-right设为0\n        + 如果left,right,width都不为auto\n            + 如果margin-left和margin-right都为auto，那么根据公式把两个设为相同的长度；如果计算出的长度为负数，那么就把margin-left设为0\n            + 如果margin-lef或margin-right其中有一个为auto,那么根据公式计算出auto的值\n        + 其他情况，首先把值为auto的margin设为0\n            + 如果left不为auto，width根据内容计算值，其他值根据公式进行计算\n            + 如果width不为auto，首先按照正常流定位，然后根据公式计算margin的值\n            + 如果right不为auto，width根据内容计算，其他值根据公式进行计算\n            + 如果left,width不为auto，right根据公式计算\n            + 如果left,right不为auto，width的值根据公式计算\n            + 如果width,right不为auto，left根据公式计算\n    + 替换元素\n        + 宽度由内容区决定\n        + 如果left和right为auto，那么根据正常流定位\n        + 如果left或right为auto，则把对于的值为auto的margin改为0\n        + 如果此时，margin都是auto，那么根据公式计算平方剩余长度\n        + 如果这时候left还是auto，那么根据公式计算left的值\n上面这些计算原则就可以解释一个现象，就是之前在网上看到一种绝对居中的方法：\n[DEMO](http://codepen.io/lakb248/pen/Janfg/)\n这个方法把绝对定位元素的偏移都设为0，然后通过`margin:auto`来实现居中，这个方法用上面的原则就可以说通了。\n\n## 相对定位\n相对定位相对来说就比较容易了。就两个点：\n+ 偏移是根据元素本来在正常流中的位置计算的\n+ 相对定位会影响其他元素的定位，相对定位元素会占据它原来的空间\n\nPS:这篇博客大家看得可能有点痛苦，貌似现在SegmentFault不支持CodePen，不知道大家有没有什么办法可以做到。\n","slug":"something-about-css","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvky000r0pov107kd9db","content":"<p>今天跟大家分享一下CSS中一些比较重要和比较容易被忽略的东西，开始吧。<br><a id=\"more\"></a></p>\n<h1 id=\"样式优先级\"><a href=\"#样式优先级\" class=\"headerlink\" title=\"样式优先级\"></a>样式优先级</h1><p>当你在不同地方不同的选择器中对同一个元素属性添加了不同的样式的时候，该如何判断最后哪个样式会作用到元素上呢？判断的依据就是样式的优先级。样式优先级的判断分为三个步骤：</p>\n<ul>\n<li><p>首先，根据样式的来源和重要性进行分组，一共可以分成五组(优先级从高到低)</p>\n<ul>\n<li>用户自定义样式中带!important的样式</li>\n<li>作者样式中带!important的样式</li>\n<li>作者样式</li>\n<li>用户自定义样式</li>\n<li>浏览器样式</li>\n</ul>\n</li>\n<li><p>然后，如果在第一步中无法分出胜负，那么就根据选择器的权重进行判断。<br>每种CSS选择器都有各自的权重，权重从大到小排列分别是：</p>\n<ul>\n<li>ID选择器</li>\n<li>类选择器，伪类选择器，属性选择器</li>\n<li>标签选择器，伪元素选择器</li>\n</ul>\n</li>\n</ul>\n<p>在计算样式优先级的时候除了考虑选择器的权重以外，当然还需要考虑内联样式和外联样式，很明显内联样式的优先级比外联的高，那么它的权重也大。综合这两种情况我们就有下面这样的计算方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">行内样式 <span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></div><div class=\"line\">ID选择器 <span class=\"number\">0</span>,n,<span class=\"number\">0</span>,<span class=\"number\">0</span></div><div class=\"line\">类选择器，伪类选择器，属性选择器 <span class=\"number\">0</span>,<span class=\"number\">0</span>,n,<span class=\"number\">0</span></div><div class=\"line\">标签选择器，伪元素选择器 <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,n</div></pre></td></tr></table></figure></p>\n<p>在上面n代表对应选择器的个数。根据这个方法，每组选择器都会有一个这样的四位数来表示权重，哪个选择器的数字权重越大它们的样式优先级就越高。比如下面几组选择器的权重<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">div .one&#123;&#125; 0,0,1,1</div><div class=\"line\">div #one&#123;&#125; 0,1,0,1</div><div class=\"line\">div a[href=\"one\"] #one&#123;&#125;0,1,1,2</div></pre></td></tr></table></figure></p>\n<p>在这一步计算样式优先级的时候有两个特殊情况，一个是通配符选择器它的权重是<code>0,0,0,0</code>，另一个是继承的样式没有优先级，也就是说它连0都没有。这两个特殊情况就会造成一种现象：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#out *&#123;</div><div class=\"line\">    color:green;</div><div class=\"line\">&#125;</div><div class=\"line\">#out #in&#123;</div><div class=\"line\">    color:black;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"out\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"in\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"iin\"</span>&gt;</span>TEST<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面代码的结果是字体颜色为绿色而不是很多人想的黑色。在这段代码中，TEST有两个color样式，一个是#out *中的，一个是从#in中继承的，最后前者取得了胜利，就是因为继承的样式没有优先级，它连通配符都不如。所以说在重置样式的时候使用通配符不是一个好的习惯，因为它可能会带来一些奇怪的现象。</p>\n<ul>\n<li>最后，如果第二步之后还是没办法区分出优先级的话，那么就很简单了，后出现的优先级更高。</li>\n</ul>\n<p>在平时的开发中，我们应该善用样式的优先级规则，不能一味的通过增加选择器权重来覆盖样式，这样长久之后会使得代码变得无法维护。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://www.smashingmagazine.com/2010/11/02/the-important-css-declaration-how-and-when-to-use-it/\" target=\"_blank\" rel=\"external\">http://www.smashingmagazine.com/2010/11/02/the-important-css-declaration-how-and-when-to-use-it/</a></li>\n<li><a href=\"http://www.smashingmagazine.com/2010/04/07/css-specificity-and-inheritance/\" target=\"_blank\" rel=\"external\">http://www.smashingmagazine.com/2010/04/07/css-specificity-and-inheritance/</a></li>\n<li><a href=\"http://css-tricks.com/specifics-on-css-specificity/\" target=\"_blank\" rel=\"external\">http://css-tricks.com/specifics-on-css-specificity/</a></li>\n<li><a href=\"http://snook.ca/archives/html_and_css/understanding_c\" target=\"_blank\" rel=\"external\">http://snook.ca/archives/html_and_css/understanding_c</a></li>\n</ol>\n<h1 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h1><p>块级元素通常独占一行并且在正常流中垂直摆放，可以设置高度和宽度。块级元素在格式化的时候可以分为水平格式化和垂直格式化。<br>在水平方向上，元素的所有横向宽度之和要等于包含块的宽度，也就是要满足下面的等式：<br><code>margin-left+border-left-width+padding-left+width+padding-right+border-right-right+margin-right=包含块的width</code>。<br>当width为auto时，块级元素的宽度会填满整个包含块。当margin-left和margin-right出现auto时，会根据上面公式计算使得margin-left=margin-right，这也就是设置margin为auto时可以实现居中效果的原因。<br>在垂直方向上，情况就比水平方向上要复杂，因为可能会出现外边距叠加的现象。<br>当height为auto时，跟水平方向不同，height会根据内容的高度来计算。而margin-top和margin-bottom为auto时，会被设置为0。</p>\n<p>下面来说说垂直方向上外边距叠加的情况。首先，什么是外边距叠加？</p>\n<pre><code>外边距叠加是指在正常流中毗邻的两个以上块级元素在垂直方向上的外边距发生叠加的现象。\n</code></pre><p>根据上面的定义我们可以发生外边距叠加需要下面几个条件：</p>\n<ol>\n<li>元素必须在正常流中，也就是说position不为absolute或fixed，并且没有浮动的元素</li>\n<li>元素必须是块级元素，很明显在行内元素上设置上下外边距是没有效果的</li>\n<li>发生外边距叠加的元素必须是毗邻的，也就是说两个元素是相邻的两个兄弟元素或者是父子关系的元素，而父子关系中必须是父元素和它的第一个子元素或者最后一个子元素。总结起来就是下面四种情况：</li>\n</ol>\n<ul>\n<li>父元素的margin-top和它第一个子元素的margin-top</li>\n<li>父元素的margin-bottom和它最后一个子元素的margin-bottom</li>\n<li>元素的margin-bottom和它相邻的兄弟节点的margin-top</li>\n<li>元素自身的margin-top和margin-bottom</li>\n</ul>\n<p>下面来看前三种情况：<a href=\"http://codepen.io/lakb248/pen/gyAxm/\" target=\"_blank\" rel=\"external\">DEMO</a><br>很明显，父元素#out的上外边距和第一个子元素#first的上外边距发生了重叠；然后#first的下外边距和它的兄弟#last的上外边距发生了叠加；最后，父元素#out的下外边距和最后一个子元素#last的下外边距发生了叠加。<br>对于外边距叠加，我觉得下面参考中smallni的总结很好，我就借用他的总结一下：</p>\n<ul>\n<li>父元素和它的第一个子元素<ul>\n<li>父元素没有创建BFC</li>\n<li>父子元素之间没有非空内容</li>\n<li>父元素没有padding-top和border-top  </li>\n</ul>\n</li>\n<li>父元素和它的最后一个子元素<ul>\n<li>父元素没有创建BFC</li>\n<li>父子元素之间没有非空内容</li>\n<li>父元素没有padding-bottom和border-bottom</li>\n<li>父元素的height为auto，min-height为0</li>\n</ul>\n</li>\n<li>兄弟元素之间<ul>\n<li>兄弟元素都不是float元素</li>\n<li>兄弟元素都不是absolute元素</li>\n<li>兄弟元素都不是inline-block元素</li>\n</ul>\n</li>\n</ul>\n<p>根据上面的总结，我们也可以得出防止外边距叠加的方法：对于父子元素之间的情况，大多数情况下都是采用让父元素创建BFC的方式，对于BFC的概念大家可以google一下，这个也是CSS中一个很重要的概念，当然还有一个办法就是添加padding或border；而对于兄弟元素之间的情况，破坏那三条中间任意一条就可以了。<br>讲了外边距叠加，那在发生外边距叠加的时候，元素之间的外边距该怎么计算了，这也需要分几种情况讨论。</p>\n<ul>\n<li>如果发生叠加的外边距都是正值，那么就取两者中间最大的那个作为最后的边距</li>\n<li>如果发生叠加的外边距都是负值，那么就取两者绝对值较大的那个然后进行负向位移</li>\n<li>如果发生叠加的外边距有正有负，那么就把负值中间绝对值最大的那个和正值中最大的相加，最后得出的就是最后的边距<br>最后在进行计算的时候，所有相邻的外边距应该一起参与计算，不能分别进行计算然后再加起来。比如下面的情况：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:50px 0; background-color:green; width:50px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:-60px 0;\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:150px 0;\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:-100px 0; background-color:green; width:50px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:-120px 0;\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:200px 0;\"</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>正确的计算A和B之间边距的方法应该是，取出所有负值然后找绝对值最大的也就是-120，然后在找出正值中最大的200，最后把这两个边距相加得出80，也就是最后A和B之间的边距。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://www.smallni.com/collapsing-margin/\" target=\"_blank\" rel=\"external\">http://www.smallni.com/collapsing-margin/</a></li>\n<li><a href=\"http://www.w3help.org/zh-cn/kb/006/\" target=\"_blank\" rel=\"external\">http://www.w3help.org/zh-cn/kb/006/</a></li>\n</ol>\n<h1 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h1><p>行内元素在摆放的时候不会产生换行，也就是说行内元素在空间足够的情况下会出现在同一行中。行内元素有几个比较重要的概念：</p>\n<ol>\n<li>对于行内元素设置高度和宽度是无效的</li>\n<li>内容区：由内容高度所决定的区域</li>\n<li>行内框：对于非替换元素(<code>&lt;a&gt;</code>,<code>&lt;span&gt;</code>…)高度由line-height决定，对于替换元素(<code>&lt;img&gt;</code>)高度由内容和内外边距决定</li>\n<li>内容区的上下加上line-height与font-size差值的一半就形成了行内框</li>\n<li>vertical-align是根据行内框进行对其的<br>记住上面几个概念，对于行内元素的布局应该就能明白了。</li>\n</ol>\n<h1 id=\"边距和边框\"><a href=\"#边距和边框\" class=\"headerlink\" title=\"边距和边框\"></a>边距和边框</h1><h2 id=\"外边距\"><a href=\"#外边距\" class=\"headerlink\" title=\"外边距\"></a>外边距</h2><p>外边距是什么我就不多说了，这里提几个比较容易误会的地方。<br>首先，当外边距是百分比时，它是根据父元素的宽度进行计算的，上下边距也是根据这个值进行计算。也就是说上下外边距的值也是以父元素的宽度为标准的。<br>其次，大家有时候书写margin属性的时候都喜欢使用缩写的方式，写两个宽度或者一个，可是如果写上三个的话会怎么样呢？浏览器对于外边距的计算有下面几个规则：</p>\n<ul>\n<li>当缺少下边距时，使用上边距</li>\n<li>当缺少左边距时，使用右边距</li>\n<li>当缺少右边距时，使用上边距</li>\n</ul>\n<p>用上面这三条规则就可以很好的解释边距缩写的原理了。这个原则对于所有边距和边框的缩写都适用。</p>\n<h2 id=\"内边距\"><a href=\"#内边距\" class=\"headerlink\" title=\"内边距\"></a>内边距</h2><p>对于内边距唯一要说的就是IE盒模型和W3C的盒模型的区别，在IE中padding和border是包括在元素width和height中的，而W3C的盒模型是不包括这两个的。还有一个问题就是内边距为百分比时的计算和内边距一样，都是以父元素的宽度为标准。</p>\n<h2 id=\"边框\"><a href=\"#边框\" class=\"headerlink\" title=\"边框\"></a>边框</h2><p>边框有一个特点就是元素的背景会延续到边框，也就是说边框是覆盖在元素背景之上的。</p>\n<h1 id=\"浮动和定位\"><a href=\"#浮动和定位\" class=\"headerlink\" title=\"浮动和定位\"></a>浮动和定位</h1><h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>元素的包含块就是包含元素的那个元素，但是对于不同的元素情况会不一样：</p>\n<ul>\n<li>浮动元素的包含块是最近的块级元素祖先的内容区域</li>\n<li>绝对定位元素的包含块是最近的有定位的祖先。如果这个祖先是块级元素，那么包含块就是块级元素的边框区域；如果是行内元素，那么包含块就是行内元素的内容区域。</li>\n<li>相对定位和static定位的元素的包含块就是最近的块级元素或者行内元素的内容区域</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><ul>\n<li>浮动元素会形成块级元素</li>\n<li>浮动元素和块级元素重叠时，块级元素的背景在浮动元素下，而内容在上</li>\n<li>浮动元素和行内元素重叠时，行内元素在上<br>看<a href=\"http://codepen.io/lakb248/pen/LhCxw/\" target=\"_blank\" rel=\"external\">DEMO</a><br>从上面例子很容易看出浮动元素和块级元素重叠的时候不同的现象。</li>\n</ul>\n<h2 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h2><ul>\n<li><p>对于绝对定位在横向方向上也有一个计算公式：<br><code>left+(margin-left)+(border-left-width)+(padding-left)+width-(padding-right)+(border-right-width)+</code><br><code>(margin-right)+right=包含块width</code><br>这个公式在同时指定了绝对定位并且还指定了外边距的情况下非常有用。</p>\n</li>\n<li><p>如果绝对定位不指定偏移，那么元素会怎么布局呢？很多人认为是相对于包含块进行定位，其实不是这样的。如果不指定偏移的话，元素会根据原来正常流中的位置进行定位。<br><a href=\"http://codepen.io/lakb248/pen/pKnxG/\" target=\"_blank\" rel=\"external\">DEMO</a><br>如果你在上面添加一个left偏移，你会发现它是在正常流的情况下发生偏移的，只有同时指定了两个方向的偏移，才会根据包含块进行定位。</p>\n</li>\n<li><p>如果绝对定位的元素没有指定width和height那么我们可以通过设置偏移来对元素进行拉伸。<br><a href=\"http://codepen.io/lakb248/pen/syhnm/\" target=\"_blank\" rel=\"external\">DEMO</a><br>通过修改偏移，你就可以控制元素的大小。</p>\n</li>\n<li><p>在同时具有margin和偏移的时候该怎么给元素定位呢？</p>\n<ul>\n<li>非替换元素<ul>\n<li>如果left,right,width都为auto，那么按照正常流方式进行布局，并且把值为auto的margin-left和margin-right设为0</li>\n<li>如果left,right,width都不为auto<ul>\n<li>如果margin-left和margin-right都为auto，那么根据公式把两个设为相同的长度；如果计算出的长度为负数，那么就把margin-left设为0</li>\n<li>如果margin-lef或margin-right其中有一个为auto,那么根据公式计算出auto的值</li>\n</ul>\n</li>\n<li>其他情况，首先把值为auto的margin设为0<ul>\n<li>如果left不为auto，width根据内容计算值，其他值根据公式进行计算</li>\n<li>如果width不为auto，首先按照正常流定位，然后根据公式计算margin的值</li>\n<li>如果right不为auto，width根据内容计算，其他值根据公式进行计算</li>\n<li>如果left,width不为auto，right根据公式计算</li>\n<li>如果left,right不为auto，width的值根据公式计算</li>\n<li>如果width,right不为auto，left根据公式计算</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>替换元素<ul>\n<li>宽度由内容区决定</li>\n<li>如果left和right为auto，那么根据正常流定位</li>\n<li>如果left或right为auto，则把对于的值为auto的margin改为0</li>\n<li>如果此时，margin都是auto，那么根据公式计算平方剩余长度</li>\n<li>如果这时候left还是auto，那么根据公式计算left的值<br>上面这些计算原则就可以解释一个现象，就是之前在网上看到一种绝对居中的方法：<br><a href=\"http://codepen.io/lakb248/pen/Janfg/\" target=\"_blank\" rel=\"external\">DEMO</a><br>这个方法把绝对定位元素的偏移都设为0，然后通过<code>margin:auto</code>来实现居中，这个方法用上面的原则就可以说通了。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h2><p>相对定位相对来说就比较容易了。就两个点：</p>\n<ul>\n<li>偏移是根据元素本来在正常流中的位置计算的</li>\n<li>相对定位会影响其他元素的定位，相对定位元素会占据它原来的空间</li>\n</ul>\n<p>PS:这篇博客大家看得可能有点痛苦，貌似现在SegmentFault不支持CodePen，不知道大家有没有什么办法可以做到。</p>\n","excerpt":"<p>今天跟大家分享一下CSS中一些比较重要和比较容易被忽略的东西，开始吧。<br>","more":"</p>\n<h1 id=\"样式优先级\"><a href=\"#样式优先级\" class=\"headerlink\" title=\"样式优先级\"></a>样式优先级</h1><p>当你在不同地方不同的选择器中对同一个元素属性添加了不同的样式的时候，该如何判断最后哪个样式会作用到元素上呢？判断的依据就是样式的优先级。样式优先级的判断分为三个步骤：</p>\n<ul>\n<li><p>首先，根据样式的来源和重要性进行分组，一共可以分成五组(优先级从高到低)</p>\n<ul>\n<li>用户自定义样式中带!important的样式</li>\n<li>作者样式中带!important的样式</li>\n<li>作者样式</li>\n<li>用户自定义样式</li>\n<li>浏览器样式</li>\n</ul>\n</li>\n<li><p>然后，如果在第一步中无法分出胜负，那么就根据选择器的权重进行判断。<br>每种CSS选择器都有各自的权重，权重从大到小排列分别是：</p>\n<ul>\n<li>ID选择器</li>\n<li>类选择器，伪类选择器，属性选择器</li>\n<li>标签选择器，伪元素选择器</li>\n</ul>\n</li>\n</ul>\n<p>在计算样式优先级的时候除了考虑选择器的权重以外，当然还需要考虑内联样式和外联样式，很明显内联样式的优先级比外联的高，那么它的权重也大。综合这两种情况我们就有下面这样的计算方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">行内样式 <span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span></div><div class=\"line\">ID选择器 <span class=\"number\">0</span>,n,<span class=\"number\">0</span>,<span class=\"number\">0</span></div><div class=\"line\">类选择器，伪类选择器，属性选择器 <span class=\"number\">0</span>,<span class=\"number\">0</span>,n,<span class=\"number\">0</span></div><div class=\"line\">标签选择器，伪元素选择器 <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,n</div></pre></td></tr></table></figure></p>\n<p>在上面n代表对应选择器的个数。根据这个方法，每组选择器都会有一个这样的四位数来表示权重，哪个选择器的数字权重越大它们的样式优先级就越高。比如下面几组选择器的权重<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">div .one&#123;&#125; 0,0,1,1</div><div class=\"line\">div #one&#123;&#125; 0,1,0,1</div><div class=\"line\">div a[href=\"one\"] #one&#123;&#125;0,1,1,2</div></pre></td></tr></table></figure></p>\n<p>在这一步计算样式优先级的时候有两个特殊情况，一个是通配符选择器它的权重是<code>0,0,0,0</code>，另一个是继承的样式没有优先级，也就是说它连0都没有。这两个特殊情况就会造成一种现象：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#out *&#123;</div><div class=\"line\">    color:green;</div><div class=\"line\">&#125;</div><div class=\"line\">#out #in&#123;</div><div class=\"line\">    color:black;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"out\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"in\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"iin\"</span>&gt;</span>TEST<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>上面代码的结果是字体颜色为绿色而不是很多人想的黑色。在这段代码中，TEST有两个color样式，一个是#out *中的，一个是从#in中继承的，最后前者取得了胜利，就是因为继承的样式没有优先级，它连通配符都不如。所以说在重置样式的时候使用通配符不是一个好的习惯，因为它可能会带来一些奇怪的现象。</p>\n<ul>\n<li>最后，如果第二步之后还是没办法区分出优先级的话，那么就很简单了，后出现的优先级更高。</li>\n</ul>\n<p>在平时的开发中，我们应该善用样式的优先级规则，不能一味的通过增加选择器权重来覆盖样式，这样长久之后会使得代码变得无法维护。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://www.smashingmagazine.com/2010/11/02/the-important-css-declaration-how-and-when-to-use-it/\">http://www.smashingmagazine.com/2010/11/02/the-important-css-declaration-how-and-when-to-use-it/</a></li>\n<li><a href=\"http://www.smashingmagazine.com/2010/04/07/css-specificity-and-inheritance/\">http://www.smashingmagazine.com/2010/04/07/css-specificity-and-inheritance/</a></li>\n<li><a href=\"http://css-tricks.com/specifics-on-css-specificity/\">http://css-tricks.com/specifics-on-css-specificity/</a></li>\n<li><a href=\"http://snook.ca/archives/html_and_css/understanding_c\">http://snook.ca/archives/html_and_css/understanding_c</a></li>\n</ol>\n<h1 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h1><p>块级元素通常独占一行并且在正常流中垂直摆放，可以设置高度和宽度。块级元素在格式化的时候可以分为水平格式化和垂直格式化。<br>在水平方向上，元素的所有横向宽度之和要等于包含块的宽度，也就是要满足下面的等式：<br><code>margin-left+border-left-width+padding-left+width+padding-right+border-right-right+margin-right=包含块的width</code>。<br>当width为auto时，块级元素的宽度会填满整个包含块。当margin-left和margin-right出现auto时，会根据上面公式计算使得margin-left=margin-right，这也就是设置margin为auto时可以实现居中效果的原因。<br>在垂直方向上，情况就比水平方向上要复杂，因为可能会出现外边距叠加的现象。<br>当height为auto时，跟水平方向不同，height会根据内容的高度来计算。而margin-top和margin-bottom为auto时，会被设置为0。</p>\n<p>下面来说说垂直方向上外边距叠加的情况。首先，什么是外边距叠加？</p>\n<pre><code>外边距叠加是指在正常流中毗邻的两个以上块级元素在垂直方向上的外边距发生叠加的现象。\n</code></pre><p>根据上面的定义我们可以发生外边距叠加需要下面几个条件：</p>\n<ol>\n<li>元素必须在正常流中，也就是说position不为absolute或fixed，并且没有浮动的元素</li>\n<li>元素必须是块级元素，很明显在行内元素上设置上下外边距是没有效果的</li>\n<li>发生外边距叠加的元素必须是毗邻的，也就是说两个元素是相邻的两个兄弟元素或者是父子关系的元素，而父子关系中必须是父元素和它的第一个子元素或者最后一个子元素。总结起来就是下面四种情况：</li>\n</ol>\n<ul>\n<li>父元素的margin-top和它第一个子元素的margin-top</li>\n<li>父元素的margin-bottom和它最后一个子元素的margin-bottom</li>\n<li>元素的margin-bottom和它相邻的兄弟节点的margin-top</li>\n<li>元素自身的margin-top和margin-bottom</li>\n</ul>\n<p>下面来看前三种情况：<a href=\"http://codepen.io/lakb248/pen/gyAxm/\">DEMO</a><br>很明显，父元素#out的上外边距和第一个子元素#first的上外边距发生了重叠；然后#first的下外边距和它的兄弟#last的上外边距发生了叠加；最后，父元素#out的下外边距和最后一个子元素#last的下外边距发生了叠加。<br>对于外边距叠加，我觉得下面参考中smallni的总结很好，我就借用他的总结一下：</p>\n<ul>\n<li>父元素和它的第一个子元素<ul>\n<li>父元素没有创建BFC</li>\n<li>父子元素之间没有非空内容</li>\n<li>父元素没有padding-top和border-top  </li>\n</ul>\n</li>\n<li>父元素和它的最后一个子元素<ul>\n<li>父元素没有创建BFC</li>\n<li>父子元素之间没有非空内容</li>\n<li>父元素没有padding-bottom和border-bottom</li>\n<li>父元素的height为auto，min-height为0</li>\n</ul>\n</li>\n<li>兄弟元素之间<ul>\n<li>兄弟元素都不是float元素</li>\n<li>兄弟元素都不是absolute元素</li>\n<li>兄弟元素都不是inline-block元素</li>\n</ul>\n</li>\n</ul>\n<p>根据上面的总结，我们也可以得出防止外边距叠加的方法：对于父子元素之间的情况，大多数情况下都是采用让父元素创建BFC的方式，对于BFC的概念大家可以google一下，这个也是CSS中一个很重要的概念，当然还有一个办法就是添加padding或border；而对于兄弟元素之间的情况，破坏那三条中间任意一条就可以了。<br>讲了外边距叠加，那在发生外边距叠加的时候，元素之间的外边距该怎么计算了，这也需要分几种情况讨论。</p>\n<ul>\n<li>如果发生叠加的外边距都是正值，那么就取两者中间最大的那个作为最后的边距</li>\n<li>如果发生叠加的外边距都是负值，那么就取两者绝对值较大的那个然后进行负向位移</li>\n<li>如果发生叠加的外边距有正有负，那么就把负值中间绝对值最大的那个和正值中最大的相加，最后得出的就是最后的边距<br>最后在进行计算的时候，所有相邻的外边距应该一起参与计算，不能分别进行计算然后再加起来。比如下面的情况：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:50px 0; background-color:green; width:50px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:-60px 0;\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:150px 0;\"</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:-100px 0; background-color:green; width:50px;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:-120px 0;\"</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin:200px 0;\"</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>正确的计算A和B之间边距的方法应该是，取出所有负值然后找绝对值最大的也就是-120，然后在找出正值中最大的200，最后把这两个边距相加得出80，也就是最后A和B之间的边距。</p>\n<h3 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ol>\n<li><a href=\"http://www.smallni.com/collapsing-margin/\">http://www.smallni.com/collapsing-margin/</a></li>\n<li><a href=\"http://www.w3help.org/zh-cn/kb/006/\">http://www.w3help.org/zh-cn/kb/006/</a></li>\n</ol>\n<h1 id=\"行内元素\"><a href=\"#行内元素\" class=\"headerlink\" title=\"行内元素\"></a>行内元素</h1><p>行内元素在摆放的时候不会产生换行，也就是说行内元素在空间足够的情况下会出现在同一行中。行内元素有几个比较重要的概念：</p>\n<ol>\n<li>对于行内元素设置高度和宽度是无效的</li>\n<li>内容区：由内容高度所决定的区域</li>\n<li>行内框：对于非替换元素(<code>&lt;a&gt;</code>,<code>&lt;span&gt;</code>…)高度由line-height决定，对于替换元素(<code>&lt;img&gt;</code>)高度由内容和内外边距决定</li>\n<li>内容区的上下加上line-height与font-size差值的一半就形成了行内框</li>\n<li>vertical-align是根据行内框进行对其的<br>记住上面几个概念，对于行内元素的布局应该就能明白了。</li>\n</ol>\n<h1 id=\"边距和边框\"><a href=\"#边距和边框\" class=\"headerlink\" title=\"边距和边框\"></a>边距和边框</h1><h2 id=\"外边距\"><a href=\"#外边距\" class=\"headerlink\" title=\"外边距\"></a>外边距</h2><p>外边距是什么我就不多说了，这里提几个比较容易误会的地方。<br>首先，当外边距是百分比时，它是根据父元素的宽度进行计算的，上下边距也是根据这个值进行计算。也就是说上下外边距的值也是以父元素的宽度为标准的。<br>其次，大家有时候书写margin属性的时候都喜欢使用缩写的方式，写两个宽度或者一个，可是如果写上三个的话会怎么样呢？浏览器对于外边距的计算有下面几个规则：</p>\n<ul>\n<li>当缺少下边距时，使用上边距</li>\n<li>当缺少左边距时，使用右边距</li>\n<li>当缺少右边距时，使用上边距</li>\n</ul>\n<p>用上面这三条规则就可以很好的解释边距缩写的原理了。这个原则对于所有边距和边框的缩写都适用。</p>\n<h2 id=\"内边距\"><a href=\"#内边距\" class=\"headerlink\" title=\"内边距\"></a>内边距</h2><p>对于内边距唯一要说的就是IE盒模型和W3C的盒模型的区别，在IE中padding和border是包括在元素width和height中的，而W3C的盒模型是不包括这两个的。还有一个问题就是内边距为百分比时的计算和内边距一样，都是以父元素的宽度为标准。</p>\n<h2 id=\"边框\"><a href=\"#边框\" class=\"headerlink\" title=\"边框\"></a>边框</h2><p>边框有一个特点就是元素的背景会延续到边框，也就是说边框是覆盖在元素背景之上的。</p>\n<h1 id=\"浮动和定位\"><a href=\"#浮动和定位\" class=\"headerlink\" title=\"浮动和定位\"></a>浮动和定位</h1><h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>元素的包含块就是包含元素的那个元素，但是对于不同的元素情况会不一样：</p>\n<ul>\n<li>浮动元素的包含块是最近的块级元素祖先的内容区域</li>\n<li>绝对定位元素的包含块是最近的有定位的祖先。如果这个祖先是块级元素，那么包含块就是块级元素的边框区域；如果是行内元素，那么包含块就是行内元素的内容区域。</li>\n<li>相对定位和static定位的元素的包含块就是最近的块级元素或者行内元素的内容区域</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><ul>\n<li>浮动元素会形成块级元素</li>\n<li>浮动元素和块级元素重叠时，块级元素的背景在浮动元素下，而内容在上</li>\n<li>浮动元素和行内元素重叠时，行内元素在上<br>看<a href=\"http://codepen.io/lakb248/pen/LhCxw/\">DEMO</a><br>从上面例子很容易看出浮动元素和块级元素重叠的时候不同的现象。</li>\n</ul>\n<h2 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h2><ul>\n<li><p>对于绝对定位在横向方向上也有一个计算公式：<br><code>left+(margin-left)+(border-left-width)+(padding-left)+width-(padding-right)+(border-right-width)+</code><br><code>(margin-right)+right=包含块width</code><br>这个公式在同时指定了绝对定位并且还指定了外边距的情况下非常有用。</p>\n</li>\n<li><p>如果绝对定位不指定偏移，那么元素会怎么布局呢？很多人认为是相对于包含块进行定位，其实不是这样的。如果不指定偏移的话，元素会根据原来正常流中的位置进行定位。<br><a href=\"http://codepen.io/lakb248/pen/pKnxG/\">DEMO</a><br>如果你在上面添加一个left偏移，你会发现它是在正常流的情况下发生偏移的，只有同时指定了两个方向的偏移，才会根据包含块进行定位。</p>\n</li>\n<li><p>如果绝对定位的元素没有指定width和height那么我们可以通过设置偏移来对元素进行拉伸。<br><a href=\"http://codepen.io/lakb248/pen/syhnm/\">DEMO</a><br>通过修改偏移，你就可以控制元素的大小。</p>\n</li>\n<li><p>在同时具有margin和偏移的时候该怎么给元素定位呢？</p>\n<ul>\n<li>非替换元素<ul>\n<li>如果left,right,width都为auto，那么按照正常流方式进行布局，并且把值为auto的margin-left和margin-right设为0</li>\n<li>如果left,right,width都不为auto<ul>\n<li>如果margin-left和margin-right都为auto，那么根据公式把两个设为相同的长度；如果计算出的长度为负数，那么就把margin-left设为0</li>\n<li>如果margin-lef或margin-right其中有一个为auto,那么根据公式计算出auto的值</li>\n</ul>\n</li>\n<li>其他情况，首先把值为auto的margin设为0<ul>\n<li>如果left不为auto，width根据内容计算值，其他值根据公式进行计算</li>\n<li>如果width不为auto，首先按照正常流定位，然后根据公式计算margin的值</li>\n<li>如果right不为auto，width根据内容计算，其他值根据公式进行计算</li>\n<li>如果left,width不为auto，right根据公式计算</li>\n<li>如果left,right不为auto，width的值根据公式计算</li>\n<li>如果width,right不为auto，left根据公式计算</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>替换元素<ul>\n<li>宽度由内容区决定</li>\n<li>如果left和right为auto，那么根据正常流定位</li>\n<li>如果left或right为auto，则把对于的值为auto的margin改为0</li>\n<li>如果此时，margin都是auto，那么根据公式计算平方剩余长度</li>\n<li>如果这时候left还是auto，那么根据公式计算left的值<br>上面这些计算原则就可以解释一个现象，就是之前在网上看到一种绝对居中的方法：<br><a href=\"http://codepen.io/lakb248/pen/Janfg/\">DEMO</a><br>这个方法把绝对定位元素的偏移都设为0，然后通过<code>margin:auto</code>来实现居中，这个方法用上面的原则就可以说通了。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h2><p>相对定位相对来说就比较容易了。就两个点：</p>\n<ul>\n<li>偏移是根据元素本来在正常流中的位置计算的</li>\n<li>相对定位会影响其他元素的定位，相对定位元素会占据它原来的空间</li>\n</ul>\n<p>PS:这篇博客大家看得可能有点痛苦，貌似现在SegmentFault不支持CodePen，不知道大家有没有什么办法可以做到。</p>"},{"title":"(译)深入理解Promise五部曲：1.异步问题","date":"2014-06-23T06:46:53.000Z","_content":"在微博上看到有人分享LabJS作者写的关于Promise的博客，看了下觉得写得很好，分五个部分讲解了Promise的来龙去脉。从这篇文章开始，我会陆续把五篇博客翻译出来跟大家分享，在大牛的带领下真正理解Promise。卖个关子，作者看待Promise的角度跟我一直以来看到的讲解Promise的角度完全不一样，不只是定留在解决回调金字塔上，至少我没想到Promise竟然有这么重要的意义。先上第一篇。\n<!-- more -->\n在这篇文章中，我会解释我们为什么需要使用一个更好的方式(比如Promise)来进行异步流程的编写。\n## 异步\n你肯定听说过Javascript中的异步编程，但是它到底是什么呢?\n比如当你发生一个Ajax请求，你通常会提供一个回调函数，这个回调函数会在请求返回的时候被调用。但是你是否思考过你的回调函数在其他代码也需要运行的时候是如何被调用的呢？如果两个回调函数同时都要运行会怎样呢？JS引擎会如何处理这个问题呢？\n为了理解异步到底是什么，你首先需要理解一个问题：JS引擎是**单线程**的。这意味着在任何环境中，只有一段JS代码会被执行。但是什么叫一段JS代码呢？总的来说，每个函数是一个不可分割的片段或者代码块。当JS引擎开始执行一个函数(比如回调函数)时，它就会把这个函数执行完，也就是说只有执行完这段代码才会继续执行后面的代码。\n换句话说，JS引擎就像一个主题公园中的游乐项目，这个项目每次只能一个人玩儿，人们会排成一个长长的队。大家一个个上去玩儿，下来一个然后再上去一个。如果你要玩儿这个项目你只能在队尾排队等待。幸运的是，每个人都很快就下来了，所以这个队伍移动得很快。\n上面说的队伍在技术上被叫做`事件轮询`。它尽可能快的进行轮询，如果事件队列中有代码需要执行，它会让JS引擎执行这段代码，然后移到下一个需要执行的代码，或者等待新的代码进来。\n## 并发\n如果程序在一个时间只有一个任务在执行，这样明显是低效而且有限制性的。\n如果你点击一个按钮提交一个表单，然后你的鼠标就会被冻结并且你不能滚动页面，这个情况会持续几秒直到请求返回，这样肯定会带来很差的用户体验。\n这就是为什么真实的程序会有很多任务在运行而不是就只有一个任务，但是JS引擎是怎么在单线程的环境下实现的呢？\n你应该想到每个代码块运行只要很短的时间，通常不到1毫秒。你一眨眼的时间，JS引擎会执行上千百个这样的代码块。但是并不是所有的代码块都是为了执行同一个任务。比如，当你点击提交按钮之后，你也可以点击导航或者滚动页面等等。每个任务都会被分为很多个原子操作，执行这些原子操作会非常快。\n比如：\n**Task A**\n\n- step1\n- step2\n- step3\n- step4\n\n**Task B**\n\n- step1\n- step2\n\nJS引擎肯定不能在执行A:1步骤的同时执行B:1。但是Task B不需要等到Task A执行完后再执行，因为引擎可以在每个独立的原子操作之间快速的切换，可能是按下面的顺序执行的：\n\n- A:1\n- B:1\n- A:2\n- B:2(Task B完成)\n- A:3\n- A:4(Task A完成)\n\n所以，事实上Task A和Task B是可以\"同时\"运行的，通过穿插地执行它们的每个原子操作，这叫做并发，换句话说，Task A和Task B是并发的。\n我们很容易就会把并发和并行弄混。在真正并行的系统中，你会有多个线程，可能一个线程执行Task A同时另一个线程执行Task B。这也意味着，A:1的运行不会阻塞B:1的运行。\n这就好像有主题公园中有两个分开的游乐项目，会有两队人在排队，它们互相不影响。\nJS事件轮询是一个简单的并发模型。它只允许把每个事件添加到事件队列的队尾，而这个队列是先进先出的。当条件允许时，回调函数就会被运行。\n## 同步情况下的异步\n在JS中编写异步代码一个巧妙但是烦恼的问题是JS引擎实际执行代码的方式跟我们看上去不大一样。例如：\n```javascript\nmakeAjaxRequest(url,function(response){\n    alert(\"Response:\" + response) ;\n}) ;\n```\n你会怎么描述这段代码的流程呢？\n大多数开发者大概会这么说：\n1. 发送Ajax请求\n2. 等到请求完成的时候，弹出提示框\n但是这跟JS引擎实际的执行情况相比还不够准确。\n这个问题主要是因为我们大脑习惯同步的方式。在上面这个描述中，我们使用“等到。。。的时候”来解释，这就也是说我们会阻塞等待Ajax请求，然后继续执行后面的程序。\nJS在步骤1和步骤2之间不会阻塞。一个更准确的描述上面这段代码的方式是：\n1. 发送Ajax请求\n2. 注册回调函数\n3. 继续向下执行\n4. 在未来某个时间点，惊呼“Oh，我刚才得到一个返回！”。现在，返回去执行注册的那个回调函数。\n这两个解释的区别似乎没什么大不了的，但是我们跳过第三步的思考方式是一个大问题。\n源代码是给开发者的而不是计算机的。计算机只关心1和0.有无限种程序能产生一样的1和0序列。我们编写源代码为了使得我们能够以一种有含义并且准确的方式理解代码是干嘛的。\n由于我们的大脑很难处理异步，所以我们需要找出一种更加同步的方式来编写异步代码，隐藏具体的异步实现。\n例如，如果下面这段代码能像我们需要的那样运行并且不会阻塞，那么它是不是更好理解了呢？\n```javascript\nresponse = makeAjaxRequest(url) ;\nalert(\"Response:\" + response) ;\n```\n如果我们可以像这样编码，那么我们就可以隐藏或者抽象`makeAjaxRequest()`的异步本质，不需要担心具体细节。\n换句话说，我们能使得异步代码只出现在具体的实现上，把这些烦人的东西埋在属于它的地方。\n## 总结\n我们还没有解决问题。但是至少我们知道了问题是什么：用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。\n我们需要的只是一种以同步的代码来尽可能隐藏具体的异步实现的方式，这样我们的大脑更好理解。\n我们的目标是以同步的方式来编码而不需要关系它的实现的同步还是异步。\n在第二部分:转换的问题中，我会着手处理“回调地狱”来解释这些问题，我们也将看到Promises是如何搞定它的\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n\n原文地址：http://blog.getify.com/promises-part-1/\n","source":"_posts/understand-promise-1.md","raw":"title: (译)深入理解Promise五部曲：1.异步问题\ndate: 2014-06-23 14:46:53\ntags: ['promise']\n---\n在微博上看到有人分享LabJS作者写的关于Promise的博客，看了下觉得写得很好，分五个部分讲解了Promise的来龙去脉。从这篇文章开始，我会陆续把五篇博客翻译出来跟大家分享，在大牛的带领下真正理解Promise。卖个关子，作者看待Promise的角度跟我一直以来看到的讲解Promise的角度完全不一样，不只是定留在解决回调金字塔上，至少我没想到Promise竟然有这么重要的意义。先上第一篇。\n<!-- more -->\n在这篇文章中，我会解释我们为什么需要使用一个更好的方式(比如Promise)来进行异步流程的编写。\n## 异步\n你肯定听说过Javascript中的异步编程，但是它到底是什么呢?\n比如当你发生一个Ajax请求，你通常会提供一个回调函数，这个回调函数会在请求返回的时候被调用。但是你是否思考过你的回调函数在其他代码也需要运行的时候是如何被调用的呢？如果两个回调函数同时都要运行会怎样呢？JS引擎会如何处理这个问题呢？\n为了理解异步到底是什么，你首先需要理解一个问题：JS引擎是**单线程**的。这意味着在任何环境中，只有一段JS代码会被执行。但是什么叫一段JS代码呢？总的来说，每个函数是一个不可分割的片段或者代码块。当JS引擎开始执行一个函数(比如回调函数)时，它就会把这个函数执行完，也就是说只有执行完这段代码才会继续执行后面的代码。\n换句话说，JS引擎就像一个主题公园中的游乐项目，这个项目每次只能一个人玩儿，人们会排成一个长长的队。大家一个个上去玩儿，下来一个然后再上去一个。如果你要玩儿这个项目你只能在队尾排队等待。幸运的是，每个人都很快就下来了，所以这个队伍移动得很快。\n上面说的队伍在技术上被叫做`事件轮询`。它尽可能快的进行轮询，如果事件队列中有代码需要执行，它会让JS引擎执行这段代码，然后移到下一个需要执行的代码，或者等待新的代码进来。\n## 并发\n如果程序在一个时间只有一个任务在执行，这样明显是低效而且有限制性的。\n如果你点击一个按钮提交一个表单，然后你的鼠标就会被冻结并且你不能滚动页面，这个情况会持续几秒直到请求返回，这样肯定会带来很差的用户体验。\n这就是为什么真实的程序会有很多任务在运行而不是就只有一个任务，但是JS引擎是怎么在单线程的环境下实现的呢？\n你应该想到每个代码块运行只要很短的时间，通常不到1毫秒。你一眨眼的时间，JS引擎会执行上千百个这样的代码块。但是并不是所有的代码块都是为了执行同一个任务。比如，当你点击提交按钮之后，你也可以点击导航或者滚动页面等等。每个任务都会被分为很多个原子操作，执行这些原子操作会非常快。\n比如：\n**Task A**\n\n- step1\n- step2\n- step3\n- step4\n\n**Task B**\n\n- step1\n- step2\n\nJS引擎肯定不能在执行A:1步骤的同时执行B:1。但是Task B不需要等到Task A执行完后再执行，因为引擎可以在每个独立的原子操作之间快速的切换，可能是按下面的顺序执行的：\n\n- A:1\n- B:1\n- A:2\n- B:2(Task B完成)\n- A:3\n- A:4(Task A完成)\n\n所以，事实上Task A和Task B是可以\"同时\"运行的，通过穿插地执行它们的每个原子操作，这叫做并发，换句话说，Task A和Task B是并发的。\n我们很容易就会把并发和并行弄混。在真正并行的系统中，你会有多个线程，可能一个线程执行Task A同时另一个线程执行Task B。这也意味着，A:1的运行不会阻塞B:1的运行。\n这就好像有主题公园中有两个分开的游乐项目，会有两队人在排队，它们互相不影响。\nJS事件轮询是一个简单的并发模型。它只允许把每个事件添加到事件队列的队尾，而这个队列是先进先出的。当条件允许时，回调函数就会被运行。\n## 同步情况下的异步\n在JS中编写异步代码一个巧妙但是烦恼的问题是JS引擎实际执行代码的方式跟我们看上去不大一样。例如：\n```javascript\nmakeAjaxRequest(url,function(response){\n    alert(\"Response:\" + response) ;\n}) ;\n```\n你会怎么描述这段代码的流程呢？\n大多数开发者大概会这么说：\n1. 发送Ajax请求\n2. 等到请求完成的时候，弹出提示框\n但是这跟JS引擎实际的执行情况相比还不够准确。\n这个问题主要是因为我们大脑习惯同步的方式。在上面这个描述中，我们使用“等到。。。的时候”来解释，这就也是说我们会阻塞等待Ajax请求，然后继续执行后面的程序。\nJS在步骤1和步骤2之间不会阻塞。一个更准确的描述上面这段代码的方式是：\n1. 发送Ajax请求\n2. 注册回调函数\n3. 继续向下执行\n4. 在未来某个时间点，惊呼“Oh，我刚才得到一个返回！”。现在，返回去执行注册的那个回调函数。\n这两个解释的区别似乎没什么大不了的，但是我们跳过第三步的思考方式是一个大问题。\n源代码是给开发者的而不是计算机的。计算机只关心1和0.有无限种程序能产生一样的1和0序列。我们编写源代码为了使得我们能够以一种有含义并且准确的方式理解代码是干嘛的。\n由于我们的大脑很难处理异步，所以我们需要找出一种更加同步的方式来编写异步代码，隐藏具体的异步实现。\n例如，如果下面这段代码能像我们需要的那样运行并且不会阻塞，那么它是不是更好理解了呢？\n```javascript\nresponse = makeAjaxRequest(url) ;\nalert(\"Response:\" + response) ;\n```\n如果我们可以像这样编码，那么我们就可以隐藏或者抽象`makeAjaxRequest()`的异步本质，不需要担心具体细节。\n换句话说，我们能使得异步代码只出现在具体的实现上，把这些烦人的东西埋在属于它的地方。\n## 总结\n我们还没有解决问题。但是至少我们知道了问题是什么：用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。\n我们需要的只是一种以同步的代码来尽可能隐藏具体的异步实现的方式，这样我们的大脑更好理解。\n我们的目标是以同步的方式来编码而不需要关系它的实现的同步还是异步。\n在第二部分:转换的问题中，我会着手处理“回调地狱”来解释这些问题，我们也将看到Promises是如何搞定它的\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n\n原文地址：http://blog.getify.com/promises-part-1/\n","slug":"understand-promise-1","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvl1000u0povn49b6fpk","content":"<p>在微博上看到有人分享LabJS作者写的关于Promise的博客，看了下觉得写得很好，分五个部分讲解了Promise的来龙去脉。从这篇文章开始，我会陆续把五篇博客翻译出来跟大家分享，在大牛的带领下真正理解Promise。卖个关子，作者看待Promise的角度跟我一直以来看到的讲解Promise的角度完全不一样，不只是定留在解决回调金字塔上，至少我没想到Promise竟然有这么重要的意义。先上第一篇。<br><a id=\"more\"></a><br>在这篇文章中，我会解释我们为什么需要使用一个更好的方式(比如Promise)来进行异步流程的编写。</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>你肯定听说过Javascript中的异步编程，但是它到底是什么呢?<br>比如当你发生一个Ajax请求，你通常会提供一个回调函数，这个回调函数会在请求返回的时候被调用。但是你是否思考过你的回调函数在其他代码也需要运行的时候是如何被调用的呢？如果两个回调函数同时都要运行会怎样呢？JS引擎会如何处理这个问题呢？<br>为了理解异步到底是什么，你首先需要理解一个问题：JS引擎是<strong>单线程</strong>的。这意味着在任何环境中，只有一段JS代码会被执行。但是什么叫一段JS代码呢？总的来说，每个函数是一个不可分割的片段或者代码块。当JS引擎开始执行一个函数(比如回调函数)时，它就会把这个函数执行完，也就是说只有执行完这段代码才会继续执行后面的代码。<br>换句话说，JS引擎就像一个主题公园中的游乐项目，这个项目每次只能一个人玩儿，人们会排成一个长长的队。大家一个个上去玩儿，下来一个然后再上去一个。如果你要玩儿这个项目你只能在队尾排队等待。幸运的是，每个人都很快就下来了，所以这个队伍移动得很快。<br>上面说的队伍在技术上被叫做<code>事件轮询</code>。它尽可能快的进行轮询，如果事件队列中有代码需要执行，它会让JS引擎执行这段代码，然后移到下一个需要执行的代码，或者等待新的代码进来。</p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p>如果程序在一个时间只有一个任务在执行，这样明显是低效而且有限制性的。<br>如果你点击一个按钮提交一个表单，然后你的鼠标就会被冻结并且你不能滚动页面，这个情况会持续几秒直到请求返回，这样肯定会带来很差的用户体验。<br>这就是为什么真实的程序会有很多任务在运行而不是就只有一个任务，但是JS引擎是怎么在单线程的环境下实现的呢？<br>你应该想到每个代码块运行只要很短的时间，通常不到1毫秒。你一眨眼的时间，JS引擎会执行上千百个这样的代码块。但是并不是所有的代码块都是为了执行同一个任务。比如，当你点击提交按钮之后，你也可以点击导航或者滚动页面等等。每个任务都会被分为很多个原子操作，执行这些原子操作会非常快。<br>比如：<br><strong>Task A</strong></p>\n<ul>\n<li>step1</li>\n<li>step2</li>\n<li>step3</li>\n<li>step4</li>\n</ul>\n<p><strong>Task B</strong></p>\n<ul>\n<li>step1</li>\n<li>step2</li>\n</ul>\n<p>JS引擎肯定不能在执行A:1步骤的同时执行B:1。但是Task B不需要等到Task A执行完后再执行，因为引擎可以在每个独立的原子操作之间快速的切换，可能是按下面的顺序执行的：</p>\n<ul>\n<li>A:1</li>\n<li>B:1</li>\n<li>A:2</li>\n<li>B:2(Task B完成)</li>\n<li>A:3</li>\n<li>A:4(Task A完成)</li>\n</ul>\n<p>所以，事实上Task A和Task B是可以”同时”运行的，通过穿插地执行它们的每个原子操作，这叫做并发，换句话说，Task A和Task B是并发的。<br>我们很容易就会把并发和并行弄混。在真正并行的系统中，你会有多个线程，可能一个线程执行Task A同时另一个线程执行Task B。这也意味着，A:1的运行不会阻塞B:1的运行。<br>这就好像有主题公园中有两个分开的游乐项目，会有两队人在排队，它们互相不影响。<br>JS事件轮询是一个简单的并发模型。它只允许把每个事件添加到事件队列的队尾，而这个队列是先进先出的。当条件允许时，回调函数就会被运行。</p>\n<h2 id=\"同步情况下的异步\"><a href=\"#同步情况下的异步\" class=\"headerlink\" title=\"同步情况下的异步\"></a>同步情况下的异步</h2><p>在JS中编写异步代码一个巧妙但是烦恼的问题是JS引擎实际执行代码的方式跟我们看上去不大一样。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">makeAjaxRequest(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Response:\"</span> + response) ;</div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>你会怎么描述这段代码的流程呢？<br>大多数开发者大概会这么说：</p>\n<ol>\n<li>发送Ajax请求</li>\n<li>等到请求完成的时候，弹出提示框<br>但是这跟JS引擎实际的执行情况相比还不够准确。<br>这个问题主要是因为我们大脑习惯同步的方式。在上面这个描述中，我们使用“等到。。。的时候”来解释，这就也是说我们会阻塞等待Ajax请求，然后继续执行后面的程序。<br>JS在步骤1和步骤2之间不会阻塞。一个更准确的描述上面这段代码的方式是：</li>\n<li>发送Ajax请求</li>\n<li>注册回调函数</li>\n<li>继续向下执行</li>\n<li>在未来某个时间点，惊呼“Oh，我刚才得到一个返回！”。现在，返回去执行注册的那个回调函数。<br>这两个解释的区别似乎没什么大不了的，但是我们跳过第三步的思考方式是一个大问题。<br>源代码是给开发者的而不是计算机的。计算机只关心1和0.有无限种程序能产生一样的1和0序列。我们编写源代码为了使得我们能够以一种有含义并且准确的方式理解代码是干嘛的。<br>由于我们的大脑很难处理异步，所以我们需要找出一种更加同步的方式来编写异步代码，隐藏具体的异步实现。<br>例如，如果下面这段代码能像我们需要的那样运行并且不会阻塞，那么它是不是更好理解了呢？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">response = makeAjaxRequest(url) ;</div><div class=\"line\">alert(<span class=\"string\">\"Response:\"</span> + response) ;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果我们可以像这样编码，那么我们就可以隐藏或者抽象<code>makeAjaxRequest()</code>的异步本质，不需要担心具体细节。<br>换句话说，我们能使得异步代码只出现在具体的实现上，把这些烦人的东西埋在属于它的地方。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们还没有解决问题。但是至少我们知道了问题是什么：用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。<br>我们需要的只是一种以同步的代码来尽可能隐藏具体的异步实现的方式，这样我们的大脑更好理解。<br>我们的目标是以同步的方式来编码而不需要关系它的实现的同步还是异步。<br>在第二部分:转换的问题中，我会着手处理“回调地狱”来解释这些问题，我们也将看到Promises是如何搞定它的</p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-1/\" target=\"_blank\" rel=\"external\">http://blog.getify.com/promises-part-1/</a></p>\n","excerpt":"<p>在微博上看到有人分享LabJS作者写的关于Promise的博客，看了下觉得写得很好，分五个部分讲解了Promise的来龙去脉。从这篇文章开始，我会陆续把五篇博客翻译出来跟大家分享，在大牛的带领下真正理解Promise。卖个关子，作者看待Promise的角度跟我一直以来看到的讲解Promise的角度完全不一样，不只是定留在解决回调金字塔上，至少我没想到Promise竟然有这么重要的意义。先上第一篇。<br>","more":"<br>在这篇文章中，我会解释我们为什么需要使用一个更好的方式(比如Promise)来进行异步流程的编写。</p>\n<h2 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h2><p>你肯定听说过Javascript中的异步编程，但是它到底是什么呢?<br>比如当你发生一个Ajax请求，你通常会提供一个回调函数，这个回调函数会在请求返回的时候被调用。但是你是否思考过你的回调函数在其他代码也需要运行的时候是如何被调用的呢？如果两个回调函数同时都要运行会怎样呢？JS引擎会如何处理这个问题呢？<br>为了理解异步到底是什么，你首先需要理解一个问题：JS引擎是<strong>单线程</strong>的。这意味着在任何环境中，只有一段JS代码会被执行。但是什么叫一段JS代码呢？总的来说，每个函数是一个不可分割的片段或者代码块。当JS引擎开始执行一个函数(比如回调函数)时，它就会把这个函数执行完，也就是说只有执行完这段代码才会继续执行后面的代码。<br>换句话说，JS引擎就像一个主题公园中的游乐项目，这个项目每次只能一个人玩儿，人们会排成一个长长的队。大家一个个上去玩儿，下来一个然后再上去一个。如果你要玩儿这个项目你只能在队尾排队等待。幸运的是，每个人都很快就下来了，所以这个队伍移动得很快。<br>上面说的队伍在技术上被叫做<code>事件轮询</code>。它尽可能快的进行轮询，如果事件队列中有代码需要执行，它会让JS引擎执行这段代码，然后移到下一个需要执行的代码，或者等待新的代码进来。</p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p>如果程序在一个时间只有一个任务在执行，这样明显是低效而且有限制性的。<br>如果你点击一个按钮提交一个表单，然后你的鼠标就会被冻结并且你不能滚动页面，这个情况会持续几秒直到请求返回，这样肯定会带来很差的用户体验。<br>这就是为什么真实的程序会有很多任务在运行而不是就只有一个任务，但是JS引擎是怎么在单线程的环境下实现的呢？<br>你应该想到每个代码块运行只要很短的时间，通常不到1毫秒。你一眨眼的时间，JS引擎会执行上千百个这样的代码块。但是并不是所有的代码块都是为了执行同一个任务。比如，当你点击提交按钮之后，你也可以点击导航或者滚动页面等等。每个任务都会被分为很多个原子操作，执行这些原子操作会非常快。<br>比如：<br><strong>Task A</strong></p>\n<ul>\n<li>step1</li>\n<li>step2</li>\n<li>step3</li>\n<li>step4</li>\n</ul>\n<p><strong>Task B</strong></p>\n<ul>\n<li>step1</li>\n<li>step2</li>\n</ul>\n<p>JS引擎肯定不能在执行A:1步骤的同时执行B:1。但是Task B不需要等到Task A执行完后再执行，因为引擎可以在每个独立的原子操作之间快速的切换，可能是按下面的顺序执行的：</p>\n<ul>\n<li>A:1</li>\n<li>B:1</li>\n<li>A:2</li>\n<li>B:2(Task B完成)</li>\n<li>A:3</li>\n<li>A:4(Task A完成)</li>\n</ul>\n<p>所以，事实上Task A和Task B是可以”同时”运行的，通过穿插地执行它们的每个原子操作，这叫做并发，换句话说，Task A和Task B是并发的。<br>我们很容易就会把并发和并行弄混。在真正并行的系统中，你会有多个线程，可能一个线程执行Task A同时另一个线程执行Task B。这也意味着，A:1的运行不会阻塞B:1的运行。<br>这就好像有主题公园中有两个分开的游乐项目，会有两队人在排队，它们互相不影响。<br>JS事件轮询是一个简单的并发模型。它只允许把每个事件添加到事件队列的队尾，而这个队列是先进先出的。当条件允许时，回调函数就会被运行。</p>\n<h2 id=\"同步情况下的异步\"><a href=\"#同步情况下的异步\" class=\"headerlink\" title=\"同步情况下的异步\"></a>同步情况下的异步</h2><p>在JS中编写异步代码一个巧妙但是烦恼的问题是JS引擎实际执行代码的方式跟我们看上去不大一样。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">makeAjaxRequest(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Response:\"</span> + response) ;</div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>你会怎么描述这段代码的流程呢？<br>大多数开发者大概会这么说：</p>\n<ol>\n<li>发送Ajax请求</li>\n<li>等到请求完成的时候，弹出提示框<br>但是这跟JS引擎实际的执行情况相比还不够准确。<br>这个问题主要是因为我们大脑习惯同步的方式。在上面这个描述中，我们使用“等到。。。的时候”来解释，这就也是说我们会阻塞等待Ajax请求，然后继续执行后面的程序。<br>JS在步骤1和步骤2之间不会阻塞。一个更准确的描述上面这段代码的方式是：</li>\n<li>发送Ajax请求</li>\n<li>注册回调函数</li>\n<li>继续向下执行</li>\n<li>在未来某个时间点，惊呼“Oh，我刚才得到一个返回！”。现在，返回去执行注册的那个回调函数。<br>这两个解释的区别似乎没什么大不了的，但是我们跳过第三步的思考方式是一个大问题。<br>源代码是给开发者的而不是计算机的。计算机只关心1和0.有无限种程序能产生一样的1和0序列。我们编写源代码为了使得我们能够以一种有含义并且准确的方式理解代码是干嘛的。<br>由于我们的大脑很难处理异步，所以我们需要找出一种更加同步的方式来编写异步代码，隐藏具体的异步实现。<br>例如，如果下面这段代码能像我们需要的那样运行并且不会阻塞，那么它是不是更好理解了呢？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">response = makeAjaxRequest(url) ;</div><div class=\"line\">alert(<span class=\"string\">\"Response:\"</span> + response) ;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果我们可以像这样编码，那么我们就可以隐藏或者抽象<code>makeAjaxRequest()</code>的异步本质，不需要担心具体细节。<br>换句话说，我们能使得异步代码只出现在具体的实现上，把这些烦人的东西埋在属于它的地方。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们还没有解决问题。但是至少我们知道了问题是什么：用异步的方式来表达异步的代码是艰难的，甚至很难用我们的大脑来理解。<br>我们需要的只是一种以同步的代码来尽可能隐藏具体的异步实现的方式，这样我们的大脑更好理解。<br>我们的目标是以同步的方式来编码而不需要关系它的实现的同步还是异步。<br>在第二部分:转换的问题中，我会着手处理“回调地狱”来解释这些问题，我们也将看到Promises是如何搞定它的</p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-1/\">http://blog.getify.com/promises-part-1/</a></p>"},{"title":"(译)深入理解Promise五部曲：2.控制权转换问题","date":"2014-06-29T06:46:55.000Z","_content":"> 厦门旅行归来，继续理解Promise\n\n在上一篇[深入理解Promise五部曲:1.异步问题](/#/blog/2014/06/23/understand-promise-1/)中，我们揭示了JS的异步事件轮询并发模型并且解释了多任务是如何相互穿插使得它们看起来像是同时运行的。然后我们讨论了为什么我们努力地在我们的代码里表达这些东西以及为什么我们的大脑不善于理解它们。\n<!-- more -->\n我们现在要找出一个更好的方式来表达异步流程，然后看看Promises是怎么解决这个问题的。\n## 回调嵌套\nJS从一开始就使用事件轮询的并发模型。我们一直以来都在写异步的程序。直到最近，我们仍然在用简单的回调函数来处理异步的问题。\n\n```javascript\nmakeAjaxRequest(url,function(respnose){\n    alert(\"Response:\" + response) ;\n}) ;\n```\n\n当我们只有一个异步任务的时候使用回调函数看起来还不会有什么问题。但是，实际是我们完成一个任务通常需要多个异步操作。例如：\n```javascript\nbtn.addEventListener(\"click\",function(evt){\n    makeAjaxRequest(url,function(response){\n        makeAjaxRequest(anotherURL + \"?resp=\" + response,function(response2){\n            alert(\"Response2:\" + response) ;\n        })\n    }) ;\n},false) ;\n```\n把一系列异步操作链接在一起最自然的方式就是使用回调嵌套，步骤2嵌套在步骤1中然后步骤3嵌套在步骤2中，等等。\n## 回调地狱\n你使用越多的回调，就会有越多的嵌套，不断缩进意大利面条似的代码。很显然，这种代码难以编写，难以理解而且难以维护。如果我们花点时间来理清这些代码往往会让我们事半功倍。\n这类嵌套/缩进经常被叫做\"回调地狱\"。有时也被叫做\"回调金字塔\"，专指由于代码不断缩进所形成的金字塔形状，缩进越多金字塔形状越明显。\n但是我还是觉得\"回调地狱\"真的跟嵌套和缩进扯不上太大的关系。如果之前有人跟你说回调地狱就是指嵌套和缩进的话，不要相信他，因为他们并不理解回调真正的问题在哪儿。\n## 可靠性缺失\n回调(无论是否有嵌套)的真正问题是远比编辑器中的空白符严重。\n让我们来分析下下面这个简单的回调发生了什么\n```javascript\n//1.everything in my program before now\n\nsomeAsyncThing(function(){\n    //2.everything in my program for later\n}) ;\n```\n你看清这段代码说了什么吗？你从根本上把你的程序分成了两个部分：\n\n1. 直到现在为止发生的事情\n2. 以后会发生的事情\n\n换句话说，你把第二部分代码包装在一个回调函数中然后延迟到后面执行。\n但是这并不是问题，真正问题是在1和2之间发生了什么。请问在这段时间内是谁在控制这些。\n`someAsyncThing(..)`控制着这些。是你自己拥有并管理`someAsyncThing()`吗？许多时候不是。更重要的是，你有多信任`someAsyncThing(..)`？\n你会问，信任什么？不管你意识到没有，你潜在的相信`someAsyncThing(..)`会做到下面这些：\n\n1. 不会太早调用我的回调函数\n2. 不会太迟调用我的回调函数(1,2就是说会在适当的时候调用回调函数)\n3. 不会调用我的回调太少次(不会少于实际应该调用的次数，比如不会漏掉函数调用)\n4. 不会调用我的回调太多次(不会多于实际应该调用的次数，比如重复调用)\n5. 会给我的回调提供必要的参数\n6. 在我的回调失败的时候会提醒我\n\n咳！你也太信任它了！\n实际上，这里真正的问题是由于回调引起的**控制转移**。\n在你的程序的前半部分，你控制着程序的进程。现在你转移了控制权，`someAsyncThing(..)`控制了你剩余程序什么时候返回以及是否返回。\n**控制转移**表明了你的代码和其他人的代码之间的过度信任关系。\n\n## 恐吓战术\n当`someAsyncThing(..)`是第三方库的一个方法并且你无法控制不能检查的时候会发生什么？只能祝你好运了！\n比如你有一个电子商务网站，用户就要完成付款的步骤了，但是在扣费之前有最后一个步骤，它需要通知一个第三方跟踪库。你调用他们API，并且提供一个回调函数。大部分情况下，这不会有什么问题。\n但是，在这次业务中，有一些你和他们都没有意识到的奇怪的Bug，结果就是第三方库在超时之前五秒的时间内每隔一秒就会调用一次回调函数。猜猜发生了什么？在这个回调里调用了`chargeTheCreditCard()`。\nOops，消费者被扣了五次钱。为什么？因为你相信第三方库只会调用你的回调一次。\n所以你不得不被丢鸡蛋并且给消费者道歉归还多扣的四次钱。然后你立刻采取措施确保这种情况不会再发生。你会怎么做呢？\n你可能会创建一些状态值来跟踪你的回调，当它被调用一次之后会被标记，然后就可以忽略任何意外的重复调用。无论第三方如何道歉并且承诺他们的bug已经修复了，你再也不会相信他们了，不是吗？\n这看起来像一个愚蠢的场景，但是这可能比你想得还普遍。我们的程序变得越复杂，我们就会集成越多的第三方/外部代码，这种愚蠢的场景就越容易发生。\n\n## 布基胶带\n你给你的回调加入了状态跟踪机制，然后睡了一个好觉。但是实际上你只是处理了信任列表许多项目中的一项。\n当另一个bug造成另一个可靠性丢失的情况时会发生什么？更多的改造，更多丑陋的代码。\n更多布基胶带。你必须不断修复回调中的漏洞。无论你是多优秀的开发者，无论你的布基胶带多漂亮，事实就是：在你信任墙上的回调充满了漏洞。\n## Promise解决方案\n一些人喜欢使用布基绷带并且给信任墙上的洞打补丁。\n但是在某些时候，你也许会问自己，是否有其他模式来表达异步流程控制，不需要忍受所有这些可靠性丢失？\n是的！Promises就是一个方法。\n在我解释它们是怎么工作之前，让我来解释一些它们背后的概念问题。\n### 快餐业务\n你走进你最喜爱的快餐店，走到前台要了一些美味的食物。收银员告诉你一共7.53美元然后你把钱给她。她会给回你什么东西呢？\n如果你足够幸运，你要的食物已经准备好了。但是大多数情况下，你会拿到一个写着序列号的小票，是吧？所以你站到一边等待你的食物。\n很快，你听到广播响起：“请317号取餐”。正好是你的号码。你走到前台用小票换来你的食物！谢天谢地，你不用忍受太长的等待。\n刚才发生的是一个对于Promises很好的比喻。你走到前台开始一个业务，但是这个业务不能马上完成。所以，你得到一个在迟些时候完成业务(你的食物)的promise(小票)。一旦你的食物准备就绪，你会得到通知然后你第一时间用你的promise(小票)换来了你想要的东西：食物。\n换句话说，带有序列号的小票就是对于一个未来结果的承诺。\n### 完成事件\n想想上面调用`someAsyncThing(..)`的例子。如果你可以调用它然后订阅一个事件，当这个调用完成的时候你会得到通知而不是传递一个回调给它，这样难道不会更好吗？\n例如，想象这样的代码：\n```javascript\nvar listener = someAsyncThing(..) ;\nlistener.on(\"completion\",function(data){\n    //keep going now !\n}) ;\n```\n实际上，如果我们还可以监听调用失败的事件那就更好了。\n```javascript\nlistener.on(\"failure\",function(){\n    //Oops,What's plan B?\n}) ;\n```\n现在，对于我们调用的每个函数，我们能够在函数成功执行或者失败的时候得到通知。换句话说，每个函数调用会是流程控制图上的决策点。\n\n### Promise\"事件\"\nPromises就像是一个函数在说“我这有一个事件监听器，当我完成或者失败的时候会被通知到。”\n我们看看它是怎么工作的：\n```javascript\nfunction someAsyncThing(){\n    var p = new Promise(function(resolve,reject){\n        //at some later time,call 'resolve()' or 'reject()'\n    }) ;\n    return p ;\n}\nvar p = someAsyncThing() ;\np.then(\n    function(){\n        //success happened    \n    },\n    function(){\n        //failure happened\n    }\n) ;\n```\n你只需要监听`then`事件，然后通过知道哪个回调函数被调用就可以知道是成功还是失败。\n\n### 逆转\n通过promises，我们重新获得了程序的控制权而不是通过给第三方库传递回调来转移控制权。这是javascript中异步控制流程表达上一个很大的进步。\n“等等”，你说。“我仍然要传递回调啊。有什么不一样？！”\n嗯。。。好眼力！\n有些人声称Promises通过移除回调来解决“回调地狱”的问题。并不是这样！在一些情况下，你甚至需要比以前更多的回调。同时，根据你如何编写你的代码，你可能仍然需要把promises嵌套在别的promises中！\n批判性地看，promises所做的只是改变了你传递回调的地方。\n本质上，如果你把你的回调传递给拥有良好保证和可预测性的中立Promises机制，你实质上重新获得了对于后续程序能很稳定并且运行良好的可靠性。\n标准的promises机制有以下这些保证：\n1. 如果promise被resolve，它要不是success就是failure，不可能同时存在。\n2. 一旦promise被resolve，它就再也不会被resolve(不会出现重复调用)。\n3. 如果promise返回了成功的信息，那么你绑定在成功事件上的回调会得到这个消息。\n4. 如果发生了错误，promise会收到一个带有错误信息的错误通知。\n5. 无论promise最后的结果是什么(success或者failure)，他就不会改变了，你总是可以获得这个消息只要你不销毁promise。\n\n如果我们从`someAsyncThing(..)`得到的promise不是可用的标准的promise会发生什么？如果我们无法判断我们是否可相信它是真的promise会怎么样？\n简单！只要你得到的是“类promise”的，也就是拥有`then(..)`方法可以注册success和failure事件，那么你就可用使用这个“类promise”然后把它包装在一个你信任的promise中。\n```javascript\nvar notSureWhatItIs = someAsyncThing();\n\nvar p = Promise.resolve( notSureWhatItIs );\n\n// now we can trust `p`!!\np.then(\n    function(){\n        // success happened\n    },\n    function(){\n        // failure happened\n    }\n);\n```\npromises的最重要的特点就是它把我们处理任何函数调用的成功或者失败的方式规范成了可预测的形式，特别是如果这个调用实际上的异步的。\n在这个规范过程中，它使我们的程序在可控制的位置而不是把控制权交给一个不可相信的第三方。\n## 总结\n不要管你所听到的，“回调地狱”不是真的关于函数嵌套和它们在代码编辑器中产生的缩进。\n它是关于**控制转移**的，是指我们由于把控制权交给一个我们不能信任的第三方而产生的对我们的程序失去控制的现象。\nPromises逆转了这个情况，它使得我们重新获得控制权。相比传递回调给第三方函数，函数返回一个promise对象，我们可以使用它来监听函数的成功或失败。\n在promise我们仍然使用回调，但是重要的是标准的promise机制使我们可以信任它们行为的正确性。我们不需要想办法来处理这些可靠性问题。\n在第三部分：可靠性问题中，我会说道一个promises可靠性机制中很特别的部分：一个promise的状态必须是可靠并且不可变的。\n\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n\n原文地址：http://blog.getify.com/promises-part-2/\n","source":"_posts/understand-promise-2.md","raw":"title: (译)深入理解Promise五部曲：2.控制权转换问题\ndate: 2014-06-29 14:46:55\ntags: ['promise']\n---\n> 厦门旅行归来，继续理解Promise\n\n在上一篇[深入理解Promise五部曲:1.异步问题](/#/blog/2014/06/23/understand-promise-1/)中，我们揭示了JS的异步事件轮询并发模型并且解释了多任务是如何相互穿插使得它们看起来像是同时运行的。然后我们讨论了为什么我们努力地在我们的代码里表达这些东西以及为什么我们的大脑不善于理解它们。\n<!-- more -->\n我们现在要找出一个更好的方式来表达异步流程，然后看看Promises是怎么解决这个问题的。\n## 回调嵌套\nJS从一开始就使用事件轮询的并发模型。我们一直以来都在写异步的程序。直到最近，我们仍然在用简单的回调函数来处理异步的问题。\n\n```javascript\nmakeAjaxRequest(url,function(respnose){\n    alert(\"Response:\" + response) ;\n}) ;\n```\n\n当我们只有一个异步任务的时候使用回调函数看起来还不会有什么问题。但是，实际是我们完成一个任务通常需要多个异步操作。例如：\n```javascript\nbtn.addEventListener(\"click\",function(evt){\n    makeAjaxRequest(url,function(response){\n        makeAjaxRequest(anotherURL + \"?resp=\" + response,function(response2){\n            alert(\"Response2:\" + response) ;\n        })\n    }) ;\n},false) ;\n```\n把一系列异步操作链接在一起最自然的方式就是使用回调嵌套，步骤2嵌套在步骤1中然后步骤3嵌套在步骤2中，等等。\n## 回调地狱\n你使用越多的回调，就会有越多的嵌套，不断缩进意大利面条似的代码。很显然，这种代码难以编写，难以理解而且难以维护。如果我们花点时间来理清这些代码往往会让我们事半功倍。\n这类嵌套/缩进经常被叫做\"回调地狱\"。有时也被叫做\"回调金字塔\"，专指由于代码不断缩进所形成的金字塔形状，缩进越多金字塔形状越明显。\n但是我还是觉得\"回调地狱\"真的跟嵌套和缩进扯不上太大的关系。如果之前有人跟你说回调地狱就是指嵌套和缩进的话，不要相信他，因为他们并不理解回调真正的问题在哪儿。\n## 可靠性缺失\n回调(无论是否有嵌套)的真正问题是远比编辑器中的空白符严重。\n让我们来分析下下面这个简单的回调发生了什么\n```javascript\n//1.everything in my program before now\n\nsomeAsyncThing(function(){\n    //2.everything in my program for later\n}) ;\n```\n你看清这段代码说了什么吗？你从根本上把你的程序分成了两个部分：\n\n1. 直到现在为止发生的事情\n2. 以后会发生的事情\n\n换句话说，你把第二部分代码包装在一个回调函数中然后延迟到后面执行。\n但是这并不是问题，真正问题是在1和2之间发生了什么。请问在这段时间内是谁在控制这些。\n`someAsyncThing(..)`控制着这些。是你自己拥有并管理`someAsyncThing()`吗？许多时候不是。更重要的是，你有多信任`someAsyncThing(..)`？\n你会问，信任什么？不管你意识到没有，你潜在的相信`someAsyncThing(..)`会做到下面这些：\n\n1. 不会太早调用我的回调函数\n2. 不会太迟调用我的回调函数(1,2就是说会在适当的时候调用回调函数)\n3. 不会调用我的回调太少次(不会少于实际应该调用的次数，比如不会漏掉函数调用)\n4. 不会调用我的回调太多次(不会多于实际应该调用的次数，比如重复调用)\n5. 会给我的回调提供必要的参数\n6. 在我的回调失败的时候会提醒我\n\n咳！你也太信任它了！\n实际上，这里真正的问题是由于回调引起的**控制转移**。\n在你的程序的前半部分，你控制着程序的进程。现在你转移了控制权，`someAsyncThing(..)`控制了你剩余程序什么时候返回以及是否返回。\n**控制转移**表明了你的代码和其他人的代码之间的过度信任关系。\n\n## 恐吓战术\n当`someAsyncThing(..)`是第三方库的一个方法并且你无法控制不能检查的时候会发生什么？只能祝你好运了！\n比如你有一个电子商务网站，用户就要完成付款的步骤了，但是在扣费之前有最后一个步骤，它需要通知一个第三方跟踪库。你调用他们API，并且提供一个回调函数。大部分情况下，这不会有什么问题。\n但是，在这次业务中，有一些你和他们都没有意识到的奇怪的Bug，结果就是第三方库在超时之前五秒的时间内每隔一秒就会调用一次回调函数。猜猜发生了什么？在这个回调里调用了`chargeTheCreditCard()`。\nOops，消费者被扣了五次钱。为什么？因为你相信第三方库只会调用你的回调一次。\n所以你不得不被丢鸡蛋并且给消费者道歉归还多扣的四次钱。然后你立刻采取措施确保这种情况不会再发生。你会怎么做呢？\n你可能会创建一些状态值来跟踪你的回调，当它被调用一次之后会被标记，然后就可以忽略任何意外的重复调用。无论第三方如何道歉并且承诺他们的bug已经修复了，你再也不会相信他们了，不是吗？\n这看起来像一个愚蠢的场景，但是这可能比你想得还普遍。我们的程序变得越复杂，我们就会集成越多的第三方/外部代码，这种愚蠢的场景就越容易发生。\n\n## 布基胶带\n你给你的回调加入了状态跟踪机制，然后睡了一个好觉。但是实际上你只是处理了信任列表许多项目中的一项。\n当另一个bug造成另一个可靠性丢失的情况时会发生什么？更多的改造，更多丑陋的代码。\n更多布基胶带。你必须不断修复回调中的漏洞。无论你是多优秀的开发者，无论你的布基胶带多漂亮，事实就是：在你信任墙上的回调充满了漏洞。\n## Promise解决方案\n一些人喜欢使用布基绷带并且给信任墙上的洞打补丁。\n但是在某些时候，你也许会问自己，是否有其他模式来表达异步流程控制，不需要忍受所有这些可靠性丢失？\n是的！Promises就是一个方法。\n在我解释它们是怎么工作之前，让我来解释一些它们背后的概念问题。\n### 快餐业务\n你走进你最喜爱的快餐店，走到前台要了一些美味的食物。收银员告诉你一共7.53美元然后你把钱给她。她会给回你什么东西呢？\n如果你足够幸运，你要的食物已经准备好了。但是大多数情况下，你会拿到一个写着序列号的小票，是吧？所以你站到一边等待你的食物。\n很快，你听到广播响起：“请317号取餐”。正好是你的号码。你走到前台用小票换来你的食物！谢天谢地，你不用忍受太长的等待。\n刚才发生的是一个对于Promises很好的比喻。你走到前台开始一个业务，但是这个业务不能马上完成。所以，你得到一个在迟些时候完成业务(你的食物)的promise(小票)。一旦你的食物准备就绪，你会得到通知然后你第一时间用你的promise(小票)换来了你想要的东西：食物。\n换句话说，带有序列号的小票就是对于一个未来结果的承诺。\n### 完成事件\n想想上面调用`someAsyncThing(..)`的例子。如果你可以调用它然后订阅一个事件，当这个调用完成的时候你会得到通知而不是传递一个回调给它，这样难道不会更好吗？\n例如，想象这样的代码：\n```javascript\nvar listener = someAsyncThing(..) ;\nlistener.on(\"completion\",function(data){\n    //keep going now !\n}) ;\n```\n实际上，如果我们还可以监听调用失败的事件那就更好了。\n```javascript\nlistener.on(\"failure\",function(){\n    //Oops,What's plan B?\n}) ;\n```\n现在，对于我们调用的每个函数，我们能够在函数成功执行或者失败的时候得到通知。换句话说，每个函数调用会是流程控制图上的决策点。\n\n### Promise\"事件\"\nPromises就像是一个函数在说“我这有一个事件监听器，当我完成或者失败的时候会被通知到。”\n我们看看它是怎么工作的：\n```javascript\nfunction someAsyncThing(){\n    var p = new Promise(function(resolve,reject){\n        //at some later time,call 'resolve()' or 'reject()'\n    }) ;\n    return p ;\n}\nvar p = someAsyncThing() ;\np.then(\n    function(){\n        //success happened    \n    },\n    function(){\n        //failure happened\n    }\n) ;\n```\n你只需要监听`then`事件，然后通过知道哪个回调函数被调用就可以知道是成功还是失败。\n\n### 逆转\n通过promises，我们重新获得了程序的控制权而不是通过给第三方库传递回调来转移控制权。这是javascript中异步控制流程表达上一个很大的进步。\n“等等”，你说。“我仍然要传递回调啊。有什么不一样？！”\n嗯。。。好眼力！\n有些人声称Promises通过移除回调来解决“回调地狱”的问题。并不是这样！在一些情况下，你甚至需要比以前更多的回调。同时，根据你如何编写你的代码，你可能仍然需要把promises嵌套在别的promises中！\n批判性地看，promises所做的只是改变了你传递回调的地方。\n本质上，如果你把你的回调传递给拥有良好保证和可预测性的中立Promises机制，你实质上重新获得了对于后续程序能很稳定并且运行良好的可靠性。\n标准的promises机制有以下这些保证：\n1. 如果promise被resolve，它要不是success就是failure，不可能同时存在。\n2. 一旦promise被resolve，它就再也不会被resolve(不会出现重复调用)。\n3. 如果promise返回了成功的信息，那么你绑定在成功事件上的回调会得到这个消息。\n4. 如果发生了错误，promise会收到一个带有错误信息的错误通知。\n5. 无论promise最后的结果是什么(success或者failure)，他就不会改变了，你总是可以获得这个消息只要你不销毁promise。\n\n如果我们从`someAsyncThing(..)`得到的promise不是可用的标准的promise会发生什么？如果我们无法判断我们是否可相信它是真的promise会怎么样？\n简单！只要你得到的是“类promise”的，也就是拥有`then(..)`方法可以注册success和failure事件，那么你就可用使用这个“类promise”然后把它包装在一个你信任的promise中。\n```javascript\nvar notSureWhatItIs = someAsyncThing();\n\nvar p = Promise.resolve( notSureWhatItIs );\n\n// now we can trust `p`!!\np.then(\n    function(){\n        // success happened\n    },\n    function(){\n        // failure happened\n    }\n);\n```\npromises的最重要的特点就是它把我们处理任何函数调用的成功或者失败的方式规范成了可预测的形式，特别是如果这个调用实际上的异步的。\n在这个规范过程中，它使我们的程序在可控制的位置而不是把控制权交给一个不可相信的第三方。\n## 总结\n不要管你所听到的，“回调地狱”不是真的关于函数嵌套和它们在代码编辑器中产生的缩进。\n它是关于**控制转移**的，是指我们由于把控制权交给一个我们不能信任的第三方而产生的对我们的程序失去控制的现象。\nPromises逆转了这个情况，它使得我们重新获得控制权。相比传递回调给第三方函数，函数返回一个promise对象，我们可以使用它来监听函数的成功或失败。\n在promise我们仍然使用回调，但是重要的是标准的promise机制使我们可以信任它们行为的正确性。我们不需要想办法来处理这些可靠性问题。\n在第三部分：可靠性问题中，我会说道一个promises可靠性机制中很特别的部分：一个promise的状态必须是可靠并且不可变的。\n\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n\n原文地址：http://blog.getify.com/promises-part-2/\n","slug":"understand-promise-2","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvl2000w0povta3wtvyb","content":"<blockquote>\n<p>厦门旅行归来，继续理解Promise</p>\n</blockquote>\n<p>在上一篇<a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲:1.异步问题</a>中，我们揭示了JS的异步事件轮询并发模型并且解释了多任务是如何相互穿插使得它们看起来像是同时运行的。然后我们讨论了为什么我们努力地在我们的代码里表达这些东西以及为什么我们的大脑不善于理解它们。<br><a id=\"more\"></a><br>我们现在要找出一个更好的方式来表达异步流程，然后看看Promises是怎么解决这个问题的。</p>\n<h2 id=\"回调嵌套\"><a href=\"#回调嵌套\" class=\"headerlink\" title=\"回调嵌套\"></a>回调嵌套</h2><p>JS从一开始就使用事件轮询的并发模型。我们一直以来都在写异步的程序。直到最近，我们仍然在用简单的回调函数来处理异步的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">makeAjaxRequest(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">respnose</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Response:\"</span> + response) ;</div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure>\n<p>当我们只有一个异步任务的时候使用回调函数看起来还不会有什么问题。但是，实际是我们完成一个任务通常需要多个异步操作。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">btn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</div><div class=\"line\">    makeAjaxRequest(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">        makeAjaxRequest(anotherURL + <span class=\"string\">\"?resp=\"</span> + response,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response2</span>)</span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">\"Response2:\"</span> + response) ;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;) ;</div><div class=\"line\">&#125;,<span class=\"literal\">false</span>) ;</div></pre></td></tr></table></figure></p>\n<p>把一系列异步操作链接在一起最自然的方式就是使用回调嵌套，步骤2嵌套在步骤1中然后步骤3嵌套在步骤2中，等等。</p>\n<h2 id=\"回调地狱\"><a href=\"#回调地狱\" class=\"headerlink\" title=\"回调地狱\"></a>回调地狱</h2><p>你使用越多的回调，就会有越多的嵌套，不断缩进意大利面条似的代码。很显然，这种代码难以编写，难以理解而且难以维护。如果我们花点时间来理清这些代码往往会让我们事半功倍。<br>这类嵌套/缩进经常被叫做”回调地狱”。有时也被叫做”回调金字塔”，专指由于代码不断缩进所形成的金字塔形状，缩进越多金字塔形状越明显。<br>但是我还是觉得”回调地狱”真的跟嵌套和缩进扯不上太大的关系。如果之前有人跟你说回调地狱就是指嵌套和缩进的话，不要相信他，因为他们并不理解回调真正的问题在哪儿。</p>\n<h2 id=\"可靠性缺失\"><a href=\"#可靠性缺失\" class=\"headerlink\" title=\"可靠性缺失\"></a>可靠性缺失</h2><p>回调(无论是否有嵌套)的真正问题是远比编辑器中的空白符严重。<br>让我们来分析下下面这个简单的回调发生了什么<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.everything in my program before now</span></div><div class=\"line\"></div><div class=\"line\">someAsyncThing(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.everything in my program for later</span></div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>你看清这段代码说了什么吗？你从根本上把你的程序分成了两个部分：</p>\n<ol>\n<li>直到现在为止发生的事情</li>\n<li>以后会发生的事情</li>\n</ol>\n<p>换句话说，你把第二部分代码包装在一个回调函数中然后延迟到后面执行。<br>但是这并不是问题，真正问题是在1和2之间发生了什么。请问在这段时间内是谁在控制这些。<br><code>someAsyncThing(..)</code>控制着这些。是你自己拥有并管理<code>someAsyncThing()</code>吗？许多时候不是。更重要的是，你有多信任<code>someAsyncThing(..)</code>？<br>你会问，信任什么？不管你意识到没有，你潜在的相信<code>someAsyncThing(..)</code>会做到下面这些：</p>\n<ol>\n<li>不会太早调用我的回调函数</li>\n<li>不会太迟调用我的回调函数(1,2就是说会在适当的时候调用回调函数)</li>\n<li>不会调用我的回调太少次(不会少于实际应该调用的次数，比如不会漏掉函数调用)</li>\n<li>不会调用我的回调太多次(不会多于实际应该调用的次数，比如重复调用)</li>\n<li>会给我的回调提供必要的参数</li>\n<li>在我的回调失败的时候会提醒我</li>\n</ol>\n<p>咳！你也太信任它了！<br>实际上，这里真正的问题是由于回调引起的<strong>控制转移</strong>。<br>在你的程序的前半部分，你控制着程序的进程。现在你转移了控制权，<code>someAsyncThing(..)</code>控制了你剩余程序什么时候返回以及是否返回。<br><strong>控制转移</strong>表明了你的代码和其他人的代码之间的过度信任关系。</p>\n<h2 id=\"恐吓战术\"><a href=\"#恐吓战术\" class=\"headerlink\" title=\"恐吓战术\"></a>恐吓战术</h2><p>当<code>someAsyncThing(..)</code>是第三方库的一个方法并且你无法控制不能检查的时候会发生什么？只能祝你好运了！<br>比如你有一个电子商务网站，用户就要完成付款的步骤了，但是在扣费之前有最后一个步骤，它需要通知一个第三方跟踪库。你调用他们API，并且提供一个回调函数。大部分情况下，这不会有什么问题。<br>但是，在这次业务中，有一些你和他们都没有意识到的奇怪的Bug，结果就是第三方库在超时之前五秒的时间内每隔一秒就会调用一次回调函数。猜猜发生了什么？在这个回调里调用了<code>chargeTheCreditCard()</code>。<br>Oops，消费者被扣了五次钱。为什么？因为你相信第三方库只会调用你的回调一次。<br>所以你不得不被丢鸡蛋并且给消费者道歉归还多扣的四次钱。然后你立刻采取措施确保这种情况不会再发生。你会怎么做呢？<br>你可能会创建一些状态值来跟踪你的回调，当它被调用一次之后会被标记，然后就可以忽略任何意外的重复调用。无论第三方如何道歉并且承诺他们的bug已经修复了，你再也不会相信他们了，不是吗？<br>这看起来像一个愚蠢的场景，但是这可能比你想得还普遍。我们的程序变得越复杂，我们就会集成越多的第三方/外部代码，这种愚蠢的场景就越容易发生。</p>\n<h2 id=\"布基胶带\"><a href=\"#布基胶带\" class=\"headerlink\" title=\"布基胶带\"></a>布基胶带</h2><p>你给你的回调加入了状态跟踪机制，然后睡了一个好觉。但是实际上你只是处理了信任列表许多项目中的一项。<br>当另一个bug造成另一个可靠性丢失的情况时会发生什么？更多的改造，更多丑陋的代码。<br>更多布基胶带。你必须不断修复回调中的漏洞。无论你是多优秀的开发者，无论你的布基胶带多漂亮，事实就是：在你信任墙上的回调充满了漏洞。</p>\n<h2 id=\"Promise解决方案\"><a href=\"#Promise解决方案\" class=\"headerlink\" title=\"Promise解决方案\"></a>Promise解决方案</h2><p>一些人喜欢使用布基绷带并且给信任墙上的洞打补丁。<br>但是在某些时候，你也许会问自己，是否有其他模式来表达异步流程控制，不需要忍受所有这些可靠性丢失？<br>是的！Promises就是一个方法。<br>在我解释它们是怎么工作之前，让我来解释一些它们背后的概念问题。</p>\n<h3 id=\"快餐业务\"><a href=\"#快餐业务\" class=\"headerlink\" title=\"快餐业务\"></a>快餐业务</h3><p>你走进你最喜爱的快餐店，走到前台要了一些美味的食物。收银员告诉你一共7.53美元然后你把钱给她。她会给回你什么东西呢？<br>如果你足够幸运，你要的食物已经准备好了。但是大多数情况下，你会拿到一个写着序列号的小票，是吧？所以你站到一边等待你的食物。<br>很快，你听到广播响起：“请317号取餐”。正好是你的号码。你走到前台用小票换来你的食物！谢天谢地，你不用忍受太长的等待。<br>刚才发生的是一个对于Promises很好的比喻。你走到前台开始一个业务，但是这个业务不能马上完成。所以，你得到一个在迟些时候完成业务(你的食物)的promise(小票)。一旦你的食物准备就绪，你会得到通知然后你第一时间用你的promise(小票)换来了你想要的东西：食物。<br>换句话说，带有序列号的小票就是对于一个未来结果的承诺。</p>\n<h3 id=\"完成事件\"><a href=\"#完成事件\" class=\"headerlink\" title=\"完成事件\"></a>完成事件</h3><p>想想上面调用<code>someAsyncThing(..)</code>的例子。如果你可以调用它然后订阅一个事件，当这个调用完成的时候你会得到通知而不是传递一个回调给它，这样难道不会更好吗？<br>例如，想象这样的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> listener = someAsyncThing(..) ;</div><div class=\"line\">listener.on(<span class=\"string\">\"completion\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//keep going now !</span></div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>实际上，如果我们还可以监听调用失败的事件那就更好了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">listener.on(<span class=\"string\">\"failure\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//Oops,What's plan B?</span></div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>现在，对于我们调用的每个函数，我们能够在函数成功执行或者失败的时候得到通知。换句话说，每个函数调用会是流程控制图上的决策点。</p>\n<h3 id=\"Promise”事件”\"><a href=\"#Promise”事件”\" class=\"headerlink\" title=\"Promise”事件”\"></a>Promise”事件”</h3><p>Promises就像是一个函数在说“我这有一个事件监听器，当我完成或者失败的时候会被通知到。”<br>我们看看它是怎么工作的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncThing</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//at some later time,call 'resolve()' or 'reject()'</span></div><div class=\"line\">    &#125;) ;</div><div class=\"line\">    <span class=\"keyword\">return</span> p ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = someAsyncThing() ;</div><div class=\"line\">p.then(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//success happened    </span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//failure happened</span></div><div class=\"line\">    &#125;</div><div class=\"line\">) ;</div></pre></td></tr></table></figure></p>\n<p>你只需要监听<code>then</code>事件，然后通过知道哪个回调函数被调用就可以知道是成功还是失败。</p>\n<h3 id=\"逆转\"><a href=\"#逆转\" class=\"headerlink\" title=\"逆转\"></a>逆转</h3><p>通过promises，我们重新获得了程序的控制权而不是通过给第三方库传递回调来转移控制权。这是javascript中异步控制流程表达上一个很大的进步。<br>“等等”，你说。“我仍然要传递回调啊。有什么不一样？！”<br>嗯。。。好眼力！<br>有些人声称Promises通过移除回调来解决“回调地狱”的问题。并不是这样！在一些情况下，你甚至需要比以前更多的回调。同时，根据你如何编写你的代码，你可能仍然需要把promises嵌套在别的promises中！<br>批判性地看，promises所做的只是改变了你传递回调的地方。<br>本质上，如果你把你的回调传递给拥有良好保证和可预测性的中立Promises机制，你实质上重新获得了对于后续程序能很稳定并且运行良好的可靠性。<br>标准的promises机制有以下这些保证：</p>\n<ol>\n<li>如果promise被resolve，它要不是success就是failure，不可能同时存在。</li>\n<li>一旦promise被resolve，它就再也不会被resolve(不会出现重复调用)。</li>\n<li>如果promise返回了成功的信息，那么你绑定在成功事件上的回调会得到这个消息。</li>\n<li>如果发生了错误，promise会收到一个带有错误信息的错误通知。</li>\n<li>无论promise最后的结果是什么(success或者failure)，他就不会改变了，你总是可以获得这个消息只要你不销毁promise。</li>\n</ol>\n<p>如果我们从<code>someAsyncThing(..)</code>得到的promise不是可用的标准的promise会发生什么？如果我们无法判断我们是否可相信它是真的promise会怎么样？<br>简单！只要你得到的是“类promise”的，也就是拥有<code>then(..)</code>方法可以注册success和failure事件，那么你就可用使用这个“类promise”然后把它包装在一个你信任的promise中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> notSureWhatItIs = someAsyncThing();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.resolve( notSureWhatItIs );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now we can trust `p`!!</span></div><div class=\"line\">p.then(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// success happened</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// failure happened</span></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>promises的最重要的特点就是它把我们处理任何函数调用的成功或者失败的方式规范成了可预测的形式，特别是如果这个调用实际上的异步的。<br>在这个规范过程中，它使我们的程序在可控制的位置而不是把控制权交给一个不可相信的第三方。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不要管你所听到的，“回调地狱”不是真的关于函数嵌套和它们在代码编辑器中产生的缩进。<br>它是关于<strong>控制转移</strong>的，是指我们由于把控制权交给一个我们不能信任的第三方而产生的对我们的程序失去控制的现象。<br>Promises逆转了这个情况，它使得我们重新获得控制权。相比传递回调给第三方函数，函数返回一个promise对象，我们可以使用它来监听函数的成功或失败。<br>在promise我们仍然使用回调，但是重要的是标准的promise机制使我们可以信任它们行为的正确性。我们不需要想办法来处理这些可靠性问题。<br>在第三部分：可靠性问题中，我会说道一个promises可靠性机制中很特别的部分：一个promise的状态必须是可靠并且不可变的。</p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-2/\" target=\"_blank\" rel=\"external\">http://blog.getify.com/promises-part-2/</a></p>\n","excerpt":"<blockquote>\n<p>厦门旅行归来，继续理解Promise</p>\n</blockquote>\n<p>在上一篇<a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲:1.异步问题</a>中，我们揭示了JS的异步事件轮询并发模型并且解释了多任务是如何相互穿插使得它们看起来像是同时运行的。然后我们讨论了为什么我们努力地在我们的代码里表达这些东西以及为什么我们的大脑不善于理解它们。<br>","more":"<br>我们现在要找出一个更好的方式来表达异步流程，然后看看Promises是怎么解决这个问题的。</p>\n<h2 id=\"回调嵌套\"><a href=\"#回调嵌套\" class=\"headerlink\" title=\"回调嵌套\"></a>回调嵌套</h2><p>JS从一开始就使用事件轮询的并发模型。我们一直以来都在写异步的程序。直到最近，我们仍然在用简单的回调函数来处理异步的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">makeAjaxRequest(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">respnose</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"Response:\"</span> + response) ;</div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure>\n<p>当我们只有一个异步任务的时候使用回调函数看起来还不会有什么问题。但是，实际是我们完成一个任务通常需要多个异步操作。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">btn.addEventListener(<span class=\"string\">\"click\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</div><div class=\"line\">    makeAjaxRequest(url,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">        makeAjaxRequest(anotherURL + <span class=\"string\">\"?resp=\"</span> + response,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response2</span>)</span>&#123;</div><div class=\"line\">            alert(<span class=\"string\">\"Response2:\"</span> + response) ;</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;) ;</div><div class=\"line\">&#125;,<span class=\"literal\">false</span>) ;</div></pre></td></tr></table></figure></p>\n<p>把一系列异步操作链接在一起最自然的方式就是使用回调嵌套，步骤2嵌套在步骤1中然后步骤3嵌套在步骤2中，等等。</p>\n<h2 id=\"回调地狱\"><a href=\"#回调地狱\" class=\"headerlink\" title=\"回调地狱\"></a>回调地狱</h2><p>你使用越多的回调，就会有越多的嵌套，不断缩进意大利面条似的代码。很显然，这种代码难以编写，难以理解而且难以维护。如果我们花点时间来理清这些代码往往会让我们事半功倍。<br>这类嵌套/缩进经常被叫做”回调地狱”。有时也被叫做”回调金字塔”，专指由于代码不断缩进所形成的金字塔形状，缩进越多金字塔形状越明显。<br>但是我还是觉得”回调地狱”真的跟嵌套和缩进扯不上太大的关系。如果之前有人跟你说回调地狱就是指嵌套和缩进的话，不要相信他，因为他们并不理解回调真正的问题在哪儿。</p>\n<h2 id=\"可靠性缺失\"><a href=\"#可靠性缺失\" class=\"headerlink\" title=\"可靠性缺失\"></a>可靠性缺失</h2><p>回调(无论是否有嵌套)的真正问题是远比编辑器中的空白符严重。<br>让我们来分析下下面这个简单的回调发生了什么<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.everything in my program before now</span></div><div class=\"line\"></div><div class=\"line\">someAsyncThing(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//2.everything in my program for later</span></div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>你看清这段代码说了什么吗？你从根本上把你的程序分成了两个部分：</p>\n<ol>\n<li>直到现在为止发生的事情</li>\n<li>以后会发生的事情</li>\n</ol>\n<p>换句话说，你把第二部分代码包装在一个回调函数中然后延迟到后面执行。<br>但是这并不是问题，真正问题是在1和2之间发生了什么。请问在这段时间内是谁在控制这些。<br><code>someAsyncThing(..)</code>控制着这些。是你自己拥有并管理<code>someAsyncThing()</code>吗？许多时候不是。更重要的是，你有多信任<code>someAsyncThing(..)</code>？<br>你会问，信任什么？不管你意识到没有，你潜在的相信<code>someAsyncThing(..)</code>会做到下面这些：</p>\n<ol>\n<li>不会太早调用我的回调函数</li>\n<li>不会太迟调用我的回调函数(1,2就是说会在适当的时候调用回调函数)</li>\n<li>不会调用我的回调太少次(不会少于实际应该调用的次数，比如不会漏掉函数调用)</li>\n<li>不会调用我的回调太多次(不会多于实际应该调用的次数，比如重复调用)</li>\n<li>会给我的回调提供必要的参数</li>\n<li>在我的回调失败的时候会提醒我</li>\n</ol>\n<p>咳！你也太信任它了！<br>实际上，这里真正的问题是由于回调引起的<strong>控制转移</strong>。<br>在你的程序的前半部分，你控制着程序的进程。现在你转移了控制权，<code>someAsyncThing(..)</code>控制了你剩余程序什么时候返回以及是否返回。<br><strong>控制转移</strong>表明了你的代码和其他人的代码之间的过度信任关系。</p>\n<h2 id=\"恐吓战术\"><a href=\"#恐吓战术\" class=\"headerlink\" title=\"恐吓战术\"></a>恐吓战术</h2><p>当<code>someAsyncThing(..)</code>是第三方库的一个方法并且你无法控制不能检查的时候会发生什么？只能祝你好运了！<br>比如你有一个电子商务网站，用户就要完成付款的步骤了，但是在扣费之前有最后一个步骤，它需要通知一个第三方跟踪库。你调用他们API，并且提供一个回调函数。大部分情况下，这不会有什么问题。<br>但是，在这次业务中，有一些你和他们都没有意识到的奇怪的Bug，结果就是第三方库在超时之前五秒的时间内每隔一秒就会调用一次回调函数。猜猜发生了什么？在这个回调里调用了<code>chargeTheCreditCard()</code>。<br>Oops，消费者被扣了五次钱。为什么？因为你相信第三方库只会调用你的回调一次。<br>所以你不得不被丢鸡蛋并且给消费者道歉归还多扣的四次钱。然后你立刻采取措施确保这种情况不会再发生。你会怎么做呢？<br>你可能会创建一些状态值来跟踪你的回调，当它被调用一次之后会被标记，然后就可以忽略任何意外的重复调用。无论第三方如何道歉并且承诺他们的bug已经修复了，你再也不会相信他们了，不是吗？<br>这看起来像一个愚蠢的场景，但是这可能比你想得还普遍。我们的程序变得越复杂，我们就会集成越多的第三方/外部代码，这种愚蠢的场景就越容易发生。</p>\n<h2 id=\"布基胶带\"><a href=\"#布基胶带\" class=\"headerlink\" title=\"布基胶带\"></a>布基胶带</h2><p>你给你的回调加入了状态跟踪机制，然后睡了一个好觉。但是实际上你只是处理了信任列表许多项目中的一项。<br>当另一个bug造成另一个可靠性丢失的情况时会发生什么？更多的改造，更多丑陋的代码。<br>更多布基胶带。你必须不断修复回调中的漏洞。无论你是多优秀的开发者，无论你的布基胶带多漂亮，事实就是：在你信任墙上的回调充满了漏洞。</p>\n<h2 id=\"Promise解决方案\"><a href=\"#Promise解决方案\" class=\"headerlink\" title=\"Promise解决方案\"></a>Promise解决方案</h2><p>一些人喜欢使用布基绷带并且给信任墙上的洞打补丁。<br>但是在某些时候，你也许会问自己，是否有其他模式来表达异步流程控制，不需要忍受所有这些可靠性丢失？<br>是的！Promises就是一个方法。<br>在我解释它们是怎么工作之前，让我来解释一些它们背后的概念问题。</p>\n<h3 id=\"快餐业务\"><a href=\"#快餐业务\" class=\"headerlink\" title=\"快餐业务\"></a>快餐业务</h3><p>你走进你最喜爱的快餐店，走到前台要了一些美味的食物。收银员告诉你一共7.53美元然后你把钱给她。她会给回你什么东西呢？<br>如果你足够幸运，你要的食物已经准备好了。但是大多数情况下，你会拿到一个写着序列号的小票，是吧？所以你站到一边等待你的食物。<br>很快，你听到广播响起：“请317号取餐”。正好是你的号码。你走到前台用小票换来你的食物！谢天谢地，你不用忍受太长的等待。<br>刚才发生的是一个对于Promises很好的比喻。你走到前台开始一个业务，但是这个业务不能马上完成。所以，你得到一个在迟些时候完成业务(你的食物)的promise(小票)。一旦你的食物准备就绪，你会得到通知然后你第一时间用你的promise(小票)换来了你想要的东西：食物。<br>换句话说，带有序列号的小票就是对于一个未来结果的承诺。</p>\n<h3 id=\"完成事件\"><a href=\"#完成事件\" class=\"headerlink\" title=\"完成事件\"></a>完成事件</h3><p>想想上面调用<code>someAsyncThing(..)</code>的例子。如果你可以调用它然后订阅一个事件，当这个调用完成的时候你会得到通知而不是传递一个回调给它，这样难道不会更好吗？<br>例如，想象这样的代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> listener = someAsyncThing(..) ;</div><div class=\"line\">listener.on(<span class=\"string\">\"completion\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//keep going now !</span></div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>实际上，如果我们还可以监听调用失败的事件那就更好了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">listener.on(<span class=\"string\">\"failure\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//Oops,What's plan B?</span></div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure></p>\n<p>现在，对于我们调用的每个函数，我们能够在函数成功执行或者失败的时候得到通知。换句话说，每个函数调用会是流程控制图上的决策点。</p>\n<h3 id=\"Promise”事件”\"><a href=\"#Promise”事件”\" class=\"headerlink\" title=\"Promise”事件”\"></a>Promise”事件”</h3><p>Promises就像是一个函数在说“我这有一个事件监听器，当我完成或者失败的时候会被通知到。”<br>我们看看它是怎么工作的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncThing</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//at some later time,call 'resolve()' or 'reject()'</span></div><div class=\"line\">    &#125;) ;</div><div class=\"line\">    <span class=\"keyword\">return</span> p ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p = someAsyncThing() ;</div><div class=\"line\">p.then(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//success happened    </span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//failure happened</span></div><div class=\"line\">    &#125;</div><div class=\"line\">) ;</div></pre></td></tr></table></figure></p>\n<p>你只需要监听<code>then</code>事件，然后通过知道哪个回调函数被调用就可以知道是成功还是失败。</p>\n<h3 id=\"逆转\"><a href=\"#逆转\" class=\"headerlink\" title=\"逆转\"></a>逆转</h3><p>通过promises，我们重新获得了程序的控制权而不是通过给第三方库传递回调来转移控制权。这是javascript中异步控制流程表达上一个很大的进步。<br>“等等”，你说。“我仍然要传递回调啊。有什么不一样？！”<br>嗯。。。好眼力！<br>有些人声称Promises通过移除回调来解决“回调地狱”的问题。并不是这样！在一些情况下，你甚至需要比以前更多的回调。同时，根据你如何编写你的代码，你可能仍然需要把promises嵌套在别的promises中！<br>批判性地看，promises所做的只是改变了你传递回调的地方。<br>本质上，如果你把你的回调传递给拥有良好保证和可预测性的中立Promises机制，你实质上重新获得了对于后续程序能很稳定并且运行良好的可靠性。<br>标准的promises机制有以下这些保证：</p>\n<ol>\n<li>如果promise被resolve，它要不是success就是failure，不可能同时存在。</li>\n<li>一旦promise被resolve，它就再也不会被resolve(不会出现重复调用)。</li>\n<li>如果promise返回了成功的信息，那么你绑定在成功事件上的回调会得到这个消息。</li>\n<li>如果发生了错误，promise会收到一个带有错误信息的错误通知。</li>\n<li>无论promise最后的结果是什么(success或者failure)，他就不会改变了，你总是可以获得这个消息只要你不销毁promise。</li>\n</ol>\n<p>如果我们从<code>someAsyncThing(..)</code>得到的promise不是可用的标准的promise会发生什么？如果我们无法判断我们是否可相信它是真的promise会怎么样？<br>简单！只要你得到的是“类promise”的，也就是拥有<code>then(..)</code>方法可以注册success和failure事件，那么你就可用使用这个“类promise”然后把它包装在一个你信任的promise中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> notSureWhatItIs = someAsyncThing();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.resolve( notSureWhatItIs );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now we can trust `p`!!</span></div><div class=\"line\">p.then(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// success happened</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// failure happened</span></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>promises的最重要的特点就是它把我们处理任何函数调用的成功或者失败的方式规范成了可预测的形式，特别是如果这个调用实际上的异步的。<br>在这个规范过程中，它使我们的程序在可控制的位置而不是把控制权交给一个不可相信的第三方。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不要管你所听到的，“回调地狱”不是真的关于函数嵌套和它们在代码编辑器中产生的缩进。<br>它是关于<strong>控制转移</strong>的，是指我们由于把控制权交给一个我们不能信任的第三方而产生的对我们的程序失去控制的现象。<br>Promises逆转了这个情况，它使得我们重新获得控制权。相比传递回调给第三方函数，函数返回一个promise对象，我们可以使用它来监听函数的成功或失败。<br>在promise我们仍然使用回调，但是重要的是标准的promise机制使我们可以信任它们行为的正确性。我们不需要想办法来处理这些可靠性问题。<br>在第三部分：可靠性问题中，我会说道一个promises可靠性机制中很特别的部分：一个promise的状态必须是可靠并且不可变的。</p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-2/\">http://blog.getify.com/promises-part-2/</a></p>"},{"title":"(译)深入理解Promise五部曲：4.扩展问题","date":"2014-07-09T06:44:46.000Z","_content":"现在，我希望你已经看过深入理解Promise的前三篇文章了。并且假设你已经完全理解Promises是什么以及深入讨论Promises的重要性。\n<!-- more -->\n# 不要扩展原生对象！\n\n回到2005年，[Prototype.js](http://prototypejs.org/)框架是最先提出扩展Javascript原生对象的内置prototype属性的框架之一。它们的想法是我们可以通过向prototype属性添加额外的方法来扩展现有的功能。\n如果你对近十年Javascript编程做一个简单的调查，比如使用google简单搜索下，你会发现对于这个想法有很多反对意见。它们都是有原因的。\n大多数开发者会告诉你：“不要扩展原生对象”或者“只在polyfill的时候扩展原生对象”。后者意味着只有当扩展的功能已经被列入规范然后你只是为了能在旧的环境中使用这些功能的时候才能对元素对象进行扩展。\n\n## 数组Push方法\n\n想象一个真实的场景(确实发生在我身上)：回到Netscape3/4和IE4的时代，当时的JS并没有现在这么友好。作为许多显著差异中的一个，数组并没有`push(..)`方法来向它的尾部添加元素。\n所以，一些人会通过下面这段代码来扩展：\n```javascript\n//Netscape 4 doesn't hava Array.push\nArray.prototype.push = function(elem){\n    this[this.length - 1] = elem ;\n}\n```\n乍一看可能觉得没问题，但是你很快就会发现一些问题。\n\n1. 这里需要一个`if`来判断原生是否有对于`push(..)`的支持，如果有我们就可以使用原生的`push(..)`方法。\n2. 我们需要注意我们已经破坏了数组对象`for..in`循环行为，因为我们的`push(..)`方法会出现在`for..in`循环的结果中。当然，你不应该在数组上使用`for..in`循环，这又是另外一个话题了。\n\n有一个和1相关的更大的问题。不仅仅是需要一个`if`判断：\n```javascript\nif(!Array.prototype.push){\n    //make our own\n}\n```\n我们应该问问我们自己，如果内置的`push(..)`实现和我们的实现不兼容怎么办？如果内置的实现接受不一样数量的参数或者不一样的参数类型怎么办？\n如果我们的代码依赖于我们自己实现的`push(..)`，然后我们只是简单的用新的方法替换我们自己的方法，那么代码会出现问题。如果我们的实现覆盖了内置的`push(..)`实现，然后如果一些JS库期望使用内置的标准`push(..)`方法怎么办？\n这些问题是真实发生在我身上的。我有一个工作是在一个用户的古老的网站上加入一个组件，然后这个组件依赖于jQuery。我们组件在其他网站都可以正常使用，但是在这个特殊的站点却无法使用。我花了很多时间来找出问题。\n最终，我定位到了上面那个`if`代码片段。这里有什么问题呢？\n它的`push(..)`实现只接受一个参数，然而jQuery中期望是通过`push(el1,el2,...)`来调用push方法，所以它就无法正常运行了。\nOops。\n但是猜猜当我移除原来的push代码时发生了什么？在其他网站这个组件也不能使用的。为什么？我还是不知道具体是为什么。我认为他们意外地依赖于外部变量，而这些外部变量没有传递进来。\n但是，真正的问题是，有人通过一种对于未来存在潜在危险的方式扩展内置原生对象，导致这个方法在未来可能无法正常运行。\n我不是唯一遇到这个问题的人。成千上万的开发者都遇到了这种情况。我们中的大多数认为你必须十分小心当你扩展原生JS对象时。如果你这么做了，你最好不要使用跟语言新版本中的方法名相同的名字。\n\n# Promise扩展\n\n为什么所有的老爷爷抱怨如今Promises的火热呢？\n因为那些开发`Promise`\"polyfills\"的人似乎忘记或者抛弃了老人们的智慧。他们开始直接往`Promise`和`Promsie.prototype`上加额外的东西。\n我真的需要再去解释为什么这是一个“未来的”坏点子吗？\n\n## Blue In The Face\n\n我们可以一直争论这个问题到死，但是仍然不能改变这个事实。如果你扩展原生对象，你就是和未来敌对的，就算你觉得你自己已经做得很好了。\n而且，你用越大众化的名字来扩展原生对象，你越有可能影响未来的人。\n让我们看看[Bluebird](https://github.com/petkaantonov/bluebird)库，因为它是最流行的`Promise`polyfill/库之一。它足够快但是它跟其他库比起来也更加大。\n但是速度和大小并不是我现在担心的。我关心的是它选择了把自己添加到`Promise`的命名空间上。就算它使用一个polyfill安全的方式，实际上并没有，事实就算它添加许多额外的东西到原生对象上。\n例如，Bluebird添加了`Promise.method(..)`:\n```javascript\nfunction someAsyncNonPromiseFunc() {\n    // ...\n}\n\nvar wrappedFn = Promise.method( someAsyncNonPromiseFunc );\n\nvar p = wrappedFn(..);\n\np.then(..)..;\n```\n看起来没什么问题，是吗？当然。但是如果某天规范需要添加`Promise.method(..)`方法。然后如果它的行为和Bluebird有很大的区别会怎么样呢？\n你又会看到`Array.prototype.push(..)`一样的情况。\nBluebird添加了许多东西到原生的`Promise`。所以有很多可能性会在未来会发生冲突。\n我希望我从来不需要去修复某个人的Promise扩展代码。但是，我很可能需要这么做。\n\n## 未来约束\n\n但是这还不是最糟的。如果Bluebir非常流行，然后许多现实中的网站依赖于这么一个扩展，突然一天TC39协会通过某种方式强制避免扩展官方规范，那么这些依赖于扩展的网站都将崩溃。\n你看，这就是扩展原生对象的危险所在：你为了实现你的功能然后扩展原生对象，然后就拍拍屁股把这些烂摊子留给了TC39成员们。因为你愚蠢的决定Javascript的维护者只能选择其他机制。\n不相信我？这种情况已经发生很多次了。你知道为什么在19年的JS历史中`typeof null === \"object\"`这个bug一直无法修复吗？因为太多的代码都依赖于这段代码了。如果他们修复了这个bug，那么结果可想而知。\n我真的不想这种事情发生在`Promsie`身上。请停止通过扩展原生对象来定义Promise polyfill/库。\n\n## 包装抽象\n\n我认为我们需要更多不破坏规范的polyfill，像我的\"[Native Promise Only](https://github.com/getify/native-promise-only)\"。我们需要良好，稳固，性能优秀但是和标准兼容的polyfill。\n特别的，我们需要它们以便于那些需要扩展promise的人可以在这个包装上进行操作。我们不应该很容易获得一个`Promise`polyfill然后创建我们自己的`SuperAwesomePromise`包装在它上面吗？\n已经有很多的好例子了，比如[Q](https://github.com/kriskowal/q)和[when](https://github.com/cujojs/when)\n我自己也写了一个，叫做[asnquence](http://github.com/getify/asynquence)(async + sequence)\n我的是设计来隐藏promises的，因为promise是低级别的API，所以与其给你一个简单的抽象的东西不如隐藏丑陋的细节。\n例如，比较下下面两段代码\n原生Promises：\n```javascript\nfunction delay(n) {\n    return new Promise( function(resolve,reject){\n        setTimeout( resolve, n );\n    } );\n}\n\nfunction request(url) {\n    return new Promise( function(resolve,reject){\n        ajax( url, function(err,res){\n            if (err) reject( err );\n            else resolve( res );\n        } );\n    } );\n}\n\ndelay( 100 )\n.then( function(){\n    return request( \"some/url\" );\n} )\n.then(\n    success,\n    error\n);\n```\nasynquence：\n```javascript\nfunction delay(n) {\n    return ASQ( function(done){\n        setTimeout( done, n );\n    } );\n}\n\nfunction request(url) {\n    return ASQ( function(done){\n        ajax( url, done.errfcb );\n    } );\n}\n\ndelay( 100 )\n.val( \"some/url\" )\n.seq( request )\n.then( success )\n.or( error );\n```\n希望你能够通过这个简单的例子看出*asynquence*是如何降低使用promises来表达异步流程的难度的。它在底层实现为你创建promise，它自动把它们连接在一起，然后为同样的组合模式提供了简单的语法。\n显然，我认为*asynquence*是非常令人惊奇的。我认为你应该看看一些[例子](https://github.com/getify/asynquence#tldr-by-example)，然后看看大家扩展的[插件](https://github.com/getify/asynquence/blob/master/contrib/README.md)，这些插件使得它能提供更多的便利。\n如果*asynquence*不是你的菜，那么你可以再寻找一个适合你的好用知名的抽象库。\n但是请不要使用那些扩展原生`Promise`的库。这对于未来不是一件好事。\n\n# 总结\n\nPromise是令人惊奇的并且它们正在改变许多JS开发者编写和维护一部流程的方式。\nES6带来的原生`Promise`是这个语言一个重大的胜利。为了加速这个胜利的过程，我们中的许多人开发Promise polyfill和Promise库。\n但是不要因为Promise带来的兴奋和喜悦让你忘了一个不可否认的事实：**扩展原生对象是一件危险并且充满冒险的事情**，并仅仅对于库的作者也包括使用这些库的所有人。\n最后，请负有责任感并且使用安全的promise扩展。我们在将来会感谢你的。\n\n原文地址：http://blog.getify.com/promises-part-4/\n\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n","source":"_posts/understand-promise-4.md","raw":"title: (译)深入理解Promise五部曲：4.扩展问题\ndate: 2014-07-09 14:44:46\ntags: ['promise']\n---\n现在，我希望你已经看过深入理解Promise的前三篇文章了。并且假设你已经完全理解Promises是什么以及深入讨论Promises的重要性。\n<!-- more -->\n# 不要扩展原生对象！\n\n回到2005年，[Prototype.js](http://prototypejs.org/)框架是最先提出扩展Javascript原生对象的内置prototype属性的框架之一。它们的想法是我们可以通过向prototype属性添加额外的方法来扩展现有的功能。\n如果你对近十年Javascript编程做一个简单的调查，比如使用google简单搜索下，你会发现对于这个想法有很多反对意见。它们都是有原因的。\n大多数开发者会告诉你：“不要扩展原生对象”或者“只在polyfill的时候扩展原生对象”。后者意味着只有当扩展的功能已经被列入规范然后你只是为了能在旧的环境中使用这些功能的时候才能对元素对象进行扩展。\n\n## 数组Push方法\n\n想象一个真实的场景(确实发生在我身上)：回到Netscape3/4和IE4的时代，当时的JS并没有现在这么友好。作为许多显著差异中的一个，数组并没有`push(..)`方法来向它的尾部添加元素。\n所以，一些人会通过下面这段代码来扩展：\n```javascript\n//Netscape 4 doesn't hava Array.push\nArray.prototype.push = function(elem){\n    this[this.length - 1] = elem ;\n}\n```\n乍一看可能觉得没问题，但是你很快就会发现一些问题。\n\n1. 这里需要一个`if`来判断原生是否有对于`push(..)`的支持，如果有我们就可以使用原生的`push(..)`方法。\n2. 我们需要注意我们已经破坏了数组对象`for..in`循环行为，因为我们的`push(..)`方法会出现在`for..in`循环的结果中。当然，你不应该在数组上使用`for..in`循环，这又是另外一个话题了。\n\n有一个和1相关的更大的问题。不仅仅是需要一个`if`判断：\n```javascript\nif(!Array.prototype.push){\n    //make our own\n}\n```\n我们应该问问我们自己，如果内置的`push(..)`实现和我们的实现不兼容怎么办？如果内置的实现接受不一样数量的参数或者不一样的参数类型怎么办？\n如果我们的代码依赖于我们自己实现的`push(..)`，然后我们只是简单的用新的方法替换我们自己的方法，那么代码会出现问题。如果我们的实现覆盖了内置的`push(..)`实现，然后如果一些JS库期望使用内置的标准`push(..)`方法怎么办？\n这些问题是真实发生在我身上的。我有一个工作是在一个用户的古老的网站上加入一个组件，然后这个组件依赖于jQuery。我们组件在其他网站都可以正常使用，但是在这个特殊的站点却无法使用。我花了很多时间来找出问题。\n最终，我定位到了上面那个`if`代码片段。这里有什么问题呢？\n它的`push(..)`实现只接受一个参数，然而jQuery中期望是通过`push(el1,el2,...)`来调用push方法，所以它就无法正常运行了。\nOops。\n但是猜猜当我移除原来的push代码时发生了什么？在其他网站这个组件也不能使用的。为什么？我还是不知道具体是为什么。我认为他们意外地依赖于外部变量，而这些外部变量没有传递进来。\n但是，真正的问题是，有人通过一种对于未来存在潜在危险的方式扩展内置原生对象，导致这个方法在未来可能无法正常运行。\n我不是唯一遇到这个问题的人。成千上万的开发者都遇到了这种情况。我们中的大多数认为你必须十分小心当你扩展原生JS对象时。如果你这么做了，你最好不要使用跟语言新版本中的方法名相同的名字。\n\n# Promise扩展\n\n为什么所有的老爷爷抱怨如今Promises的火热呢？\n因为那些开发`Promise`\"polyfills\"的人似乎忘记或者抛弃了老人们的智慧。他们开始直接往`Promise`和`Promsie.prototype`上加额外的东西。\n我真的需要再去解释为什么这是一个“未来的”坏点子吗？\n\n## Blue In The Face\n\n我们可以一直争论这个问题到死，但是仍然不能改变这个事实。如果你扩展原生对象，你就是和未来敌对的，就算你觉得你自己已经做得很好了。\n而且，你用越大众化的名字来扩展原生对象，你越有可能影响未来的人。\n让我们看看[Bluebird](https://github.com/petkaantonov/bluebird)库，因为它是最流行的`Promise`polyfill/库之一。它足够快但是它跟其他库比起来也更加大。\n但是速度和大小并不是我现在担心的。我关心的是它选择了把自己添加到`Promise`的命名空间上。就算它使用一个polyfill安全的方式，实际上并没有，事实就算它添加许多额外的东西到原生对象上。\n例如，Bluebird添加了`Promise.method(..)`:\n```javascript\nfunction someAsyncNonPromiseFunc() {\n    // ...\n}\n\nvar wrappedFn = Promise.method( someAsyncNonPromiseFunc );\n\nvar p = wrappedFn(..);\n\np.then(..)..;\n```\n看起来没什么问题，是吗？当然。但是如果某天规范需要添加`Promise.method(..)`方法。然后如果它的行为和Bluebird有很大的区别会怎么样呢？\n你又会看到`Array.prototype.push(..)`一样的情况。\nBluebird添加了许多东西到原生的`Promise`。所以有很多可能性会在未来会发生冲突。\n我希望我从来不需要去修复某个人的Promise扩展代码。但是，我很可能需要这么做。\n\n## 未来约束\n\n但是这还不是最糟的。如果Bluebir非常流行，然后许多现实中的网站依赖于这么一个扩展，突然一天TC39协会通过某种方式强制避免扩展官方规范，那么这些依赖于扩展的网站都将崩溃。\n你看，这就是扩展原生对象的危险所在：你为了实现你的功能然后扩展原生对象，然后就拍拍屁股把这些烂摊子留给了TC39成员们。因为你愚蠢的决定Javascript的维护者只能选择其他机制。\n不相信我？这种情况已经发生很多次了。你知道为什么在19年的JS历史中`typeof null === \"object\"`这个bug一直无法修复吗？因为太多的代码都依赖于这段代码了。如果他们修复了这个bug，那么结果可想而知。\n我真的不想这种事情发生在`Promsie`身上。请停止通过扩展原生对象来定义Promise polyfill/库。\n\n## 包装抽象\n\n我认为我们需要更多不破坏规范的polyfill，像我的\"[Native Promise Only](https://github.com/getify/native-promise-only)\"。我们需要良好，稳固，性能优秀但是和标准兼容的polyfill。\n特别的，我们需要它们以便于那些需要扩展promise的人可以在这个包装上进行操作。我们不应该很容易获得一个`Promise`polyfill然后创建我们自己的`SuperAwesomePromise`包装在它上面吗？\n已经有很多的好例子了，比如[Q](https://github.com/kriskowal/q)和[when](https://github.com/cujojs/when)\n我自己也写了一个，叫做[asnquence](http://github.com/getify/asynquence)(async + sequence)\n我的是设计来隐藏promises的，因为promise是低级别的API，所以与其给你一个简单的抽象的东西不如隐藏丑陋的细节。\n例如，比较下下面两段代码\n原生Promises：\n```javascript\nfunction delay(n) {\n    return new Promise( function(resolve,reject){\n        setTimeout( resolve, n );\n    } );\n}\n\nfunction request(url) {\n    return new Promise( function(resolve,reject){\n        ajax( url, function(err,res){\n            if (err) reject( err );\n            else resolve( res );\n        } );\n    } );\n}\n\ndelay( 100 )\n.then( function(){\n    return request( \"some/url\" );\n} )\n.then(\n    success,\n    error\n);\n```\nasynquence：\n```javascript\nfunction delay(n) {\n    return ASQ( function(done){\n        setTimeout( done, n );\n    } );\n}\n\nfunction request(url) {\n    return ASQ( function(done){\n        ajax( url, done.errfcb );\n    } );\n}\n\ndelay( 100 )\n.val( \"some/url\" )\n.seq( request )\n.then( success )\n.or( error );\n```\n希望你能够通过这个简单的例子看出*asynquence*是如何降低使用promises来表达异步流程的难度的。它在底层实现为你创建promise，它自动把它们连接在一起，然后为同样的组合模式提供了简单的语法。\n显然，我认为*asynquence*是非常令人惊奇的。我认为你应该看看一些[例子](https://github.com/getify/asynquence#tldr-by-example)，然后看看大家扩展的[插件](https://github.com/getify/asynquence/blob/master/contrib/README.md)，这些插件使得它能提供更多的便利。\n如果*asynquence*不是你的菜，那么你可以再寻找一个适合你的好用知名的抽象库。\n但是请不要使用那些扩展原生`Promise`的库。这对于未来不是一件好事。\n\n# 总结\n\nPromise是令人惊奇的并且它们正在改变许多JS开发者编写和维护一部流程的方式。\nES6带来的原生`Promise`是这个语言一个重大的胜利。为了加速这个胜利的过程，我们中的许多人开发Promise polyfill和Promise库。\n但是不要因为Promise带来的兴奋和喜悦让你忘了一个不可否认的事实：**扩展原生对象是一件危险并且充满冒险的事情**，并仅仅对于库的作者也包括使用这些库的所有人。\n最后，请负有责任感并且使用安全的promise扩展。我们在将来会感谢你的。\n\n原文地址：http://blog.getify.com/promises-part-4/\n\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n","slug":"understand-promise-4","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvl4000z0povmsf44vfd","content":"<p>现在，我希望你已经看过深入理解Promise的前三篇文章了。并且假设你已经完全理解Promises是什么以及深入讨论Promises的重要性。<br><a id=\"more\"></a></p>\n<h1 id=\"不要扩展原生对象！\"><a href=\"#不要扩展原生对象！\" class=\"headerlink\" title=\"不要扩展原生对象！\"></a>不要扩展原生对象！</h1><p>回到2005年，<a href=\"http://prototypejs.org/\" target=\"_blank\" rel=\"external\">Prototype.js</a>框架是最先提出扩展Javascript原生对象的内置prototype属性的框架之一。它们的想法是我们可以通过向prototype属性添加额外的方法来扩展现有的功能。<br>如果你对近十年Javascript编程做一个简单的调查，比如使用google简单搜索下，你会发现对于这个想法有很多反对意见。它们都是有原因的。<br>大多数开发者会告诉你：“不要扩展原生对象”或者“只在polyfill的时候扩展原生对象”。后者意味着只有当扩展的功能已经被列入规范然后你只是为了能在旧的环境中使用这些功能的时候才能对元素对象进行扩展。</p>\n<h2 id=\"数组Push方法\"><a href=\"#数组Push方法\" class=\"headerlink\" title=\"数组Push方法\"></a>数组Push方法</h2><p>想象一个真实的场景(确实发生在我身上)：回到Netscape3/4和IE4的时代，当时的JS并没有现在这么友好。作为许多显著差异中的一个，数组并没有<code>push(..)</code>方法来向它的尾部添加元素。<br>所以，一些人会通过下面这段代码来扩展：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Netscape 4 doesn't hava Array.push</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>] = elem ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>乍一看可能觉得没问题，但是你很快就会发现一些问题。</p>\n<ol>\n<li>这里需要一个<code>if</code>来判断原生是否有对于<code>push(..)</code>的支持，如果有我们就可以使用原生的<code>push(..)</code>方法。</li>\n<li>我们需要注意我们已经破坏了数组对象<code>for..in</code>循环行为，因为我们的<code>push(..)</code>方法会出现在<code>for..in</code>循环的结果中。当然，你不应该在数组上使用<code>for..in</code>循环，这又是另外一个话题了。</li>\n</ol>\n<p>有一个和1相关的更大的问题。不仅仅是需要一个<code>if</code>判断：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.push)&#123;</div><div class=\"line\">    <span class=\"comment\">//make our own</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们应该问问我们自己，如果内置的<code>push(..)</code>实现和我们的实现不兼容怎么办？如果内置的实现接受不一样数量的参数或者不一样的参数类型怎么办？<br>如果我们的代码依赖于我们自己实现的<code>push(..)</code>，然后我们只是简单的用新的方法替换我们自己的方法，那么代码会出现问题。如果我们的实现覆盖了内置的<code>push(..)</code>实现，然后如果一些JS库期望使用内置的标准<code>push(..)</code>方法怎么办？<br>这些问题是真实发生在我身上的。我有一个工作是在一个用户的古老的网站上加入一个组件，然后这个组件依赖于jQuery。我们组件在其他网站都可以正常使用，但是在这个特殊的站点却无法使用。我花了很多时间来找出问题。<br>最终，我定位到了上面那个<code>if</code>代码片段。这里有什么问题呢？<br>它的<code>push(..)</code>实现只接受一个参数，然而jQuery中期望是通过<code>push(el1,el2,...)</code>来调用push方法，所以它就无法正常运行了。<br>Oops。<br>但是猜猜当我移除原来的push代码时发生了什么？在其他网站这个组件也不能使用的。为什么？我还是不知道具体是为什么。我认为他们意外地依赖于外部变量，而这些外部变量没有传递进来。<br>但是，真正的问题是，有人通过一种对于未来存在潜在危险的方式扩展内置原生对象，导致这个方法在未来可能无法正常运行。<br>我不是唯一遇到这个问题的人。成千上万的开发者都遇到了这种情况。我们中的大多数认为你必须十分小心当你扩展原生JS对象时。如果你这么做了，你最好不要使用跟语言新版本中的方法名相同的名字。</p>\n<h1 id=\"Promise扩展\"><a href=\"#Promise扩展\" class=\"headerlink\" title=\"Promise扩展\"></a>Promise扩展</h1><p>为什么所有的老爷爷抱怨如今Promises的火热呢？<br>因为那些开发<code>Promise</code>“polyfills”的人似乎忘记或者抛弃了老人们的智慧。他们开始直接往<code>Promise</code>和<code>Promsie.prototype</code>上加额外的东西。<br>我真的需要再去解释为什么这是一个“未来的”坏点子吗？</p>\n<h2 id=\"Blue-In-The-Face\"><a href=\"#Blue-In-The-Face\" class=\"headerlink\" title=\"Blue In The Face\"></a>Blue In The Face</h2><p>我们可以一直争论这个问题到死，但是仍然不能改变这个事实。如果你扩展原生对象，你就是和未来敌对的，就算你觉得你自己已经做得很好了。<br>而且，你用越大众化的名字来扩展原生对象，你越有可能影响未来的人。<br>让我们看看<a href=\"https://github.com/petkaantonov/bluebird\" target=\"_blank\" rel=\"external\">Bluebird</a>库，因为它是最流行的<code>Promise</code>polyfill/库之一。它足够快但是它跟其他库比起来也更加大。<br>但是速度和大小并不是我现在担心的。我关心的是它选择了把自己添加到<code>Promise</code>的命名空间上。就算它使用一个polyfill安全的方式，实际上并没有，事实就算它添加许多额外的东西到原生对象上。<br>例如，Bluebird添加了<code>Promise.method(..)</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncNonPromiseFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> wrappedFn = <span class=\"built_in\">Promise</span>.method( someAsyncNonPromiseFunc );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = wrappedFn(..);</div><div class=\"line\"></div><div class=\"line\">p.then(..)..;</div></pre></td></tr></table></figure></p>\n<p>看起来没什么问题，是吗？当然。但是如果某天规范需要添加<code>Promise.method(..)</code>方法。然后如果它的行为和Bluebird有很大的区别会怎么样呢？<br>你又会看到<code>Array.prototype.push(..)</code>一样的情况。<br>Bluebird添加了许多东西到原生的<code>Promise</code>。所以有很多可能性会在未来会发生冲突。<br>我希望我从来不需要去修复某个人的Promise扩展代码。但是，我很可能需要这么做。</p>\n<h2 id=\"未来约束\"><a href=\"#未来约束\" class=\"headerlink\" title=\"未来约束\"></a>未来约束</h2><p>但是这还不是最糟的。如果Bluebir非常流行，然后许多现实中的网站依赖于这么一个扩展，突然一天TC39协会通过某种方式强制避免扩展官方规范，那么这些依赖于扩展的网站都将崩溃。<br>你看，这就是扩展原生对象的危险所在：你为了实现你的功能然后扩展原生对象，然后就拍拍屁股把这些烂摊子留给了TC39成员们。因为你愚蠢的决定Javascript的维护者只能选择其他机制。<br>不相信我？这种情况已经发生很多次了。你知道为什么在19年的JS历史中<code>typeof null === &quot;object&quot;</code>这个bug一直无法修复吗？因为太多的代码都依赖于这段代码了。如果他们修复了这个bug，那么结果可想而知。<br>我真的不想这种事情发生在<code>Promsie</code>身上。请停止通过扩展原生对象来定义Promise polyfill/库。</p>\n<h2 id=\"包装抽象\"><a href=\"#包装抽象\" class=\"headerlink\" title=\"包装抽象\"></a>包装抽象</h2><p>我认为我们需要更多不破坏规范的polyfill，像我的”<a href=\"https://github.com/getify/native-promise-only\" target=\"_blank\" rel=\"external\">Native Promise Only</a>“。我们需要良好，稳固，性能优秀但是和标准兼容的polyfill。<br>特别的，我们需要它们以便于那些需要扩展promise的人可以在这个包装上进行操作。我们不应该很容易获得一个<code>Promise</code>polyfill然后创建我们自己的<code>SuperAwesomePromise</code>包装在它上面吗？<br>已经有很多的好例子了，比如<a href=\"https://github.com/kriskowal/q\" target=\"_blank\" rel=\"external\">Q</a>和<a href=\"https://github.com/cujojs/when\" target=\"_blank\" rel=\"external\">when</a><br>我自己也写了一个，叫做<a href=\"http://github.com/getify/asynquence\" target=\"_blank\" rel=\"external\">asnquence</a>(async + sequence)<br>我的是设计来隐藏promises的，因为promise是低级别的API，所以与其给你一个简单的抽象的东西不如隐藏丑陋的细节。<br>例如，比较下下面两段代码<br>原生Promises：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        setTimeout( resolve, n );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        ajax( url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) reject( err );</div><div class=\"line\">            <span class=\"keyword\">else</span> resolve( res );</div><div class=\"line\">        &#125; );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">delay( <span class=\"number\">100</span> )</div><div class=\"line\">.then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> request( <span class=\"string\">\"some/url\"</span> );</div><div class=\"line\">&#125; )</div><div class=\"line\">.then(</div><div class=\"line\">    success,</div><div class=\"line\">    error</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>asynquence：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ASQ( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</div><div class=\"line\">        setTimeout( done, n );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ASQ( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</div><div class=\"line\">        ajax( url, done.errfcb );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">delay( <span class=\"number\">100</span> )</div><div class=\"line\">.val( <span class=\"string\">\"some/url\"</span> )</div><div class=\"line\">.seq( request )</div><div class=\"line\">.then( success )</div><div class=\"line\">.or( error );</div></pre></td></tr></table></figure></p>\n<p>希望你能够通过这个简单的例子看出<em>asynquence</em>是如何降低使用promises来表达异步流程的难度的。它在底层实现为你创建promise，它自动把它们连接在一起，然后为同样的组合模式提供了简单的语法。<br>显然，我认为<em>asynquence</em>是非常令人惊奇的。我认为你应该看看一些<a href=\"https://github.com/getify/asynquence#tldr-by-example\" target=\"_blank\" rel=\"external\">例子</a>，然后看看大家扩展的<a href=\"https://github.com/getify/asynquence/blob/master/contrib/README.md\" target=\"_blank\" rel=\"external\">插件</a>，这些插件使得它能提供更多的便利。<br>如果<em>asynquence</em>不是你的菜，那么你可以再寻找一个适合你的好用知名的抽象库。<br>但是请不要使用那些扩展原生<code>Promise</code>的库。这对于未来不是一件好事。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Promise是令人惊奇的并且它们正在改变许多JS开发者编写和维护一部流程的方式。<br>ES6带来的原生<code>Promise</code>是这个语言一个重大的胜利。为了加速这个胜利的过程，我们中的许多人开发Promise polyfill和Promise库。<br>但是不要因为Promise带来的兴奋和喜悦让你忘了一个不可否认的事实：<strong>扩展原生对象是一件危险并且充满冒险的事情</strong>，并仅仅对于库的作者也包括使用这些库的所有人。<br>最后，请负有责任感并且使用安全的promise扩展。我们在将来会感谢你的。</p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-4/\" target=\"_blank\" rel=\"external\">http://blog.getify.com/promises-part-4/</a></p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>\n","excerpt":"<p>现在，我希望你已经看过深入理解Promise的前三篇文章了。并且假设你已经完全理解Promises是什么以及深入讨论Promises的重要性。<br>","more":"</p>\n<h1 id=\"不要扩展原生对象！\"><a href=\"#不要扩展原生对象！\" class=\"headerlink\" title=\"不要扩展原生对象！\"></a>不要扩展原生对象！</h1><p>回到2005年，<a href=\"http://prototypejs.org/\">Prototype.js</a>框架是最先提出扩展Javascript原生对象的内置prototype属性的框架之一。它们的想法是我们可以通过向prototype属性添加额外的方法来扩展现有的功能。<br>如果你对近十年Javascript编程做一个简单的调查，比如使用google简单搜索下，你会发现对于这个想法有很多反对意见。它们都是有原因的。<br>大多数开发者会告诉你：“不要扩展原生对象”或者“只在polyfill的时候扩展原生对象”。后者意味着只有当扩展的功能已经被列入规范然后你只是为了能在旧的环境中使用这些功能的时候才能对元素对象进行扩展。</p>\n<h2 id=\"数组Push方法\"><a href=\"#数组Push方法\" class=\"headerlink\" title=\"数组Push方法\"></a>数组Push方法</h2><p>想象一个真实的场景(确实发生在我身上)：回到Netscape3/4和IE4的时代，当时的JS并没有现在这么友好。作为许多显著差异中的一个，数组并没有<code>push(..)</code>方法来向它的尾部添加元素。<br>所以，一些人会通过下面这段代码来扩展：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Netscape 4 doesn't hava Array.push</span></div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[<span class=\"keyword\">this</span>.length - <span class=\"number\">1</span>] = elem ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>乍一看可能觉得没问题，但是你很快就会发现一些问题。</p>\n<ol>\n<li>这里需要一个<code>if</code>来判断原生是否有对于<code>push(..)</code>的支持，如果有我们就可以使用原生的<code>push(..)</code>方法。</li>\n<li>我们需要注意我们已经破坏了数组对象<code>for..in</code>循环行为，因为我们的<code>push(..)</code>方法会出现在<code>for..in</code>循环的结果中。当然，你不应该在数组上使用<code>for..in</code>循环，这又是另外一个话题了。</li>\n</ol>\n<p>有一个和1相关的更大的问题。不仅仅是需要一个<code>if</code>判断：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"built_in\">Array</span>.prototype.push)&#123;</div><div class=\"line\">    <span class=\"comment\">//make our own</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们应该问问我们自己，如果内置的<code>push(..)</code>实现和我们的实现不兼容怎么办？如果内置的实现接受不一样数量的参数或者不一样的参数类型怎么办？<br>如果我们的代码依赖于我们自己实现的<code>push(..)</code>，然后我们只是简单的用新的方法替换我们自己的方法，那么代码会出现问题。如果我们的实现覆盖了内置的<code>push(..)</code>实现，然后如果一些JS库期望使用内置的标准<code>push(..)</code>方法怎么办？<br>这些问题是真实发生在我身上的。我有一个工作是在一个用户的古老的网站上加入一个组件，然后这个组件依赖于jQuery。我们组件在其他网站都可以正常使用，但是在这个特殊的站点却无法使用。我花了很多时间来找出问题。<br>最终，我定位到了上面那个<code>if</code>代码片段。这里有什么问题呢？<br>它的<code>push(..)</code>实现只接受一个参数，然而jQuery中期望是通过<code>push(el1,el2,...)</code>来调用push方法，所以它就无法正常运行了。<br>Oops。<br>但是猜猜当我移除原来的push代码时发生了什么？在其他网站这个组件也不能使用的。为什么？我还是不知道具体是为什么。我认为他们意外地依赖于外部变量，而这些外部变量没有传递进来。<br>但是，真正的问题是，有人通过一种对于未来存在潜在危险的方式扩展内置原生对象，导致这个方法在未来可能无法正常运行。<br>我不是唯一遇到这个问题的人。成千上万的开发者都遇到了这种情况。我们中的大多数认为你必须十分小心当你扩展原生JS对象时。如果你这么做了，你最好不要使用跟语言新版本中的方法名相同的名字。</p>\n<h1 id=\"Promise扩展\"><a href=\"#Promise扩展\" class=\"headerlink\" title=\"Promise扩展\"></a>Promise扩展</h1><p>为什么所有的老爷爷抱怨如今Promises的火热呢？<br>因为那些开发<code>Promise</code>“polyfills”的人似乎忘记或者抛弃了老人们的智慧。他们开始直接往<code>Promise</code>和<code>Promsie.prototype</code>上加额外的东西。<br>我真的需要再去解释为什么这是一个“未来的”坏点子吗？</p>\n<h2 id=\"Blue-In-The-Face\"><a href=\"#Blue-In-The-Face\" class=\"headerlink\" title=\"Blue In The Face\"></a>Blue In The Face</h2><p>我们可以一直争论这个问题到死，但是仍然不能改变这个事实。如果你扩展原生对象，你就是和未来敌对的，就算你觉得你自己已经做得很好了。<br>而且，你用越大众化的名字来扩展原生对象，你越有可能影响未来的人。<br>让我们看看<a href=\"https://github.com/petkaantonov/bluebird\">Bluebird</a>库，因为它是最流行的<code>Promise</code>polyfill/库之一。它足够快但是它跟其他库比起来也更加大。<br>但是速度和大小并不是我现在担心的。我关心的是它选择了把自己添加到<code>Promise</code>的命名空间上。就算它使用一个polyfill安全的方式，实际上并没有，事实就算它添加许多额外的东西到原生对象上。<br>例如，Bluebird添加了<code>Promise.method(..)</code>:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">someAsyncNonPromiseFunc</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> wrappedFn = <span class=\"built_in\">Promise</span>.method( someAsyncNonPromiseFunc );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> p = wrappedFn(..);</div><div class=\"line\"></div><div class=\"line\">p.then(..)..;</div></pre></td></tr></table></figure></p>\n<p>看起来没什么问题，是吗？当然。但是如果某天规范需要添加<code>Promise.method(..)</code>方法。然后如果它的行为和Bluebird有很大的区别会怎么样呢？<br>你又会看到<code>Array.prototype.push(..)</code>一样的情况。<br>Bluebird添加了许多东西到原生的<code>Promise</code>。所以有很多可能性会在未来会发生冲突。<br>我希望我从来不需要去修复某个人的Promise扩展代码。但是，我很可能需要这么做。</p>\n<h2 id=\"未来约束\"><a href=\"#未来约束\" class=\"headerlink\" title=\"未来约束\"></a>未来约束</h2><p>但是这还不是最糟的。如果Bluebir非常流行，然后许多现实中的网站依赖于这么一个扩展，突然一天TC39协会通过某种方式强制避免扩展官方规范，那么这些依赖于扩展的网站都将崩溃。<br>你看，这就是扩展原生对象的危险所在：你为了实现你的功能然后扩展原生对象，然后就拍拍屁股把这些烂摊子留给了TC39成员们。因为你愚蠢的决定Javascript的维护者只能选择其他机制。<br>不相信我？这种情况已经发生很多次了。你知道为什么在19年的JS历史中<code>typeof null === &quot;object&quot;</code>这个bug一直无法修复吗？因为太多的代码都依赖于这段代码了。如果他们修复了这个bug，那么结果可想而知。<br>我真的不想这种事情发生在<code>Promsie</code>身上。请停止通过扩展原生对象来定义Promise polyfill/库。</p>\n<h2 id=\"包装抽象\"><a href=\"#包装抽象\" class=\"headerlink\" title=\"包装抽象\"></a>包装抽象</h2><p>我认为我们需要更多不破坏规范的polyfill，像我的”<a href=\"https://github.com/getify/native-promise-only\">Native Promise Only</a>“。我们需要良好，稳固，性能优秀但是和标准兼容的polyfill。<br>特别的，我们需要它们以便于那些需要扩展promise的人可以在这个包装上进行操作。我们不应该很容易获得一个<code>Promise</code>polyfill然后创建我们自己的<code>SuperAwesomePromise</code>包装在它上面吗？<br>已经有很多的好例子了，比如<a href=\"https://github.com/kriskowal/q\">Q</a>和<a href=\"https://github.com/cujojs/when\">when</a><br>我自己也写了一个，叫做<a href=\"http://github.com/getify/asynquence\">asnquence</a>(async + sequence)<br>我的是设计来隐藏promises的，因为promise是低级别的API，所以与其给你一个简单的抽象的东西不如隐藏丑陋的细节。<br>例如，比较下下面两段代码<br>原生Promises：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        setTimeout( resolve, n );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        ajax( url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,res</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) reject( err );</div><div class=\"line\">            <span class=\"keyword\">else</span> resolve( res );</div><div class=\"line\">        &#125; );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">delay( <span class=\"number\">100</span> )</div><div class=\"line\">.then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> request( <span class=\"string\">\"some/url\"</span> );</div><div class=\"line\">&#125; )</div><div class=\"line\">.then(</div><div class=\"line\">    success,</div><div class=\"line\">    error</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>asynquence：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delay</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ASQ( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</div><div class=\"line\">        setTimeout( done, n );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ASQ( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">done</span>)</span>&#123;</div><div class=\"line\">        ajax( url, done.errfcb );</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">delay( <span class=\"number\">100</span> )</div><div class=\"line\">.val( <span class=\"string\">\"some/url\"</span> )</div><div class=\"line\">.seq( request )</div><div class=\"line\">.then( success )</div><div class=\"line\">.or( error );</div></pre></td></tr></table></figure></p>\n<p>希望你能够通过这个简单的例子看出<em>asynquence</em>是如何降低使用promises来表达异步流程的难度的。它在底层实现为你创建promise，它自动把它们连接在一起，然后为同样的组合模式提供了简单的语法。<br>显然，我认为<em>asynquence</em>是非常令人惊奇的。我认为你应该看看一些<a href=\"https://github.com/getify/asynquence#tldr-by-example\">例子</a>，然后看看大家扩展的<a href=\"https://github.com/getify/asynquence/blob/master/contrib/README.md\">插件</a>，这些插件使得它能提供更多的便利。<br>如果<em>asynquence</em>不是你的菜，那么你可以再寻找一个适合你的好用知名的抽象库。<br>但是请不要使用那些扩展原生<code>Promise</code>的库。这对于未来不是一件好事。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Promise是令人惊奇的并且它们正在改变许多JS开发者编写和维护一部流程的方式。<br>ES6带来的原生<code>Promise</code>是这个语言一个重大的胜利。为了加速这个胜利的过程，我们中的许多人开发Promise polyfill和Promise库。<br>但是不要因为Promise带来的兴奋和喜悦让你忘了一个不可否认的事实：<strong>扩展原生对象是一件危险并且充满冒险的事情</strong>，并仅仅对于库的作者也包括使用这些库的所有人。<br>最后，请负有责任感并且使用安全的promise扩展。我们在将来会感谢你的。</p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-4/\">http://blog.getify.com/promises-part-4/</a></p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>"},{"title":"(译)深入理解Promise五部曲：3.可靠性问题","date":"2014-07-02T06:44:43.000Z","_content":"如果你需要赶上我们关于Promise的进度，可以看看这个系列前两篇文章[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)和[深入理解Promise五部曲--2.控制权转移问题](/#/blog/2014/06/29/understand-promise-2/)。\n\n<!-- more -->\n## Promise状态 == 信任\n\n在前面，我们说明了几个关于Promises如何工作的要点，这些要点是我们之所以可以信任promise机制作为控制转移的一种解决方案的基础。\n这些要点直接来自Promises/A+规范。任何本地实现或者polyfill或者库都必须通过一个全面严格的测试来确定是否符合规范。\n对于promises可靠性是最基本的，因为如果没有可靠性，那么你就跟使用普通的回调一样了。你必须谨慎地编写那些涉及到异步调用第三方库的代码。你必须自己来解决状态跟踪的问题然后确保第三方库不会出问题。\n如果没有可靠的promises你自己可以完成异步任务吗？当然可以。但是问题是，你自己无法处理得很完美，你得把很多额外的变量加到你的代码中并且你会产生一个未来的维护风险，代码会变得很难维护。\n**Promises是被设计用来规范和集中这种逻辑的**。你可以使用一个规范的promise系统而不用担心可靠性问题，因为它会按照Promises机制来执行。\n\n\n## 可依赖吗？\n\n在理论上这个可靠性保证合同听起来很棒。但是在JavaScript中真的有可能有这么一个机制吗？\t\t\n\n### 可靠性\n\n在我开始说这个问题之前，我们首先排除一些JS代码中的可靠性问题：\n\n1. 我们这里的讨论跟密码/加密中的“私有性”和“安全”无关。\n2. 和JS代码可以被用户通过查看源码看到无关。\n3. 和一个黑客可以侵入你的服务器来发送一些恶意代码或者通过中间人攻击来劫持浏览器和服务器之间的连接来实现同样的目的或者甚至在运行时使用XSS漏洞来注入恶意代码无关。\n4. 同时，也和恶意代码一旦存在你的页面就可以理论上修改JavaScript运行时功能(比如通过修改`Object.prototype`或者`Function.prototype`)来破坏你的程序这个事实无关。\n5. 相似的，和一些粗心的代码可能会意外地通过非标准的方式来修改标准JS函数无关。\n6. 最后，和如果你页面中依赖于第三方库那么他们的服务器，连接和代码也会出现上面所说的漏洞无关。\n\n现在我可以继续了，但是我认为你已经找到关键点了。我们在通过一个假设来缩小我们的讨论范围：当所有的代码以及主机环境都在一种预期的安全的状态中时，你的程序会如何执行？\n这并不是说我们使用Promise所做的事情对上面这些问题没有帮助。这仅仅是由于这些问题在一个更高的层面上---这些问题远离了编写API和模式，这些问题留给专家来讨论。  \n\n### 在Promise状态下的可靠性\n\n我们看看下面这个例子：\n```javascript\nvar myPromise = {\n    state: {\n        status: 1,\n        value: \"Hello World\"\n    },\n    then: function(success,failure) {\n        // implement something like a thenable's behavior\n    }\n};\n```\n我可以新建一个像这样的对象，然后在平时使用它并且说我在用promises。实际是，我可以再完善一下使它可以通过整个[Promises/A+ 测试网站](https://github.com/promises-aplus/promises-tests)的测试。  \n\n\n### 但是我真的是使用了Promises吗？\n\n你如何回答这个问题比你意识到的更重要。在很多开发者社区中很多人的回答是，是的。\n我很确定的说，不是！\n为什么？如果你通过了promises测试网站，那么它就是一个promise 了，不是吗？而且，它在所有情况下都按照规范来执行，不是吗？\n\n\n### 不是\n\npromises的精髓远不是规范说的那么简单，是**可靠性**。\n可靠性是一个promise就是一个状态(状态会从\"pending\"转变成\"resolved\"或者\"rejected\"其中一个)的容器，这些状态会附带一个结果值(成功信息或者错误信息)。可靠性是一旦一个promise的状态变为\"resolved\"或者\"rejected\"，那么就不能改变也不会改变。可靠性就是完成的promise是不可变的。\n但是promises的精髓还有一些更深层次的东西，这些是无法通过阅读规范看出来的：改变一个promise状态和设置它的完成值的能力只存在于原始的promise的实现。也就是说这个能力的实现掌握在开发者手里。\n规范的早期版本中，把resolve/reject的功能分离出来放在一个对象中，叫做**Deferred**.\n把这想成一个对象对：在创建的时候，我们创建一个promise和一个deferred，deferred可以resolve这个promise。\n重要的是，这两个可以被分开，一部分代码可以resolve/reject一个promise而另外一部分只能监听这个变化然后做出回应。\n规范的后续版本中简化了promises，通过删除deferred对象，取而代之的是简单的暴露出原来属于deferred的`resolve()`和`reject()`方法。\n```javascript\nvar p = new Promise( function(resolve,reject){\n    // I have `resolve()` and `reject()` from the\n    // hidden `deferred`, and I **alone** control\n    // the state of the promise.\n} );\n\n// now, I can pass around `p` freely, and it can't\n// be changed by anyone else but the creator.\n```\n看看之前的那个`myPromise`对象。你注意到了什么吗？\n```javascript\nvar myPromise = {\n    state: {\n        status: 1,\n        value: \"Hello World\"\n    },\n    then: function(success,failure) {\n        // implement something like a thenable's behavior\n    }\n};\n```\n如果你到处传递`myPromise`，然后不管恶意代码还是意外的代码都可以改变`myPromise.state.status`或者`myPromise.state.value`属性，我们是不是开了一个很大的后门，失去了Promises的可靠性。\n当然，答案是肯定的。把状态暴露给方法使得这不是一个真正的promise。因为现在promise的保证已经完全不可靠了。\n如果你从一个第三方库中得到了一个这样的对象，你不会信任它的，不是吗？更重要的，如果你把这个对象传递给其他第三方库，你肯定不会相信只有原始的创建者才能修改它，不是吗？\n当然不会相信。那就太天真了。\n你看，使用promises是基于可靠性的。然后可靠性是基于promise的状态是与外部影响隔离的，只有创建者能改变。注意到我并没有说状态必须是私有的，只要它不会被外界改变就可以。\n如果没有promise的对象不会被除了创建者改变的可靠性，那么promise就几乎失去了它的意义。\n\n\n## 错误的可靠性？\n\n注意，这正是事情变得模糊的地方，是不可忽视的事实。\n大多数为了在旧的JS环境下能够支持promise的polyfill会把状态通过可变的方式暴露出来。\nOuch!!!\n在这方面，我的ES6 Promise polyfill\"[Native Promise Only](http://github.com/getify/native-promise-only)\"没有把state暴露出来。据我所知，这是唯一一个没有把promise状态暴露出来的polyfill。\n为什么？因为我不仅仅关心Promise规范，我更在意Promises的精髓。\n### Tradeoffs\n但是究竟为什么所有这些高度可信的Promise polyfill和库会忘了promise中这么重要的东西呢？\n因为在原生Javascript有一些限制，这是一些内置机制不需要遵循的。\n简单的说，即将到来的ES6标准指出`Promise`是一个“class”，所以作为一个“class”，promise必须可以被子类化。\n换句话说，你必须可以创建一个`class CustomPromise extends Promise{..}`子类，在这个基础上你可以扩展内置promises的功能。\n例如，你需要一个自定义的promise，这个promise可以处理超过一条消息。至少理论上，实现这个只需要你继承内置`Promise`类然后扩展它。\n鉴于我对JS中类概念的偏见，我认为`Promise`子类化是一种没有意义的闹剧或者转移注意力的幌子。我努力让自己想出一些Promise子类化的好处，可是我实在想不出来。\n而且，如果要继续保持一些特性来遵循[Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests),这些子类的实现很可能变得相当笨拙。\n最后，我对于promise的子类化没有任何好感。\n\n\n### 怎么办呢！？\n\n不涉及太多JS的细节，把`Promise`表达成一个可以被继承的\"class\"需要你把实例方法加入到`Promise.prototype`对象中。\n但是当你这么做的时候，你就把`then..()`和`catch(..)`变成共享方法，所有`Promise`实例都可以访问到，然后这些方法只能通过this访问每个实例上的公共属性。\n换句话说，如果要使得promise可以子类化，只使用简单的JS是不可能的，必须使用闭包或其他方法来为每个实例创建私有的promise状态。\n我知道现在你已经开始想各种你见过的可以实现闭包私有和`this`公共继承混合的方法。\n我可以写一整本书来说明为什么这样行不通，但是我这里就简单的说下：不要管你所听到的，只使用ES5中可以使用的方法，你是不可能创建私有状态同时又可以有效子类化的promise。\n这两个概念在ES5以下是互相排斥的。\n\n\n### Promise 削弱\n\n另一个ES6中的新特性是**WeakMap**。简单的说，一个`WeakMap`实例能够使用对象引用作为键，然后和一个数据相联系，而不需要真正把数据存储在对象上。\n这正是我们需要的，不是吗？我们需要一个我们公共的`then(..)`和`catch(..)`可以访问的`WeakMap`，无论`this`绑定的是什么，它们都可以根据`this`访问到并且查找对应的被保护的状态值。这个特权`Promise`方法可以取得这个内部状态，但是外部不能。\n不过，事情并没有这么美好：\n1. `WeakMap`根本不可能通过原生JS用性能可接受的方法实现。\n2. 就算我们在ES5及以下可以使用`WeakMap`，它还是没有完全解决子类化的问题，因为你必须隐藏`WeakMap`实例使得只有你的`Promise`方法可以访问，但是这样的话另一个`Promise`的子类也能访问到。\n假设我们可以解决第二个问题---其实我们不能，就做一个假设。那么`WeakMap`的实现应该是什么样的呢？\n```javascript\nvar WeakMap = function(){\n    var objs = [], data = [];\n\n    function findObj(obj) {\n        for (var i=0; i<objs.length; i++) {\n            if (objs[i] === obj) return i;\n        }\n\n        // not found, add it onto the end\n        objs.push( obj );\n        data.push( undefined );\n\n        return i;\n    }\n\n    function __set(key,value) {\n        var idx = findObj( key );\n        data[idx] = value;\n    }\n\n    function __get(key) {\n        var idx = findObj( key );\n        return data[idx];\n    }\n\n    return {\n        \"set\": __set,\n        \"get\": __get\n    };\n};\n\nvar myMap = new WeakMap();\nvar myObj = {};\n\nmyMap.set( myObj, \"foo\" );\n\nmyObj.foo; // undefined\n\nmyMap.get( myObj ); // \"foo\"\n```\nOK，基本的思想就是我们维护两个数组(`objs`，`data`)，通过下标相对应。在第一个数组中保存对象引用，在另一个保存数据。\n漂亮，不是吗？\n看看性能怎么样吧。看看`findObj(..)`，它要循环整个数组来找到相应的数据。引用越多性能就越低。\n但是这还不是最坏的地方。`WeakMap`之所以叫做“Weak”是由于垃圾回收行为。在我们`WeakMap`的实现中，会保存每个对象的引用，这就意味着就算程序已经没有对于对象的引用了，这些对象还是不能被回收。但是真正的`WeakMap`就是这么“weak”，所以你不需要做任何事情来优化垃圾回收。\n好的，`WeakMap`是一个错误的希望。它并没有解决ES6中的问题并且使得事情在ES5及以下变得更糟。\n\n\n### 保护state还是子类化？\n\n这是个问题！\n我真的希望我能创建一个忠实的`Peomise`polyfill给ES5及以下。\n但是必须做一个选择，在这里出现了一个分歧。要不就放弃子类化的功能，要不就放弃作为promise的可靠性。\n那么我们该怎么做呢？\n\n\n## 总结\n我会做另一个promise polyfill，这个polyfill选择保留子类化的能力，以可变的state为代价。\n我已经选择了抛弃子类化使得我的promise polyfill可以很可靠。\n就像我之前说的，我认为promise的子类化最终会被证明是一个华而不实的东西。我不会牺牲promise的可靠性来顺从子类化。\n很显然，其他人对于这个问题会有不同的看法。但是我只想让你问问你自己：一个不可靠的promise可以用来干嘛？什么代码能真正拯救你？什么代码可以做得更好？\n现有的Promise polyfill和库的问题比不可变的state vs 子类化更深层面。在第四部分：扩展问题中，我会指出许多现有polyfill和库中的问题。\n\n\n## 译者注\n\n这篇文章不大好翻译也不大好理解，所以在这里总结下我的理解，希望对大家的理解有所帮助，如果大家有什么不同的看法，欢迎讨论。\n这篇文章围绕Promise的可靠性展开，Promise的可靠性是它的精髓所在。要实现Promise的可靠性最关键的就是要保证Promise的状态值state不能被外部改变，这样才能保证状态值的不可逆。\n而现在几乎所有的Promise库都忽略了这个关键，而它们会忽略这个关键点一个很重要的原因就是在ES6的规范中，Promise被规定为一个类，也就是说Promise是可以被子类化的。然而在ES5及以下的规范中，在没有`private`关键字的情况下，是不可能实现可子类化同时又能保证Promise的状态值不会被外部改变（真的吗？我保持怀疑态度）。而在ES6中出现的新对象`WeakMap`确实给实现Promise带来了新的思路，可以在ES5及以下环境中实现`WeakMap`，利用它的特点可以实现符合要求的Promise。具体实现思路就是：定义一个全局私有的`WeakMap`，这个`WeakMap`只有公共的方法`then()`和`catch()`可以访问到，在这个`WeakMap`中以每个Promise实例的this作为键，状态值state作为值进行存储。这样在每个Promise实例中都可以通过自己的this对象查找自己的状态值，而不能查找到其他Promise实例的状态值，这样就实现了状态值的外部不可修改。但是`WeakMap`有一个很大的问题就是性能比较低并且不利于垃圾回收，所以这并不是一个理想的解决方案。\n综上两个原因就导致了现在大部分库暴露state状态值，它们为了实现子类化选择了暴露状态值，丢弃了Promise的精髓所在。\n而在作者看来子类化对于Promise的重要性远远比不上Promise的可靠性，所以它选择了放弃子类化而保证Promise的可靠性。事实确实是这样，如果不能保证Promise的可靠性，那么就会出现[第一篇](/#/blog/2014/06/23/understand-promise-1/)中出现的那个不可靠的情况，这样Promise除了改善了回调金字塔的问题，跟普通的回调也就没有什么区别了，也就失去了它更重要的意义。\n\n原文地址：http://blog.getify.com/promises-part-3/\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n","source":"_posts/understand-promise-3.md","raw":"title: (译)深入理解Promise五部曲：3.可靠性问题\ndate: 2014-07-02 14:44:43\ntags: ['promise']\n---\n如果你需要赶上我们关于Promise的进度，可以看看这个系列前两篇文章[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)和[深入理解Promise五部曲--2.控制权转移问题](/#/blog/2014/06/29/understand-promise-2/)。\n\n<!-- more -->\n## Promise状态 == 信任\n\n在前面，我们说明了几个关于Promises如何工作的要点，这些要点是我们之所以可以信任promise机制作为控制转移的一种解决方案的基础。\n这些要点直接来自Promises/A+规范。任何本地实现或者polyfill或者库都必须通过一个全面严格的测试来确定是否符合规范。\n对于promises可靠性是最基本的，因为如果没有可靠性，那么你就跟使用普通的回调一样了。你必须谨慎地编写那些涉及到异步调用第三方库的代码。你必须自己来解决状态跟踪的问题然后确保第三方库不会出问题。\n如果没有可靠的promises你自己可以完成异步任务吗？当然可以。但是问题是，你自己无法处理得很完美，你得把很多额外的变量加到你的代码中并且你会产生一个未来的维护风险，代码会变得很难维护。\n**Promises是被设计用来规范和集中这种逻辑的**。你可以使用一个规范的promise系统而不用担心可靠性问题，因为它会按照Promises机制来执行。\n\n\n## 可依赖吗？\n\n在理论上这个可靠性保证合同听起来很棒。但是在JavaScript中真的有可能有这么一个机制吗？\t\t\n\n### 可靠性\n\n在我开始说这个问题之前，我们首先排除一些JS代码中的可靠性问题：\n\n1. 我们这里的讨论跟密码/加密中的“私有性”和“安全”无关。\n2. 和JS代码可以被用户通过查看源码看到无关。\n3. 和一个黑客可以侵入你的服务器来发送一些恶意代码或者通过中间人攻击来劫持浏览器和服务器之间的连接来实现同样的目的或者甚至在运行时使用XSS漏洞来注入恶意代码无关。\n4. 同时，也和恶意代码一旦存在你的页面就可以理论上修改JavaScript运行时功能(比如通过修改`Object.prototype`或者`Function.prototype`)来破坏你的程序这个事实无关。\n5. 相似的，和一些粗心的代码可能会意外地通过非标准的方式来修改标准JS函数无关。\n6. 最后，和如果你页面中依赖于第三方库那么他们的服务器，连接和代码也会出现上面所说的漏洞无关。\n\n现在我可以继续了，但是我认为你已经找到关键点了。我们在通过一个假设来缩小我们的讨论范围：当所有的代码以及主机环境都在一种预期的安全的状态中时，你的程序会如何执行？\n这并不是说我们使用Promise所做的事情对上面这些问题没有帮助。这仅仅是由于这些问题在一个更高的层面上---这些问题远离了编写API和模式，这些问题留给专家来讨论。  \n\n### 在Promise状态下的可靠性\n\n我们看看下面这个例子：\n```javascript\nvar myPromise = {\n    state: {\n        status: 1,\n        value: \"Hello World\"\n    },\n    then: function(success,failure) {\n        // implement something like a thenable's behavior\n    }\n};\n```\n我可以新建一个像这样的对象，然后在平时使用它并且说我在用promises。实际是，我可以再完善一下使它可以通过整个[Promises/A+ 测试网站](https://github.com/promises-aplus/promises-tests)的测试。  \n\n\n### 但是我真的是使用了Promises吗？\n\n你如何回答这个问题比你意识到的更重要。在很多开发者社区中很多人的回答是，是的。\n我很确定的说，不是！\n为什么？如果你通过了promises测试网站，那么它就是一个promise 了，不是吗？而且，它在所有情况下都按照规范来执行，不是吗？\n\n\n### 不是\n\npromises的精髓远不是规范说的那么简单，是**可靠性**。\n可靠性是一个promise就是一个状态(状态会从\"pending\"转变成\"resolved\"或者\"rejected\"其中一个)的容器，这些状态会附带一个结果值(成功信息或者错误信息)。可靠性是一旦一个promise的状态变为\"resolved\"或者\"rejected\"，那么就不能改变也不会改变。可靠性就是完成的promise是不可变的。\n但是promises的精髓还有一些更深层次的东西，这些是无法通过阅读规范看出来的：改变一个promise状态和设置它的完成值的能力只存在于原始的promise的实现。也就是说这个能力的实现掌握在开发者手里。\n规范的早期版本中，把resolve/reject的功能分离出来放在一个对象中，叫做**Deferred**.\n把这想成一个对象对：在创建的时候，我们创建一个promise和一个deferred，deferred可以resolve这个promise。\n重要的是，这两个可以被分开，一部分代码可以resolve/reject一个promise而另外一部分只能监听这个变化然后做出回应。\n规范的后续版本中简化了promises，通过删除deferred对象，取而代之的是简单的暴露出原来属于deferred的`resolve()`和`reject()`方法。\n```javascript\nvar p = new Promise( function(resolve,reject){\n    // I have `resolve()` and `reject()` from the\n    // hidden `deferred`, and I **alone** control\n    // the state of the promise.\n} );\n\n// now, I can pass around `p` freely, and it can't\n// be changed by anyone else but the creator.\n```\n看看之前的那个`myPromise`对象。你注意到了什么吗？\n```javascript\nvar myPromise = {\n    state: {\n        status: 1,\n        value: \"Hello World\"\n    },\n    then: function(success,failure) {\n        // implement something like a thenable's behavior\n    }\n};\n```\n如果你到处传递`myPromise`，然后不管恶意代码还是意外的代码都可以改变`myPromise.state.status`或者`myPromise.state.value`属性，我们是不是开了一个很大的后门，失去了Promises的可靠性。\n当然，答案是肯定的。把状态暴露给方法使得这不是一个真正的promise。因为现在promise的保证已经完全不可靠了。\n如果你从一个第三方库中得到了一个这样的对象，你不会信任它的，不是吗？更重要的，如果你把这个对象传递给其他第三方库，你肯定不会相信只有原始的创建者才能修改它，不是吗？\n当然不会相信。那就太天真了。\n你看，使用promises是基于可靠性的。然后可靠性是基于promise的状态是与外部影响隔离的，只有创建者能改变。注意到我并没有说状态必须是私有的，只要它不会被外界改变就可以。\n如果没有promise的对象不会被除了创建者改变的可靠性，那么promise就几乎失去了它的意义。\n\n\n## 错误的可靠性？\n\n注意，这正是事情变得模糊的地方，是不可忽视的事实。\n大多数为了在旧的JS环境下能够支持promise的polyfill会把状态通过可变的方式暴露出来。\nOuch!!!\n在这方面，我的ES6 Promise polyfill\"[Native Promise Only](http://github.com/getify/native-promise-only)\"没有把state暴露出来。据我所知，这是唯一一个没有把promise状态暴露出来的polyfill。\n为什么？因为我不仅仅关心Promise规范，我更在意Promises的精髓。\n### Tradeoffs\n但是究竟为什么所有这些高度可信的Promise polyfill和库会忘了promise中这么重要的东西呢？\n因为在原生Javascript有一些限制，这是一些内置机制不需要遵循的。\n简单的说，即将到来的ES6标准指出`Promise`是一个“class”，所以作为一个“class”，promise必须可以被子类化。\n换句话说，你必须可以创建一个`class CustomPromise extends Promise{..}`子类，在这个基础上你可以扩展内置promises的功能。\n例如，你需要一个自定义的promise，这个promise可以处理超过一条消息。至少理论上，实现这个只需要你继承内置`Promise`类然后扩展它。\n鉴于我对JS中类概念的偏见，我认为`Promise`子类化是一种没有意义的闹剧或者转移注意力的幌子。我努力让自己想出一些Promise子类化的好处，可是我实在想不出来。\n而且，如果要继续保持一些特性来遵循[Promises/A+ Test Suite](https://github.com/promises-aplus/promises-tests),这些子类的实现很可能变得相当笨拙。\n最后，我对于promise的子类化没有任何好感。\n\n\n### 怎么办呢！？\n\n不涉及太多JS的细节，把`Promise`表达成一个可以被继承的\"class\"需要你把实例方法加入到`Promise.prototype`对象中。\n但是当你这么做的时候，你就把`then..()`和`catch(..)`变成共享方法，所有`Promise`实例都可以访问到，然后这些方法只能通过this访问每个实例上的公共属性。\n换句话说，如果要使得promise可以子类化，只使用简单的JS是不可能的，必须使用闭包或其他方法来为每个实例创建私有的promise状态。\n我知道现在你已经开始想各种你见过的可以实现闭包私有和`this`公共继承混合的方法。\n我可以写一整本书来说明为什么这样行不通，但是我这里就简单的说下：不要管你所听到的，只使用ES5中可以使用的方法，你是不可能创建私有状态同时又可以有效子类化的promise。\n这两个概念在ES5以下是互相排斥的。\n\n\n### Promise 削弱\n\n另一个ES6中的新特性是**WeakMap**。简单的说，一个`WeakMap`实例能够使用对象引用作为键，然后和一个数据相联系，而不需要真正把数据存储在对象上。\n这正是我们需要的，不是吗？我们需要一个我们公共的`then(..)`和`catch(..)`可以访问的`WeakMap`，无论`this`绑定的是什么，它们都可以根据`this`访问到并且查找对应的被保护的状态值。这个特权`Promise`方法可以取得这个内部状态，但是外部不能。\n不过，事情并没有这么美好：\n1. `WeakMap`根本不可能通过原生JS用性能可接受的方法实现。\n2. 就算我们在ES5及以下可以使用`WeakMap`，它还是没有完全解决子类化的问题，因为你必须隐藏`WeakMap`实例使得只有你的`Promise`方法可以访问，但是这样的话另一个`Promise`的子类也能访问到。\n假设我们可以解决第二个问题---其实我们不能，就做一个假设。那么`WeakMap`的实现应该是什么样的呢？\n```javascript\nvar WeakMap = function(){\n    var objs = [], data = [];\n\n    function findObj(obj) {\n        for (var i=0; i<objs.length; i++) {\n            if (objs[i] === obj) return i;\n        }\n\n        // not found, add it onto the end\n        objs.push( obj );\n        data.push( undefined );\n\n        return i;\n    }\n\n    function __set(key,value) {\n        var idx = findObj( key );\n        data[idx] = value;\n    }\n\n    function __get(key) {\n        var idx = findObj( key );\n        return data[idx];\n    }\n\n    return {\n        \"set\": __set,\n        \"get\": __get\n    };\n};\n\nvar myMap = new WeakMap();\nvar myObj = {};\n\nmyMap.set( myObj, \"foo\" );\n\nmyObj.foo; // undefined\n\nmyMap.get( myObj ); // \"foo\"\n```\nOK，基本的思想就是我们维护两个数组(`objs`，`data`)，通过下标相对应。在第一个数组中保存对象引用，在另一个保存数据。\n漂亮，不是吗？\n看看性能怎么样吧。看看`findObj(..)`，它要循环整个数组来找到相应的数据。引用越多性能就越低。\n但是这还不是最坏的地方。`WeakMap`之所以叫做“Weak”是由于垃圾回收行为。在我们`WeakMap`的实现中，会保存每个对象的引用，这就意味着就算程序已经没有对于对象的引用了，这些对象还是不能被回收。但是真正的`WeakMap`就是这么“weak”，所以你不需要做任何事情来优化垃圾回收。\n好的，`WeakMap`是一个错误的希望。它并没有解决ES6中的问题并且使得事情在ES5及以下变得更糟。\n\n\n### 保护state还是子类化？\n\n这是个问题！\n我真的希望我能创建一个忠实的`Peomise`polyfill给ES5及以下。\n但是必须做一个选择，在这里出现了一个分歧。要不就放弃子类化的功能，要不就放弃作为promise的可靠性。\n那么我们该怎么做呢？\n\n\n## 总结\n我会做另一个promise polyfill，这个polyfill选择保留子类化的能力，以可变的state为代价。\n我已经选择了抛弃子类化使得我的promise polyfill可以很可靠。\n就像我之前说的，我认为promise的子类化最终会被证明是一个华而不实的东西。我不会牺牲promise的可靠性来顺从子类化。\n很显然，其他人对于这个问题会有不同的看法。但是我只想让你问问你自己：一个不可靠的promise可以用来干嘛？什么代码能真正拯救你？什么代码可以做得更好？\n现有的Promise polyfill和库的问题比不可变的state vs 子类化更深层面。在第四部分：扩展问题中，我会指出许多现有polyfill和库中的问题。\n\n\n## 译者注\n\n这篇文章不大好翻译也不大好理解，所以在这里总结下我的理解，希望对大家的理解有所帮助，如果大家有什么不同的看法，欢迎讨论。\n这篇文章围绕Promise的可靠性展开，Promise的可靠性是它的精髓所在。要实现Promise的可靠性最关键的就是要保证Promise的状态值state不能被外部改变，这样才能保证状态值的不可逆。\n而现在几乎所有的Promise库都忽略了这个关键，而它们会忽略这个关键点一个很重要的原因就是在ES6的规范中，Promise被规定为一个类，也就是说Promise是可以被子类化的。然而在ES5及以下的规范中，在没有`private`关键字的情况下，是不可能实现可子类化同时又能保证Promise的状态值不会被外部改变（真的吗？我保持怀疑态度）。而在ES6中出现的新对象`WeakMap`确实给实现Promise带来了新的思路，可以在ES5及以下环境中实现`WeakMap`，利用它的特点可以实现符合要求的Promise。具体实现思路就是：定义一个全局私有的`WeakMap`，这个`WeakMap`只有公共的方法`then()`和`catch()`可以访问到，在这个`WeakMap`中以每个Promise实例的this作为键，状态值state作为值进行存储。这样在每个Promise实例中都可以通过自己的this对象查找自己的状态值，而不能查找到其他Promise实例的状态值，这样就实现了状态值的外部不可修改。但是`WeakMap`有一个很大的问题就是性能比较低并且不利于垃圾回收，所以这并不是一个理想的解决方案。\n综上两个原因就导致了现在大部分库暴露state状态值，它们为了实现子类化选择了暴露状态值，丢弃了Promise的精髓所在。\n而在作者看来子类化对于Promise的重要性远远比不上Promise的可靠性，所以它选择了放弃子类化而保证Promise的可靠性。事实确实是这样，如果不能保证Promise的可靠性，那么就会出现[第一篇](/#/blog/2014/06/23/understand-promise-1/)中出现的那个不可靠的情况，这样Promise除了改善了回调金字塔的问题，跟普通的回调也就没有什么区别了，也就失去了它更重要的意义。\n\n原文地址：http://blog.getify.com/promises-part-3/\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n","slug":"understand-promise-3","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvlh001o0povox51g3q5","content":"<p>如果你需要赶上我们关于Promise的进度，可以看看这个系列前两篇文章<a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a>和<a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.控制权转移问题</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"Promise状态-信任\"><a href=\"#Promise状态-信任\" class=\"headerlink\" title=\"Promise状态 == 信任\"></a>Promise状态 == 信任</h2><p>在前面，我们说明了几个关于Promises如何工作的要点，这些要点是我们之所以可以信任promise机制作为控制转移的一种解决方案的基础。<br>这些要点直接来自Promises/A+规范。任何本地实现或者polyfill或者库都必须通过一个全面严格的测试来确定是否符合规范。<br>对于promises可靠性是最基本的，因为如果没有可靠性，那么你就跟使用普通的回调一样了。你必须谨慎地编写那些涉及到异步调用第三方库的代码。你必须自己来解决状态跟踪的问题然后确保第三方库不会出问题。<br>如果没有可靠的promises你自己可以完成异步任务吗？当然可以。但是问题是，你自己无法处理得很完美，你得把很多额外的变量加到你的代码中并且你会产生一个未来的维护风险，代码会变得很难维护。<br><strong>Promises是被设计用来规范和集中这种逻辑的</strong>。你可以使用一个规范的promise系统而不用担心可靠性问题，因为它会按照Promises机制来执行。</p>\n<h2 id=\"可依赖吗？\"><a href=\"#可依赖吗？\" class=\"headerlink\" title=\"可依赖吗？\"></a>可依赖吗？</h2><p>在理论上这个可靠性保证合同听起来很棒。但是在JavaScript中真的有可能有这么一个机制吗？        </p>\n<h3 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h3><p>在我开始说这个问题之前，我们首先排除一些JS代码中的可靠性问题：</p>\n<ol>\n<li>我们这里的讨论跟密码/加密中的“私有性”和“安全”无关。</li>\n<li>和JS代码可以被用户通过查看源码看到无关。</li>\n<li>和一个黑客可以侵入你的服务器来发送一些恶意代码或者通过中间人攻击来劫持浏览器和服务器之间的连接来实现同样的目的或者甚至在运行时使用XSS漏洞来注入恶意代码无关。</li>\n<li>同时，也和恶意代码一旦存在你的页面就可以理论上修改JavaScript运行时功能(比如通过修改<code>Object.prototype</code>或者<code>Function.prototype</code>)来破坏你的程序这个事实无关。</li>\n<li>相似的，和一些粗心的代码可能会意外地通过非标准的方式来修改标准JS函数无关。</li>\n<li>最后，和如果你页面中依赖于第三方库那么他们的服务器，连接和代码也会出现上面所说的漏洞无关。</li>\n</ol>\n<p>现在我可以继续了，但是我认为你已经找到关键点了。我们在通过一个假设来缩小我们的讨论范围：当所有的代码以及主机环境都在一种预期的安全的状态中时，你的程序会如何执行？<br>这并不是说我们使用Promise所做的事情对上面这些问题没有帮助。这仅仅是由于这些问题在一个更高的层面上—这些问题远离了编写API和模式，这些问题留给专家来讨论。  </p>\n<h3 id=\"在Promise状态下的可靠性\"><a href=\"#在Promise状态下的可靠性\" class=\"headerlink\" title=\"在Promise状态下的可靠性\"></a>在Promise状态下的可靠性</h3><p>我们看看下面这个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPromise = &#123;</div><div class=\"line\">    state: &#123;</div><div class=\"line\">        status: <span class=\"number\">1</span>,</div><div class=\"line\">        value: <span class=\"string\">\"Hello World\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success,failure</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// implement something like a thenable's behavior</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我可以新建一个像这样的对象，然后在平时使用它并且说我在用promises。实际是，我可以再完善一下使它可以通过整个<a href=\"https://github.com/promises-aplus/promises-tests\" target=\"_blank\" rel=\"external\">Promises/A+ 测试网站</a>的测试。  </p>\n<h3 id=\"但是我真的是使用了Promises吗？\"><a href=\"#但是我真的是使用了Promises吗？\" class=\"headerlink\" title=\"但是我真的是使用了Promises吗？\"></a>但是我真的是使用了Promises吗？</h3><p>你如何回答这个问题比你意识到的更重要。在很多开发者社区中很多人的回答是，是的。<br>我很确定的说，不是！<br>为什么？如果你通过了promises测试网站，那么它就是一个promise 了，不是吗？而且，它在所有情况下都按照规范来执行，不是吗？</p>\n<h3 id=\"不是\"><a href=\"#不是\" class=\"headerlink\" title=\"不是\"></a>不是</h3><p>promises的精髓远不是规范说的那么简单，是<strong>可靠性</strong>。<br>可靠性是一个promise就是一个状态(状态会从”pending”转变成”resolved”或者”rejected”其中一个)的容器，这些状态会附带一个结果值(成功信息或者错误信息)。可靠性是一旦一个promise的状态变为”resolved”或者”rejected”，那么就不能改变也不会改变。可靠性就是完成的promise是不可变的。<br>但是promises的精髓还有一些更深层次的东西，这些是无法通过阅读规范看出来的：改变一个promise状态和设置它的完成值的能力只存在于原始的promise的实现。也就是说这个能力的实现掌握在开发者手里。<br>规范的早期版本中，把resolve/reject的功能分离出来放在一个对象中，叫做<strong>Deferred</strong>.<br>把这想成一个对象对：在创建的时候，我们创建一个promise和一个deferred，deferred可以resolve这个promise。<br>重要的是，这两个可以被分开，一部分代码可以resolve/reject一个promise而另外一部分只能监听这个变化然后做出回应。<br>规范的后续版本中简化了promises，通过删除deferred对象，取而代之的是简单的暴露出原来属于deferred的<code>resolve()</code>和<code>reject()</code>方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I have `resolve()` and `reject()` from the</span></div><div class=\"line\">    <span class=\"comment\">// hidden `deferred`, and I **alone** control</span></div><div class=\"line\">    <span class=\"comment\">// the state of the promise.</span></div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now, I can pass around `p` freely, and it can't</span></div><div class=\"line\"><span class=\"comment\">// be changed by anyone else but the creator.</span></div></pre></td></tr></table></figure></p>\n<p>看看之前的那个<code>myPromise</code>对象。你注意到了什么吗？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPromise = &#123;</div><div class=\"line\">    state: &#123;</div><div class=\"line\">        status: <span class=\"number\">1</span>,</div><div class=\"line\">        value: <span class=\"string\">\"Hello World\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success,failure</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// implement something like a thenable's behavior</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>如果你到处传递<code>myPromise</code>，然后不管恶意代码还是意外的代码都可以改变<code>myPromise.state.status</code>或者<code>myPromise.state.value</code>属性，我们是不是开了一个很大的后门，失去了Promises的可靠性。<br>当然，答案是肯定的。把状态暴露给方法使得这不是一个真正的promise。因为现在promise的保证已经完全不可靠了。<br>如果你从一个第三方库中得到了一个这样的对象，你不会信任它的，不是吗？更重要的，如果你把这个对象传递给其他第三方库，你肯定不会相信只有原始的创建者才能修改它，不是吗？<br>当然不会相信。那就太天真了。<br>你看，使用promises是基于可靠性的。然后可靠性是基于promise的状态是与外部影响隔离的，只有创建者能改变。注意到我并没有说状态必须是私有的，只要它不会被外界改变就可以。<br>如果没有promise的对象不会被除了创建者改变的可靠性，那么promise就几乎失去了它的意义。</p>\n<h2 id=\"错误的可靠性？\"><a href=\"#错误的可靠性？\" class=\"headerlink\" title=\"错误的可靠性？\"></a>错误的可靠性？</h2><p>注意，这正是事情变得模糊的地方，是不可忽视的事实。<br>大多数为了在旧的JS环境下能够支持promise的polyfill会把状态通过可变的方式暴露出来。<br>Ouch!!!<br>在这方面，我的ES6 Promise polyfill”<a href=\"http://github.com/getify/native-promise-only\" target=\"_blank\" rel=\"external\">Native Promise Only</a>“没有把state暴露出来。据我所知，这是唯一一个没有把promise状态暴露出来的polyfill。<br>为什么？因为我不仅仅关心Promise规范，我更在意Promises的精髓。</p>\n<h3 id=\"Tradeoffs\"><a href=\"#Tradeoffs\" class=\"headerlink\" title=\"Tradeoffs\"></a>Tradeoffs</h3><p>但是究竟为什么所有这些高度可信的Promise polyfill和库会忘了promise中这么重要的东西呢？<br>因为在原生Javascript有一些限制，这是一些内置机制不需要遵循的。<br>简单的说，即将到来的ES6标准指出<code>Promise</code>是一个“class”，所以作为一个“class”，promise必须可以被子类化。<br>换句话说，你必须可以创建一个<code>class CustomPromise extends Promise{..}</code>子类，在这个基础上你可以扩展内置promises的功能。<br>例如，你需要一个自定义的promise，这个promise可以处理超过一条消息。至少理论上，实现这个只需要你继承内置<code>Promise</code>类然后扩展它。<br>鉴于我对JS中类概念的偏见，我认为<code>Promise</code>子类化是一种没有意义的闹剧或者转移注意力的幌子。我努力让自己想出一些Promise子类化的好处，可是我实在想不出来。<br>而且，如果要继续保持一些特性来遵循<a href=\"https://github.com/promises-aplus/promises-tests\" target=\"_blank\" rel=\"external\">Promises/A+ Test Suite</a>,这些子类的实现很可能变得相当笨拙。<br>最后，我对于promise的子类化没有任何好感。</p>\n<h3 id=\"怎么办呢！？\"><a href=\"#怎么办呢！？\" class=\"headerlink\" title=\"怎么办呢！？\"></a>怎么办呢！？</h3><p>不涉及太多JS的细节，把<code>Promise</code>表达成一个可以被继承的”class”需要你把实例方法加入到<code>Promise.prototype</code>对象中。<br>但是当你这么做的时候，你就把<code>then..()</code>和<code>catch(..)</code>变成共享方法，所有<code>Promise</code>实例都可以访问到，然后这些方法只能通过this访问每个实例上的公共属性。<br>换句话说，如果要使得promise可以子类化，只使用简单的JS是不可能的，必须使用闭包或其他方法来为每个实例创建私有的promise状态。<br>我知道现在你已经开始想各种你见过的可以实现闭包私有和<code>this</code>公共继承混合的方法。<br>我可以写一整本书来说明为什么这样行不通，但是我这里就简单的说下：不要管你所听到的，只使用ES5中可以使用的方法，你是不可能创建私有状态同时又可以有效子类化的promise。<br>这两个概念在ES5以下是互相排斥的。</p>\n<h3 id=\"Promise-削弱\"><a href=\"#Promise-削弱\" class=\"headerlink\" title=\"Promise 削弱\"></a>Promise 削弱</h3><p>另一个ES6中的新特性是<strong>WeakMap</strong>。简单的说，一个<code>WeakMap</code>实例能够使用对象引用作为键，然后和一个数据相联系，而不需要真正把数据存储在对象上。<br>这正是我们需要的，不是吗？我们需要一个我们公共的<code>then(..)</code>和<code>catch(..)</code>可以访问的<code>WeakMap</code>，无论<code>this</code>绑定的是什么，它们都可以根据<code>this</code>访问到并且查找对应的被保护的状态值。这个特权<code>Promise</code>方法可以取得这个内部状态，但是外部不能。<br>不过，事情并没有这么美好：</p>\n<ol>\n<li><code>WeakMap</code>根本不可能通过原生JS用性能可接受的方法实现。</li>\n<li>就算我们在ES5及以下可以使用<code>WeakMap</code>，它还是没有完全解决子类化的问题，因为你必须隐藏<code>WeakMap</code>实例使得只有你的<code>Promise</code>方法可以访问，但是这样的话另一个<code>Promise</code>的子类也能访问到。<br>假设我们可以解决第二个问题—其实我们不能，就做一个假设。那么<code>WeakMap</code>的实现应该是什么样的呢？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">WeakMap</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> objs = [], data = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findObj</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;objs.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (objs[i] === obj) <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// not found, add it onto the end</span></div><div class=\"line\">        objs.push( obj );</div><div class=\"line\">        data.push( <span class=\"literal\">undefined</span> );</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span>(<span class=\"params\">key,value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> idx = findObj( key );</div><div class=\"line\">        data[idx] = value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> idx = findObj( key );</div><div class=\"line\">        <span class=\"keyword\">return</span> data[idx];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"string\">\"set\"</span>: __set,</div><div class=\"line\">        <span class=\"string\">\"get\"</span>: __get</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> myObj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">myMap.set( myObj, <span class=\"string\">\"foo\"</span> );</div><div class=\"line\"></div><div class=\"line\">myObj.foo; <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">myMap.get( myObj ); <span class=\"comment\">// \"foo\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>OK，基本的思想就是我们维护两个数组(<code>objs</code>，<code>data</code>)，通过下标相对应。在第一个数组中保存对象引用，在另一个保存数据。<br>漂亮，不是吗？<br>看看性能怎么样吧。看看<code>findObj(..)</code>，它要循环整个数组来找到相应的数据。引用越多性能就越低。<br>但是这还不是最坏的地方。<code>WeakMap</code>之所以叫做“Weak”是由于垃圾回收行为。在我们<code>WeakMap</code>的实现中，会保存每个对象的引用，这就意味着就算程序已经没有对于对象的引用了，这些对象还是不能被回收。但是真正的<code>WeakMap</code>就是这么“weak”，所以你不需要做任何事情来优化垃圾回收。<br>好的，<code>WeakMap</code>是一个错误的希望。它并没有解决ES6中的问题并且使得事情在ES5及以下变得更糟。</p>\n<h3 id=\"保护state还是子类化？\"><a href=\"#保护state还是子类化？\" class=\"headerlink\" title=\"保护state还是子类化？\"></a>保护state还是子类化？</h3><p>这是个问题！<br>我真的希望我能创建一个忠实的<code>Peomise</code>polyfill给ES5及以下。<br>但是必须做一个选择，在这里出现了一个分歧。要不就放弃子类化的功能，要不就放弃作为promise的可靠性。<br>那么我们该怎么做呢？</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我会做另一个promise polyfill，这个polyfill选择保留子类化的能力，以可变的state为代价。<br>我已经选择了抛弃子类化使得我的promise polyfill可以很可靠。<br>就像我之前说的，我认为promise的子类化最终会被证明是一个华而不实的东西。我不会牺牲promise的可靠性来顺从子类化。<br>很显然，其他人对于这个问题会有不同的看法。但是我只想让你问问你自己：一个不可靠的promise可以用来干嘛？什么代码能真正拯救你？什么代码可以做得更好？<br>现有的Promise polyfill和库的问题比不可变的state vs 子类化更深层面。在第四部分：扩展问题中，我会指出许多现有polyfill和库中的问题。</p>\n<h2 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注\"></a>译者注</h2><p>这篇文章不大好翻译也不大好理解，所以在这里总结下我的理解，希望对大家的理解有所帮助，如果大家有什么不同的看法，欢迎讨论。<br>这篇文章围绕Promise的可靠性展开，Promise的可靠性是它的精髓所在。要实现Promise的可靠性最关键的就是要保证Promise的状态值state不能被外部改变，这样才能保证状态值的不可逆。<br>而现在几乎所有的Promise库都忽略了这个关键，而它们会忽略这个关键点一个很重要的原因就是在ES6的规范中，Promise被规定为一个类，也就是说Promise是可以被子类化的。然而在ES5及以下的规范中，在没有<code>private</code>关键字的情况下，是不可能实现可子类化同时又能保证Promise的状态值不会被外部改变（真的吗？我保持怀疑态度）。而在ES6中出现的新对象<code>WeakMap</code>确实给实现Promise带来了新的思路，可以在ES5及以下环境中实现<code>WeakMap</code>，利用它的特点可以实现符合要求的Promise。具体实现思路就是：定义一个全局私有的<code>WeakMap</code>，这个<code>WeakMap</code>只有公共的方法<code>then()</code>和<code>catch()</code>可以访问到，在这个<code>WeakMap</code>中以每个Promise实例的this作为键，状态值state作为值进行存储。这样在每个Promise实例中都可以通过自己的this对象查找自己的状态值，而不能查找到其他Promise实例的状态值，这样就实现了状态值的外部不可修改。但是<code>WeakMap</code>有一个很大的问题就是性能比较低并且不利于垃圾回收，所以这并不是一个理想的解决方案。<br>综上两个原因就导致了现在大部分库暴露state状态值，它们为了实现子类化选择了暴露状态值，丢弃了Promise的精髓所在。<br>而在作者看来子类化对于Promise的重要性远远比不上Promise的可靠性，所以它选择了放弃子类化而保证Promise的可靠性。事实确实是这样，如果不能保证Promise的可靠性，那么就会出现<a href=\"/#/blog/2014/06/23/understand-promise-1/\">第一篇</a>中出现的那个不可靠的情况，这样Promise除了改善了回调金字塔的问题，跟普通的回调也就没有什么区别了，也就失去了它更重要的意义。</p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-3/\" target=\"_blank\" rel=\"external\">http://blog.getify.com/promises-part-3/</a></p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>\n","excerpt":"<p>如果你需要赶上我们关于Promise的进度，可以看看这个系列前两篇文章<a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a>和<a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.控制权转移问题</a>。</p>","more":"<h2 id=\"Promise状态-信任\"><a href=\"#Promise状态-信任\" class=\"headerlink\" title=\"Promise状态 == 信任\"></a>Promise状态 == 信任</h2><p>在前面，我们说明了几个关于Promises如何工作的要点，这些要点是我们之所以可以信任promise机制作为控制转移的一种解决方案的基础。<br>这些要点直接来自Promises/A+规范。任何本地实现或者polyfill或者库都必须通过一个全面严格的测试来确定是否符合规范。<br>对于promises可靠性是最基本的，因为如果没有可靠性，那么你就跟使用普通的回调一样了。你必须谨慎地编写那些涉及到异步调用第三方库的代码。你必须自己来解决状态跟踪的问题然后确保第三方库不会出问题。<br>如果没有可靠的promises你自己可以完成异步任务吗？当然可以。但是问题是，你自己无法处理得很完美，你得把很多额外的变量加到你的代码中并且你会产生一个未来的维护风险，代码会变得很难维护。<br><strong>Promises是被设计用来规范和集中这种逻辑的</strong>。你可以使用一个规范的promise系统而不用担心可靠性问题，因为它会按照Promises机制来执行。</p>\n<h2 id=\"可依赖吗？\"><a href=\"#可依赖吗？\" class=\"headerlink\" title=\"可依赖吗？\"></a>可依赖吗？</h2><p>在理论上这个可靠性保证合同听起来很棒。但是在JavaScript中真的有可能有这么一个机制吗？        </p>\n<h3 id=\"可靠性\"><a href=\"#可靠性\" class=\"headerlink\" title=\"可靠性\"></a>可靠性</h3><p>在我开始说这个问题之前，我们首先排除一些JS代码中的可靠性问题：</p>\n<ol>\n<li>我们这里的讨论跟密码/加密中的“私有性”和“安全”无关。</li>\n<li>和JS代码可以被用户通过查看源码看到无关。</li>\n<li>和一个黑客可以侵入你的服务器来发送一些恶意代码或者通过中间人攻击来劫持浏览器和服务器之间的连接来实现同样的目的或者甚至在运行时使用XSS漏洞来注入恶意代码无关。</li>\n<li>同时，也和恶意代码一旦存在你的页面就可以理论上修改JavaScript运行时功能(比如通过修改<code>Object.prototype</code>或者<code>Function.prototype</code>)来破坏你的程序这个事实无关。</li>\n<li>相似的，和一些粗心的代码可能会意外地通过非标准的方式来修改标准JS函数无关。</li>\n<li>最后，和如果你页面中依赖于第三方库那么他们的服务器，连接和代码也会出现上面所说的漏洞无关。</li>\n</ol>\n<p>现在我可以继续了，但是我认为你已经找到关键点了。我们在通过一个假设来缩小我们的讨论范围：当所有的代码以及主机环境都在一种预期的安全的状态中时，你的程序会如何执行？<br>这并不是说我们使用Promise所做的事情对上面这些问题没有帮助。这仅仅是由于这些问题在一个更高的层面上—这些问题远离了编写API和模式，这些问题留给专家来讨论。  </p>\n<h3 id=\"在Promise状态下的可靠性\"><a href=\"#在Promise状态下的可靠性\" class=\"headerlink\" title=\"在Promise状态下的可靠性\"></a>在Promise状态下的可靠性</h3><p>我们看看下面这个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPromise = &#123;</div><div class=\"line\">    state: &#123;</div><div class=\"line\">        status: <span class=\"number\">1</span>,</div><div class=\"line\">        value: <span class=\"string\">\"Hello World\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success,failure</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// implement something like a thenable's behavior</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>我可以新建一个像这样的对象，然后在平时使用它并且说我在用promises。实际是，我可以再完善一下使它可以通过整个<a href=\"https://github.com/promises-aplus/promises-tests\">Promises/A+ 测试网站</a>的测试。  </p>\n<h3 id=\"但是我真的是使用了Promises吗？\"><a href=\"#但是我真的是使用了Promises吗？\" class=\"headerlink\" title=\"但是我真的是使用了Promises吗？\"></a>但是我真的是使用了Promises吗？</h3><p>你如何回答这个问题比你意识到的更重要。在很多开发者社区中很多人的回答是，是的。<br>我很确定的说，不是！<br>为什么？如果你通过了promises测试网站，那么它就是一个promise 了，不是吗？而且，它在所有情况下都按照规范来执行，不是吗？</p>\n<h3 id=\"不是\"><a href=\"#不是\" class=\"headerlink\" title=\"不是\"></a>不是</h3><p>promises的精髓远不是规范说的那么简单，是<strong>可靠性</strong>。<br>可靠性是一个promise就是一个状态(状态会从”pending”转变成”resolved”或者”rejected”其中一个)的容器，这些状态会附带一个结果值(成功信息或者错误信息)。可靠性是一旦一个promise的状态变为”resolved”或者”rejected”，那么就不能改变也不会改变。可靠性就是完成的promise是不可变的。<br>但是promises的精髓还有一些更深层次的东西，这些是无法通过阅读规范看出来的：改变一个promise状态和设置它的完成值的能力只存在于原始的promise的实现。也就是说这个能力的实现掌握在开发者手里。<br>规范的早期版本中，把resolve/reject的功能分离出来放在一个对象中，叫做<strong>Deferred</strong>.<br>把这想成一个对象对：在创建的时候，我们创建一个promise和一个deferred，deferred可以resolve这个promise。<br>重要的是，这两个可以被分开，一部分代码可以resolve/reject一个promise而另外一部分只能监听这个变化然后做出回应。<br>规范的后续版本中简化了promises，通过删除deferred对象，取而代之的是简单的暴露出原来属于deferred的<code>resolve()</code>和<code>reject()</code>方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// I have `resolve()` and `reject()` from the</span></div><div class=\"line\">    <span class=\"comment\">// hidden `deferred`, and I **alone** control</span></div><div class=\"line\">    <span class=\"comment\">// the state of the promise.</span></div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// now, I can pass around `p` freely, and it can't</span></div><div class=\"line\"><span class=\"comment\">// be changed by anyone else but the creator.</span></div></pre></td></tr></table></figure></p>\n<p>看看之前的那个<code>myPromise</code>对象。你注意到了什么吗？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myPromise = &#123;</div><div class=\"line\">    state: &#123;</div><div class=\"line\">        status: <span class=\"number\">1</span>,</div><div class=\"line\">        value: <span class=\"string\">\"Hello World\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success,failure</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// implement something like a thenable's behavior</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>如果你到处传递<code>myPromise</code>，然后不管恶意代码还是意外的代码都可以改变<code>myPromise.state.status</code>或者<code>myPromise.state.value</code>属性，我们是不是开了一个很大的后门，失去了Promises的可靠性。<br>当然，答案是肯定的。把状态暴露给方法使得这不是一个真正的promise。因为现在promise的保证已经完全不可靠了。<br>如果你从一个第三方库中得到了一个这样的对象，你不会信任它的，不是吗？更重要的，如果你把这个对象传递给其他第三方库，你肯定不会相信只有原始的创建者才能修改它，不是吗？<br>当然不会相信。那就太天真了。<br>你看，使用promises是基于可靠性的。然后可靠性是基于promise的状态是与外部影响隔离的，只有创建者能改变。注意到我并没有说状态必须是私有的，只要它不会被外界改变就可以。<br>如果没有promise的对象不会被除了创建者改变的可靠性，那么promise就几乎失去了它的意义。</p>\n<h2 id=\"错误的可靠性？\"><a href=\"#错误的可靠性？\" class=\"headerlink\" title=\"错误的可靠性？\"></a>错误的可靠性？</h2><p>注意，这正是事情变得模糊的地方，是不可忽视的事实。<br>大多数为了在旧的JS环境下能够支持promise的polyfill会把状态通过可变的方式暴露出来。<br>Ouch!!!<br>在这方面，我的ES6 Promise polyfill”<a href=\"http://github.com/getify/native-promise-only\">Native Promise Only</a>“没有把state暴露出来。据我所知，这是唯一一个没有把promise状态暴露出来的polyfill。<br>为什么？因为我不仅仅关心Promise规范，我更在意Promises的精髓。</p>\n<h3 id=\"Tradeoffs\"><a href=\"#Tradeoffs\" class=\"headerlink\" title=\"Tradeoffs\"></a>Tradeoffs</h3><p>但是究竟为什么所有这些高度可信的Promise polyfill和库会忘了promise中这么重要的东西呢？<br>因为在原生Javascript有一些限制，这是一些内置机制不需要遵循的。<br>简单的说，即将到来的ES6标准指出<code>Promise</code>是一个“class”，所以作为一个“class”，promise必须可以被子类化。<br>换句话说，你必须可以创建一个<code>class CustomPromise extends Promise{..}</code>子类，在这个基础上你可以扩展内置promises的功能。<br>例如，你需要一个自定义的promise，这个promise可以处理超过一条消息。至少理论上，实现这个只需要你继承内置<code>Promise</code>类然后扩展它。<br>鉴于我对JS中类概念的偏见，我认为<code>Promise</code>子类化是一种没有意义的闹剧或者转移注意力的幌子。我努力让自己想出一些Promise子类化的好处，可是我实在想不出来。<br>而且，如果要继续保持一些特性来遵循<a href=\"https://github.com/promises-aplus/promises-tests\">Promises/A+ Test Suite</a>,这些子类的实现很可能变得相当笨拙。<br>最后，我对于promise的子类化没有任何好感。</p>\n<h3 id=\"怎么办呢！？\"><a href=\"#怎么办呢！？\" class=\"headerlink\" title=\"怎么办呢！？\"></a>怎么办呢！？</h3><p>不涉及太多JS的细节，把<code>Promise</code>表达成一个可以被继承的”class”需要你把实例方法加入到<code>Promise.prototype</code>对象中。<br>但是当你这么做的时候，你就把<code>then..()</code>和<code>catch(..)</code>变成共享方法，所有<code>Promise</code>实例都可以访问到，然后这些方法只能通过this访问每个实例上的公共属性。<br>换句话说，如果要使得promise可以子类化，只使用简单的JS是不可能的，必须使用闭包或其他方法来为每个实例创建私有的promise状态。<br>我知道现在你已经开始想各种你见过的可以实现闭包私有和<code>this</code>公共继承混合的方法。<br>我可以写一整本书来说明为什么这样行不通，但是我这里就简单的说下：不要管你所听到的，只使用ES5中可以使用的方法，你是不可能创建私有状态同时又可以有效子类化的promise。<br>这两个概念在ES5以下是互相排斥的。</p>\n<h3 id=\"Promise-削弱\"><a href=\"#Promise-削弱\" class=\"headerlink\" title=\"Promise 削弱\"></a>Promise 削弱</h3><p>另一个ES6中的新特性是<strong>WeakMap</strong>。简单的说，一个<code>WeakMap</code>实例能够使用对象引用作为键，然后和一个数据相联系，而不需要真正把数据存储在对象上。<br>这正是我们需要的，不是吗？我们需要一个我们公共的<code>then(..)</code>和<code>catch(..)</code>可以访问的<code>WeakMap</code>，无论<code>this</code>绑定的是什么，它们都可以根据<code>this</code>访问到并且查找对应的被保护的状态值。这个特权<code>Promise</code>方法可以取得这个内部状态，但是外部不能。<br>不过，事情并没有这么美好：</p>\n<ol>\n<li><code>WeakMap</code>根本不可能通过原生JS用性能可接受的方法实现。</li>\n<li>就算我们在ES5及以下可以使用<code>WeakMap</code>，它还是没有完全解决子类化的问题，因为你必须隐藏<code>WeakMap</code>实例使得只有你的<code>Promise</code>方法可以访问，但是这样的话另一个<code>Promise</code>的子类也能访问到。<br>假设我们可以解决第二个问题—其实我们不能，就做一个假设。那么<code>WeakMap</code>的实现应该是什么样的呢？<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">WeakMap</span> = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> objs = [], data = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findObj</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;objs.length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (objs[i] === obj) <span class=\"keyword\">return</span> i;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// not found, add it onto the end</span></div><div class=\"line\">        objs.push( obj );</div><div class=\"line\">        data.push( <span class=\"literal\">undefined</span> );</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> i;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__set</span>(<span class=\"params\">key,value</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> idx = findObj( key );</div><div class=\"line\">        data[idx] = value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> idx = findObj( key );</div><div class=\"line\">        <span class=\"keyword\">return</span> data[idx];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"string\">\"set\"</span>: __set,</div><div class=\"line\">        <span class=\"string\">\"get\"</span>: __get</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myMap = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> myObj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">myMap.set( myObj, <span class=\"string\">\"foo\"</span> );</div><div class=\"line\"></div><div class=\"line\">myObj.foo; <span class=\"comment\">// undefined</span></div><div class=\"line\"></div><div class=\"line\">myMap.get( myObj ); <span class=\"comment\">// \"foo\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>OK，基本的思想就是我们维护两个数组(<code>objs</code>，<code>data</code>)，通过下标相对应。在第一个数组中保存对象引用，在另一个保存数据。<br>漂亮，不是吗？<br>看看性能怎么样吧。看看<code>findObj(..)</code>，它要循环整个数组来找到相应的数据。引用越多性能就越低。<br>但是这还不是最坏的地方。<code>WeakMap</code>之所以叫做“Weak”是由于垃圾回收行为。在我们<code>WeakMap</code>的实现中，会保存每个对象的引用，这就意味着就算程序已经没有对于对象的引用了，这些对象还是不能被回收。但是真正的<code>WeakMap</code>就是这么“weak”，所以你不需要做任何事情来优化垃圾回收。<br>好的，<code>WeakMap</code>是一个错误的希望。它并没有解决ES6中的问题并且使得事情在ES5及以下变得更糟。</p>\n<h3 id=\"保护state还是子类化？\"><a href=\"#保护state还是子类化？\" class=\"headerlink\" title=\"保护state还是子类化？\"></a>保护state还是子类化？</h3><p>这是个问题！<br>我真的希望我能创建一个忠实的<code>Peomise</code>polyfill给ES5及以下。<br>但是必须做一个选择，在这里出现了一个分歧。要不就放弃子类化的功能，要不就放弃作为promise的可靠性。<br>那么我们该怎么做呢？</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我会做另一个promise polyfill，这个polyfill选择保留子类化的能力，以可变的state为代价。<br>我已经选择了抛弃子类化使得我的promise polyfill可以很可靠。<br>就像我之前说的，我认为promise的子类化最终会被证明是一个华而不实的东西。我不会牺牲promise的可靠性来顺从子类化。<br>很显然，其他人对于这个问题会有不同的看法。但是我只想让你问问你自己：一个不可靠的promise可以用来干嘛？什么代码能真正拯救你？什么代码可以做得更好？<br>现有的Promise polyfill和库的问题比不可变的state vs 子类化更深层面。在第四部分：扩展问题中，我会指出许多现有polyfill和库中的问题。</p>\n<h2 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注\"></a>译者注</h2><p>这篇文章不大好翻译也不大好理解，所以在这里总结下我的理解，希望对大家的理解有所帮助，如果大家有什么不同的看法，欢迎讨论。<br>这篇文章围绕Promise的可靠性展开，Promise的可靠性是它的精髓所在。要实现Promise的可靠性最关键的就是要保证Promise的状态值state不能被外部改变，这样才能保证状态值的不可逆。<br>而现在几乎所有的Promise库都忽略了这个关键，而它们会忽略这个关键点一个很重要的原因就是在ES6的规范中，Promise被规定为一个类，也就是说Promise是可以被子类化的。然而在ES5及以下的规范中，在没有<code>private</code>关键字的情况下，是不可能实现可子类化同时又能保证Promise的状态值不会被外部改变（真的吗？我保持怀疑态度）。而在ES6中出现的新对象<code>WeakMap</code>确实给实现Promise带来了新的思路，可以在ES5及以下环境中实现<code>WeakMap</code>，利用它的特点可以实现符合要求的Promise。具体实现思路就是：定义一个全局私有的<code>WeakMap</code>，这个<code>WeakMap</code>只有公共的方法<code>then()</code>和<code>catch()</code>可以访问到，在这个<code>WeakMap</code>中以每个Promise实例的this作为键，状态值state作为值进行存储。这样在每个Promise实例中都可以通过自己的this对象查找自己的状态值，而不能查找到其他Promise实例的状态值，这样就实现了状态值的外部不可修改。但是<code>WeakMap</code>有一个很大的问题就是性能比较低并且不利于垃圾回收，所以这并不是一个理想的解决方案。<br>综上两个原因就导致了现在大部分库暴露state状态值，它们为了实现子类化选择了暴露状态值，丢弃了Promise的精髓所在。<br>而在作者看来子类化对于Promise的重要性远远比不上Promise的可靠性，所以它选择了放弃子类化而保证Promise的可靠性。事实确实是这样，如果不能保证Promise的可靠性，那么就会出现<a href=\"/#/blog/2014/06/23/understand-promise-1/\">第一篇</a>中出现的那个不可靠的情况，这样Promise除了改善了回调金字塔的问题，跟普通的回调也就没有什么区别了，也就失去了它更重要的意义。</p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-3/\">http://blog.getify.com/promises-part-3/</a></p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>"},{"title":"Github装逼指南——Travis CI 和 Codecov","date":"2016-02-04T06:47:22.000Z","_content":"好久没写博客了，趁着年前空闲的时间来一篇轻松点的东西。\n最近工作中积累了一些Angular组件打算整一整把他们开源了，既然要开源那么代码可靠性就很重要了，单测不能少，为了保证每次提交的代码都能很好的运行，持续集成不能少。之前看到很多开源项目介绍中都有一些单测覆盖率和build结果的图标，就像这样：\n\n![clipboard.png](https://segmentfault.com/img/bVsGKF)\n<!-- more -->\n觉得挺酷的。打算在自己的开源组件中也整一套。\n经过Google决定使用TravisCI来进行持续集成，Codecov来统计单测覆盖率。\n## Travis CI\nTravis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。\n1. 使用Github账号登录[Travis CI](https://travis-ci.org/)；\n2. 登录之后会自动同步Github项目，选择需要使用Travis CI的项目\n3. 在项目的根目录新增`.travis.yml`文件，内容如下：\n\n```yml\n#指定运行环境\nlanguage: node_js\n#指定nodejs版本，可以指定多个\nnode_js:\n  - 0.12.5\n\n#运行的脚本命令\nscript:\n  - npm run ci\n\n#指定分支，只有指定的分支提交时才会运行脚本\nbranches:\n  only:\n    - master\n```\n\n更多语法请看[这里](https://docs.travis-ci.com/)。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行`.travis.yml`里面的`script`。自动进行编译以及运行单测。\n由于Travis CI每次build之前都会运行`npm install`安装项目依赖的npm包，所以在提交代码的时候要保证把所有依赖的包都已经在`package.json`中声明了，否则build就会失败。\n## Codecov\nCodecov是一个开源的测试结果展示平台，将测试结果可视化。Github上许多开源项目都使用了Codecov来展示单测结果。\nCodecov跟Travis CI一样都支持Github账号登录，同样会同步Github中的项目。在nodejs环境下使用Codecov需要安装对于的npm包，运行下面这个命令进行安装：\n```shell\nnpm install codecov --save-dev\n```\n这个包的作用是将我们运行单测产生的结果文件上传到Codecov上进行可视化展示。同时codecov支持的结果文件类型为`cobertura`。所以需要保证单测执行的结果文件的类型为`cobertura`。\n前端项目进行单元测试推进`karma` + 'jasmine'的组合。这两个具体是什么东西大家Google一下就知道。使用`karma`可以通过简单的配置来运行单测。下面是我一个项目中的配置文件，供大家参考：\n```javascript\n// Karma configuration\n// Generated on Mon Feb 01 2016 21:34:22 GMT+0800 (中国标准时间)\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    // 使用的测试框架jasmine, requirejs支持模块化加载\n    frameworks: ['jasmine', 'requirejs'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n        // karma中用到进行requirejs配置的文件\n        'test/test-main.js',\n        // 测试中需要用到的文件，includeed设为false表示在页面加载的时候不会加载相应的js文件，也就是可以通过requirejs进行异步加载\n        {pattern: 'node_modules/jquery/dist/jquery.min.js', included: false},\n        {pattern: 'node_modules/angular/angular.min.js', included: false},\n        {pattern: 'node_modules/angular-mocks/angular-mocks.js', included: false},\n        {pattern: 'src/bg-single-selector.js', included: false},\n        {pattern: 'test/selector.spec.js', included: false}\n    ],\n\n\n    // list of files to exclude\n    exclude: [\n    ],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 针对bg-single-selector.js生成单测覆盖率结果\n    preprocessors: {\n        'src/bg-single-selector.js': 'coverage'\n    },\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    // 测试结果的几种输出方式\n    reporters: ['progress', 'coverage', 'verbose'],\n    // 测试结果报告的类型\n    coverageReporter:{\n        reporters: [{\n            type:'text-summary'\n        }, {\n            type: 'html',\n            dir: 'test/coverage'\n        }, {\n            // 这就是Codecov支持的文件类型\n            type: 'cobertura',\n            subdir: '.',\n            dir: 'test/coverage'\n        }]\n    },\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['PhantomJS'],\n    // 运行测试依赖的插件\n    plugins: [\n        'karma-jasmine',\n        'karma-coverage',\n        'karma-verbose-reporter',\n        'karma-phantomjs-launcher',\n        'karma-requirejs'\n    ],\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: true\n  })\n}\n\n```\n通过karma进行单元测试，将命令写到`.travis.yml`中就可以在每次build的时候运行单测，同时运行`codecov [cobertura-coverage.xml路径]`就会把单测结果上传到Codecov。在本地运行codecov会失败，需要将这个过程加入到Travis CI的build脚本中，才能成功上传。因为在本地运行就会被作为私有项目，对于私有项目在上传结果时需要加上Codecov提供的token。\n## 在github中加入图标\n到了最后一步，Travis CI和Codecov都提供图标链接来展示结果。我们只需要将图标链接加入到项目的README中就可以看到结果了。\n对于Travis CI来说，点击下图中的图标：\n\n![clipboard.png](https://segmentfault.com/img/bVsGOi)\n就会弹出图标的地址。\n对于Codecov来说，打开项目的设置列表就会看到，如下：\n\n![clipboard.png](https://segmentfault.com/img/bVsGOj)\n\n最后只需要将对应的链接加到README文件中就可以了。下面是最后的效果：\n\n![clipboard.png](https://segmentfault.com/img/bVsGOq)\n\n是不是很赞！\n项目地址：[BGSingleSelector](https://github.com/GaojingComponent/BGSingleSelector)，欢迎大家试用提意见，同时不要吝啬Star。\n\n最后的最后，做一个广告。[百度告警平台](http://gaojing.baidu.com/#/)。这是一个智能的告警平台，提供实时精确的告警送达，故障的协作处理能力。再也不需要担心遗漏监控报警，解放运维人力。\n","source":"_posts/use-travis-ci-and-codecov-with-github.md","raw":"title: Github装逼指南——Travis CI 和 Codecov\ndate: 2016-02-04 14:47:22\ntags: ['github', 'ci']\n---\n好久没写博客了，趁着年前空闲的时间来一篇轻松点的东西。\n最近工作中积累了一些Angular组件打算整一整把他们开源了，既然要开源那么代码可靠性就很重要了，单测不能少，为了保证每次提交的代码都能很好的运行，持续集成不能少。之前看到很多开源项目介绍中都有一些单测覆盖率和build结果的图标，就像这样：\n\n![clipboard.png](https://segmentfault.com/img/bVsGKF)\n<!-- more -->\n觉得挺酷的。打算在自己的开源组件中也整一套。\n经过Google决定使用TravisCI来进行持续集成，Codecov来统计单测覆盖率。\n## Travis CI\nTravis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。\n1. 使用Github账号登录[Travis CI](https://travis-ci.org/)；\n2. 登录之后会自动同步Github项目，选择需要使用Travis CI的项目\n3. 在项目的根目录新增`.travis.yml`文件，内容如下：\n\n```yml\n#指定运行环境\nlanguage: node_js\n#指定nodejs版本，可以指定多个\nnode_js:\n  - 0.12.5\n\n#运行的脚本命令\nscript:\n  - npm run ci\n\n#指定分支，只有指定的分支提交时才会运行脚本\nbranches:\n  only:\n    - master\n```\n\n更多语法请看[这里](https://docs.travis-ci.com/)。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行`.travis.yml`里面的`script`。自动进行编译以及运行单测。\n由于Travis CI每次build之前都会运行`npm install`安装项目依赖的npm包，所以在提交代码的时候要保证把所有依赖的包都已经在`package.json`中声明了，否则build就会失败。\n## Codecov\nCodecov是一个开源的测试结果展示平台，将测试结果可视化。Github上许多开源项目都使用了Codecov来展示单测结果。\nCodecov跟Travis CI一样都支持Github账号登录，同样会同步Github中的项目。在nodejs环境下使用Codecov需要安装对于的npm包，运行下面这个命令进行安装：\n```shell\nnpm install codecov --save-dev\n```\n这个包的作用是将我们运行单测产生的结果文件上传到Codecov上进行可视化展示。同时codecov支持的结果文件类型为`cobertura`。所以需要保证单测执行的结果文件的类型为`cobertura`。\n前端项目进行单元测试推进`karma` + 'jasmine'的组合。这两个具体是什么东西大家Google一下就知道。使用`karma`可以通过简单的配置来运行单测。下面是我一个项目中的配置文件，供大家参考：\n```javascript\n// Karma configuration\n// Generated on Mon Feb 01 2016 21:34:22 GMT+0800 (中国标准时间)\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    // 使用的测试框架jasmine, requirejs支持模块化加载\n    frameworks: ['jasmine', 'requirejs'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n        // karma中用到进行requirejs配置的文件\n        'test/test-main.js',\n        // 测试中需要用到的文件，includeed设为false表示在页面加载的时候不会加载相应的js文件，也就是可以通过requirejs进行异步加载\n        {pattern: 'node_modules/jquery/dist/jquery.min.js', included: false},\n        {pattern: 'node_modules/angular/angular.min.js', included: false},\n        {pattern: 'node_modules/angular-mocks/angular-mocks.js', included: false},\n        {pattern: 'src/bg-single-selector.js', included: false},\n        {pattern: 'test/selector.spec.js', included: false}\n    ],\n\n\n    // list of files to exclude\n    exclude: [\n    ],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    // 针对bg-single-selector.js生成单测覆盖率结果\n    preprocessors: {\n        'src/bg-single-selector.js': 'coverage'\n    },\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    // 测试结果的几种输出方式\n    reporters: ['progress', 'coverage', 'verbose'],\n    // 测试结果报告的类型\n    coverageReporter:{\n        reporters: [{\n            type:'text-summary'\n        }, {\n            type: 'html',\n            dir: 'test/coverage'\n        }, {\n            // 这就是Codecov支持的文件类型\n            type: 'cobertura',\n            subdir: '.',\n            dir: 'test/coverage'\n        }]\n    },\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: ['PhantomJS'],\n    // 运行测试依赖的插件\n    plugins: [\n        'karma-jasmine',\n        'karma-coverage',\n        'karma-verbose-reporter',\n        'karma-phantomjs-launcher',\n        'karma-requirejs'\n    ],\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: true\n  })\n}\n\n```\n通过karma进行单元测试，将命令写到`.travis.yml`中就可以在每次build的时候运行单测，同时运行`codecov [cobertura-coverage.xml路径]`就会把单测结果上传到Codecov。在本地运行codecov会失败，需要将这个过程加入到Travis CI的build脚本中，才能成功上传。因为在本地运行就会被作为私有项目，对于私有项目在上传结果时需要加上Codecov提供的token。\n## 在github中加入图标\n到了最后一步，Travis CI和Codecov都提供图标链接来展示结果。我们只需要将图标链接加入到项目的README中就可以看到结果了。\n对于Travis CI来说，点击下图中的图标：\n\n![clipboard.png](https://segmentfault.com/img/bVsGOi)\n就会弹出图标的地址。\n对于Codecov来说，打开项目的设置列表就会看到，如下：\n\n![clipboard.png](https://segmentfault.com/img/bVsGOj)\n\n最后只需要将对应的链接加到README文件中就可以了。下面是最后的效果：\n\n![clipboard.png](https://segmentfault.com/img/bVsGOq)\n\n是不是很赞！\n项目地址：[BGSingleSelector](https://github.com/GaojingComponent/BGSingleSelector)，欢迎大家试用提意见，同时不要吝啬Star。\n\n最后的最后，做一个广告。[百度告警平台](http://gaojing.baidu.com/#/)。这是一个智能的告警平台，提供实时精确的告警送达，故障的协作处理能力。再也不需要担心遗漏监控报警，解放运维人力。\n","slug":"use-travis-ci-and-codecov-with-github","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvll001p0pov2mzfottt","content":"<p>好久没写博客了，趁着年前空闲的时间来一篇轻松点的东西。<br>最近工作中积累了一些Angular组件打算整一整把他们开源了，既然要开源那么代码可靠性就很重要了，单测不能少，为了保证每次提交的代码都能很好的运行，持续集成不能少。之前看到很多开源项目介绍中都有一些单测覆盖率和build结果的图标，就像这样：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGKF\" alt=\"clipboard.png\"><br><a id=\"more\"></a><br>觉得挺酷的。打算在自己的开源组件中也整一套。<br>经过Google决定使用TravisCI来进行持续集成，Codecov来统计单测覆盖率。</p>\n<h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p>Travis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。</p>\n<ol>\n<li>使用Github账号登录<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">Travis CI</a>；</li>\n<li>登录之后会自动同步Github项目，选择需要使用Travis CI的项目</li>\n<li>在项目的根目录新增<code>.travis.yml</code>文件，内容如下：</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#指定运行环境</span></div><div class=\"line\"><span class=\"attr\">language:</span> node_js</div><div class=\"line\"><span class=\"comment\">#指定nodejs版本，可以指定多个</span></div><div class=\"line\"><span class=\"attr\">node_js:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"number\">0.12</span><span class=\"number\">.5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#运行的脚本命令</span></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm run ci</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#指定分支，只有指定的分支提交时才会运行脚本</span></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> master</div></pre></td></tr></table></figure>\n<p>更多语法请看<a href=\"https://docs.travis-ci.com/\" target=\"_blank\" rel=\"external\">这里</a>。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行<code>.travis.yml</code>里面的<code>script</code>。自动进行编译以及运行单测。<br>由于Travis CI每次build之前都会运行<code>npm install</code>安装项目依赖的npm包，所以在提交代码的时候要保证把所有依赖的包都已经在<code>package.json</code>中声明了，否则build就会失败。</p>\n<h2 id=\"Codecov\"><a href=\"#Codecov\" class=\"headerlink\" title=\"Codecov\"></a>Codecov</h2><p>Codecov是一个开源的测试结果展示平台，将测试结果可视化。Github上许多开源项目都使用了Codecov来展示单测结果。<br>Codecov跟Travis CI一样都支持Github账号登录，同样会同步Github中的项目。在nodejs环境下使用Codecov需要安装对于的npm包，运行下面这个命令进行安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install codecov --save-dev</div></pre></td></tr></table></figure></p>\n<p>这个包的作用是将我们运行单测产生的结果文件上传到Codecov上进行可视化展示。同时codecov支持的结果文件类型为<code>cobertura</code>。所以需要保证单测执行的结果文件的类型为<code>cobertura</code>。<br>前端项目进行单元测试推进<code>karma</code> + ‘jasmine’的组合。这两个具体是什么东西大家Google一下就知道。使用<code>karma</code>可以通过简单的配置来运行单测。下面是我一个项目中的配置文件，供大家参考：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Karma configuration</span></div><div class=\"line\"><span class=\"comment\">// Generated on Mon Feb 01 2016 21:34:22 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">    basePath: <span class=\"string\">''</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">    <span class=\"comment\">// 使用的测试框架jasmine, requirejs支持模块化加载</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'jasmine'</span>, <span class=\"string\">'requirejs'</span>],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">    files: [</div><div class=\"line\">        <span class=\"comment\">// karma中用到进行requirejs配置的文件</span></div><div class=\"line\">        <span class=\"string\">'test/test-main.js'</span>,</div><div class=\"line\">        <span class=\"comment\">// 测试中需要用到的文件，includeed设为false表示在页面加载的时候不会加载相应的js文件，也就是可以通过requirejs进行异步加载</span></div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/jquery/dist/jquery.min.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/angular/angular.min.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/angular-mocks/angular-mocks.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'src/bg-single-selector.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'test/selector.spec.js'</span>, included: <span class=\"literal\">false</span>&#125;</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">    <span class=\"comment\">// 针对bg-single-selector.js生成单测覆盖率结果</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">        <span class=\"string\">'src/bg-single-selector.js'</span>: <span class=\"string\">'coverage'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">    <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">    <span class=\"comment\">// 测试结果的几种输出方式</span></div><div class=\"line\">    reporters: [<span class=\"string\">'progress'</span>, <span class=\"string\">'coverage'</span>, <span class=\"string\">'verbose'</span>],</div><div class=\"line\">    <span class=\"comment\">// 测试结果报告的类型</span></div><div class=\"line\">    coverageReporter:&#123;</div><div class=\"line\">        reporters: [&#123;</div><div class=\"line\">            type:<span class=\"string\">'text-summary'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            type: <span class=\"string\">'html'</span>,</div><div class=\"line\">            dir: <span class=\"string\">'test/coverage'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 这就是Codecov支持的文件类型</span></div><div class=\"line\">            type: <span class=\"string\">'cobertura'</span>,</div><div class=\"line\">            subdir: <span class=\"string\">'.'</span>,</div><div class=\"line\">            dir: <span class=\"string\">'test/coverage'</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// web server port</span></div><div class=\"line\">    port: <span class=\"number\">9876</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// level of logging</span></div><div class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// start these browsers</span></div><div class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>],</div><div class=\"line\">    <span class=\"comment\">// 运行测试依赖的插件</span></div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"string\">'karma-jasmine'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-coverage'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-verbose-reporter'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-requirejs'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">    singleRun: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过karma进行单元测试，将命令写到<code>.travis.yml</code>中就可以在每次build的时候运行单测，同时运行<code>codecov [cobertura-coverage.xml路径]</code>就会把单测结果上传到Codecov。在本地运行codecov会失败，需要将这个过程加入到Travis CI的build脚本中，才能成功上传。因为在本地运行就会被作为私有项目，对于私有项目在上传结果时需要加上Codecov提供的token。</p>\n<h2 id=\"在github中加入图标\"><a href=\"#在github中加入图标\" class=\"headerlink\" title=\"在github中加入图标\"></a>在github中加入图标</h2><p>到了最后一步，Travis CI和Codecov都提供图标链接来展示结果。我们只需要将图标链接加入到项目的README中就可以看到结果了。<br>对于Travis CI来说，点击下图中的图标：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOi\" alt=\"clipboard.png\"><br>就会弹出图标的地址。<br>对于Codecov来说，打开项目的设置列表就会看到，如下：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOj\" alt=\"clipboard.png\"></p>\n<p>最后只需要将对应的链接加到README文件中就可以了。下面是最后的效果：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOq\" alt=\"clipboard.png\"></p>\n<p>是不是很赞！<br>项目地址：<a href=\"https://github.com/GaojingComponent/BGSingleSelector\" target=\"_blank\" rel=\"external\">BGSingleSelector</a>，欢迎大家试用提意见，同时不要吝啬Star。</p>\n<p>最后的最后，做一个广告。<a href=\"http://gaojing.baidu.com/#/\" target=\"_blank\" rel=\"external\">百度告警平台</a>。这是一个智能的告警平台，提供实时精确的告警送达，故障的协作处理能力。再也不需要担心遗漏监控报警，解放运维人力。</p>\n","excerpt":"<p>好久没写博客了，趁着年前空闲的时间来一篇轻松点的东西。<br>最近工作中积累了一些Angular组件打算整一整把他们开源了，既然要开源那么代码可靠性就很重要了，单测不能少，为了保证每次提交的代码都能很好的运行，持续集成不能少。之前看到很多开源项目介绍中都有一些单测覆盖率和build结果的图标，就像这样：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGKF\" alt=\"clipboard.png\"><br>","more":"<br>觉得挺酷的。打算在自己的开源组件中也整一套。<br>经过Google决定使用TravisCI来进行持续集成，Codecov来统计单测覆盖率。</p>\n<h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p>Travis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。</p>\n<ol>\n<li>使用Github账号登录<a href=\"https://travis-ci.org/\">Travis CI</a>；</li>\n<li>登录之后会自动同步Github项目，选择需要使用Travis CI的项目</li>\n<li>在项目的根目录新增<code>.travis.yml</code>文件，内容如下：</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#指定运行环境</span></div><div class=\"line\"><span class=\"attr\">language:</span> node_js</div><div class=\"line\"><span class=\"comment\">#指定nodejs版本，可以指定多个</span></div><div class=\"line\"><span class=\"attr\">node_js:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"number\">0.12</span><span class=\"number\">.5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#运行的脚本命令</span></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm run ci</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#指定分支，只有指定的分支提交时才会运行脚本</span></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> master</div></pre></td></tr></table></figure>\n<p>更多语法请看<a href=\"https://docs.travis-ci.com/\">这里</a>。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行<code>.travis.yml</code>里面的<code>script</code>。自动进行编译以及运行单测。<br>由于Travis CI每次build之前都会运行<code>npm install</code>安装项目依赖的npm包，所以在提交代码的时候要保证把所有依赖的包都已经在<code>package.json</code>中声明了，否则build就会失败。</p>\n<h2 id=\"Codecov\"><a href=\"#Codecov\" class=\"headerlink\" title=\"Codecov\"></a>Codecov</h2><p>Codecov是一个开源的测试结果展示平台，将测试结果可视化。Github上许多开源项目都使用了Codecov来展示单测结果。<br>Codecov跟Travis CI一样都支持Github账号登录，同样会同步Github中的项目。在nodejs环境下使用Codecov需要安装对于的npm包，运行下面这个命令进行安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install codecov --save-dev</div></pre></td></tr></table></figure></p>\n<p>这个包的作用是将我们运行单测产生的结果文件上传到Codecov上进行可视化展示。同时codecov支持的结果文件类型为<code>cobertura</code>。所以需要保证单测执行的结果文件的类型为<code>cobertura</code>。<br>前端项目进行单元测试推进<code>karma</code> + ‘jasmine’的组合。这两个具体是什么东西大家Google一下就知道。使用<code>karma</code>可以通过简单的配置来运行单测。下面是我一个项目中的配置文件，供大家参考：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Karma configuration</span></div><div class=\"line\"><span class=\"comment\">// Generated on Mon Feb 01 2016 21:34:22 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">    basePath: <span class=\"string\">''</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">    <span class=\"comment\">// 使用的测试框架jasmine, requirejs支持模块化加载</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'jasmine'</span>, <span class=\"string\">'requirejs'</span>],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">    files: [</div><div class=\"line\">        <span class=\"comment\">// karma中用到进行requirejs配置的文件</span></div><div class=\"line\">        <span class=\"string\">'test/test-main.js'</span>,</div><div class=\"line\">        <span class=\"comment\">// 测试中需要用到的文件，includeed设为false表示在页面加载的时候不会加载相应的js文件，也就是可以通过requirejs进行异步加载</span></div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/jquery/dist/jquery.min.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/angular/angular.min.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/angular-mocks/angular-mocks.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'src/bg-single-selector.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'test/selector.spec.js'</span>, included: <span class=\"literal\">false</span>&#125;</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">    <span class=\"comment\">// 针对bg-single-selector.js生成单测覆盖率结果</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">        <span class=\"string\">'src/bg-single-selector.js'</span>: <span class=\"string\">'coverage'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">    <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">    <span class=\"comment\">// 测试结果的几种输出方式</span></div><div class=\"line\">    reporters: [<span class=\"string\">'progress'</span>, <span class=\"string\">'coverage'</span>, <span class=\"string\">'verbose'</span>],</div><div class=\"line\">    <span class=\"comment\">// 测试结果报告的类型</span></div><div class=\"line\">    coverageReporter:&#123;</div><div class=\"line\">        reporters: [&#123;</div><div class=\"line\">            type:<span class=\"string\">'text-summary'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            type: <span class=\"string\">'html'</span>,</div><div class=\"line\">            dir: <span class=\"string\">'test/coverage'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 这就是Codecov支持的文件类型</span></div><div class=\"line\">            type: <span class=\"string\">'cobertura'</span>,</div><div class=\"line\">            subdir: <span class=\"string\">'.'</span>,</div><div class=\"line\">            dir: <span class=\"string\">'test/coverage'</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// web server port</span></div><div class=\"line\">    port: <span class=\"number\">9876</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// level of logging</span></div><div class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// start these browsers</span></div><div class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>],</div><div class=\"line\">    <span class=\"comment\">// 运行测试依赖的插件</span></div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"string\">'karma-jasmine'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-coverage'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-verbose-reporter'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-requirejs'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">    singleRun: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过karma进行单元测试，将命令写到<code>.travis.yml</code>中就可以在每次build的时候运行单测，同时运行<code>codecov [cobertura-coverage.xml路径]</code>就会把单测结果上传到Codecov。在本地运行codecov会失败，需要将这个过程加入到Travis CI的build脚本中，才能成功上传。因为在本地运行就会被作为私有项目，对于私有项目在上传结果时需要加上Codecov提供的token。</p>\n<h2 id=\"在github中加入图标\"><a href=\"#在github中加入图标\" class=\"headerlink\" title=\"在github中加入图标\"></a>在github中加入图标</h2><p>到了最后一步，Travis CI和Codecov都提供图标链接来展示结果。我们只需要将图标链接加入到项目的README中就可以看到结果了。<br>对于Travis CI来说，点击下图中的图标：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOi\" alt=\"clipboard.png\"><br>就会弹出图标的地址。<br>对于Codecov来说，打开项目的设置列表就会看到，如下：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOj\" alt=\"clipboard.png\"></p>\n<p>最后只需要将对应的链接加到README文件中就可以了。下面是最后的效果：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOq\" alt=\"clipboard.png\"></p>\n<p>是不是很赞！<br>项目地址：<a href=\"https://github.com/GaojingComponent/BGSingleSelector\">BGSingleSelector</a>，欢迎大家试用提意见，同时不要吝啬Star。</p>\n<p>最后的最后，做一个广告。<a href=\"http://gaojing.baidu.com/#/\">百度告警平台</a>。这是一个智能的告警平台，提供实时精确的告警送达，故障的协作处理能力。再也不需要担心遗漏监控报警，解放运维人力。</p>"},{"title":"(译)为什么原型继承很重要","date":"2015-03-14T06:46:35.000Z","_content":"五天之前我写了一个关于ES6标准中Class的[文章](http://aaditmshah.github.io/standardizing-harmony-classes)。在里面我介绍了如何用现有的Javascript来模拟类并且介绍了ES6中类的用法，其实它只是一个语法糖。感谢[Om Shakar](http://geekyogi.tumblr.com/)以及[Javascript Room](http://rlemon.github.io/so-chat-javascript-rules/)中的各位，我的编程风格从那时候开始发生了改变；就像[Dougla Crockford](http://www.crockford.com/)2006年做的一样，我也学习了很多来完全理解基于原型的编程方式。\n\nJavascript是一个多样化的编程语言。它拥有面向对象和函数式的编程特点，你可以使用任何一种风格来编写代码。然而这两个编程风格并不能很好的融合。例如，你不无法同时使用`new`(典型的面向对象的特点)和`apply`(函数式编程的特点).原型继承一直都作为连接这两种风格的桥梁。\n<!-- more -->\n## 基于类继承的问题\n\n大部分Javascript程序员会告诉你基于类的继承不好。然而它们中只有很少一部分知道其中的原因。事实实际上是基于类的基础并没有什么不好。Python是基于类继承的，并且它是一门很好的编程语言。但是，基于类的继承并不适合用于Javascript。Python正确的使用了类，它们只有简单的工厂方法不能当成构造函数使用。而在Javascript中任何函数都可以被当成构造函数使用。\n\nJavascript中的问题是由于每个函数都可以被当成构造函数使用，所以我们需要区分普通的函数调用和构造函数调用；我们一般使用`new`关键字来进行区别。然而，这样就破坏了Javascript中的函数式特点，因为`new`是一个关键字而不是函数。因而函数式的特点无法和对象实例化一起使用。\n\n```javascript\nfunction Person(firstname,lastname){\n    this.firstname = firstname ;\n    this.lastname = lastname ;\n}\n```\n\n考虑上面这段程序。你可以通过`new`关键字来调用`Person`方法来创建一个函数`Person`的实例：\n\n```javascript\nvar author = new Person('Aadit','Shah') ;\n```\n\n然而，没有任何办法来使用`apply`方法来为构造函数指定参数列表：\n\n```javascript\nvar author = new Person.apply(null,['Aadit','Shah']);//error\n```\n\n但是，如果`new`是一个方法那么上面的需求就可以通过下面这种方式实现了：\n\n```javascript\nvar author = Person.new.apply(Person,['Aadit','Shah']) ;\n```\n\n幸运的是，因为Javascript有原型继承，所以我们可以实现一个`new`的函数：\n\n```javascript\nFunction.prototype.new = function () {\n    function functor() { return constructor.apply(this, args); }\n    var args = Array.prototype.slice.call(arguments);\n    functor.prototype = this.prototype;\n    var constructor = this;\n    return new functor;\n};\n```\n\n在像Java这样对象只能通过`new`关键字来实例化的语言中，上面这种方式是不可能实现的。\n\n下面这张表列出了原型继承相比于基于类的基础的优点：\n\n|基于类的继承         |原型继承           |\n|-------------|-------------|\n|类是不可变的。在运行时，你无法修改或者添加新的方法|原型是灵活的。它们可以是不可变的也可以是可变的|\n|类可能会不支持多重继承|对象可以继承多个原型对象|\n|基于类的继承比较复杂。你需要使用抽象类，接口和final类等等|原型继承比较简洁。你只有对象，你只需要对对象进行扩展就可以了|\n\n## 不要再使用关键词new了\n\n到现在你应该知道为什么我觉得`new`关键字是不会的了吧---你不能把它和函数式特点混合使用。然后，这并不代表你应该停止使用它。`new`关键字有合理的用处。但是我仍然建议你不要再使用它了。`new`关键字掩盖了Javascript中真正的原型继承，使得它更像是基于类的继承。就像[Raynos](http://stackoverflow.com/users/419970/raynos)说的:\n\n> `new`是Javascript在为了获得流行度而加入与Java类似的语法时期留下来的一个残留物\n\nJavascript是一个源于[Self](http://www.selflanguage.org/)的基于原型的语言。然而，为了市场需求，Brendan Eich把它当成Java的小兄弟推出：\n\n> 并且我们当时把Javascript当成Java的一个小兄弟，就像在微软语言家庭中Visual Basic相对于C++一样。\n\n这个设计决策导致了`new`的问题。当人们看到Javascript中的`new`关键字，他们就想到类，然后当他们使用继承时就遇到了傻了。就像Douglas Crockford说的：\n\n> 这个间接的行为是为了使传统的程序员对这门语言更熟悉，但是却失败了，就像我们看到的很少Java程序员选择了Javascript。Javascript的构造模式并没有吸引传统的人群。它也掩盖了Javascript基于原型的本质。结果就是，很少的程序员知道如何高效的使用这门语言\n\n因此我建议停止使用`new`关键字。Javascript在传统面向对象假象下面有着更加强大的原型系统。然大部分程序员并没有看见这些还处于黑暗中。\n\n## 理解原型继承\n\n原型继承很简单。在基于原型的语言中你只有对象。没有类。有两种方式来创建一个新对象---“无中生有”对象创建法或者通过现有对象创建。在Javascript中`Object.create`方法用来创建新的对象。新的对象之后会通过新的属性进行扩展。\n\n### “无中生有”对象创建法\n\nJavascript中的`Object.create`方法用来从0开始创建一个对象，像下面这样:\n\n```javascript\nvar object = Object.create(null) ;\n```\n\n上面例子中新创建的`object`没有任何属性。\n\n### 克隆一个现有的对象\n\n`Object.create`方法也可以克隆一个现有的对象，像下面这样:\n\n```javascript\nvar rectangle = {\n    area : function(){\n        return this.width * this.height ;\n    }\n} ;\nvar rect = Object.create(rectangle) ;\n```\n\n上面例子中`rect`从`rectangle`中继承了`area`方法。同时注意到`rectangle`是一个对象字面量。对象字面量是一个简洁的方法用来创建一个`Object.prototype`的克隆然后用新的属性来扩展它。它等价于:\n\n```javascript\nvar rectangle = Object.create(Object.prototype) ;\nrectangle.area = function(){\n    return this.width * this.height ;\n} ;\n```\n\n### 扩展一个新创建的对象\n\n上面的例子中我们克隆了`rectangle`对象命名为`rect`，但是在我们使用`rect`的`area`方法之前我们需要扩展它的`width`和`height`属性，像下面这样:\n\n```javascript\nrect.width = 5 ;\nrect.height = 10 ;\nalert(rect.area()) ;\n```\n\n然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个`rectangle`对象的克隆上手动定义`width`和`height`属性。如果有一个方法能够为我们来完成这些工作就很好了。是不是听起来有点熟悉？确实是。我要来说说构造函数。我们把这个函数叫做`create`然后在`rectangle`对象上定义它:\n\n```javascript\nvar rectangle = {\n    create : function(width,height){\n        var self = Object.create(this) ;\n        self.height = height ;\n        self.width = width ;\n        return self ;\n    } ,\n    area : function(){\n        return this.width * this.height ;\n    }\n} ;\nvar rect = rectangle.create(5,10) ;\nalert(rect.area()) ;\n```\n\n### 构造函数 VS 原型\n\n等等。这看起来很像Javascript中的正常构造模式:\n\n```javascript\nfunction Rectangle(width, height) {\n    this.height = height;\n    this.width = width;\n} ;\n\nRectangle.prototype.area = function () {\n    return this.width * this.height;\n};\n\nvar rect = new Rectangle(5, 10);\n\nalert(rect.area());\n```\n\n是的，确实很像。为了使得Javascript看起来更像Java原型模式被迫屈服于构造模式。因此每个Javascript中的函数都有一个`prototype`对象然后可以用来作为构造器(这里构造器的意思应该是说新的对象是在`prototype`对象的基础上进行构造的)。`new`关键字允许我们把函数当做构造函数使用。它会克隆构造函数的`prototype`属性然后把它绑定到`this`对象中，如果没有显式返回对象则会返回`this`。\n\n原型模式和构造模式都是平等的。因此你也许会怀疑为什么有人会困扰于是否应该使用原型模式而不是构造模式。毕竟构造模式比原型模式更加简洁。但是原型模式相比构造模式有许多优势。具体如下：\n\n|构造模式|原型模式|\n|------|------|\n|函数式特点无法与`new`关键字一起使用|函数式特点可以与`create`结合使用|\n|忘记使用`new`会导致无法预期的bug并且会污染全局变量|由于`create`是一个函数，所以程序总是会按照预期工作|\n|使用构造函数的原型继承比较复杂并且混乱|使用原型的原型继承简洁易懂|\n\n最后一点可能需要解释一下。使用构造函数的原型继承相比使用原型的原型继承更加复杂，我们先看看使用原型的原型继承:\n\n```javascript\nvar square = Object.create(rectangle);\nsquare.create = function (side) {\n    return rectangle.create.call(this, side, side);\n} ;\nvar sq = square.create(5) ;\nalert(sq.area()) ;\n```\n\n上面的代码很容易理解。首先我们创建一个`rectangle`的克隆然后命名为`square`。接着我们用新的`create`方法重写`square`对象的`create`方法。最终我们从新的`create`方法中调用`rectangle`的`create`函数并且返回对象。相反的，使用构造函数的原型继承像下面这样:\n\n```javascript\nfunction Square(){\n    Rectangle.call(this,side,side) ;\n} ;\n\nSquare.prototype = Object.create(Rectangle.prototype) ;\n\nSquare.prototype.constructor = Square ;\n\nvar sq = new Square(5) ;\n\nalert(sq.area()) ;\n```\n\n当然，构造函数的方式更简单。然后这样的话，向一个不了解情况的人解释原型继承就变得非常困难。如果想一个了解类继承的人解释则会更加困难。\n\n当使用原型模式时一个对象继承自另一个对象就变得很明显。当使用方法构造模式时就没有这么明显，因为你需要根据其他构造函数来考虑构造继承。\n\n### 对象创建和扩展相结合\n\n在上面的例子中我们创建一个`rectangle`的克隆然后命名为`square`。然后我们利用新的`create`属性扩展它，重写继承自`rectangle`对象的`create`方法。如果把这两个操作合并成一个就很好了，就像对象字面量是用来创建`Object.prototype`的克隆然后用新的属性扩展它。这个操作叫做`extend`，可以像下面这样实现:\n\n```javascript\nObject.prototype.extend = function(extension){\n    var hasOwnProperty = Object.hasOwnProperty ;\n    var object = Object.create(this) ;\n\n    for(var property in extension){\n        if(hasOwnProperty.call(extension,property) ||\n            typeof obejct[property] === 'undefined')\n            //这段代码有问题，按照文章意思，这里应该使用深复制，而不是简单的浅复制,deepClone(extension[property],object[property]),deepClone的实现可以看我之前关于继承的博客\n            object[properyty] = extension[property] ;\n    }\n    return object ;\n} ;\n```\n\n> 译者注：我觉得博主这里的实现有点不符合逻辑，正常`extend`的实现应该是可以配置当被扩展对象和用来扩展的对象属性重复时是否覆盖原有属性，而博主的实现就只是简单的覆盖。同时博主的实现在`if`判断中的做法个人觉得是值得学习的，首先判断`extension`属性是否是对象自身的，如果是就直接复制到`object`上，否则再判断`object`上是否有这个属性，如果没有那么也会把属性复制到`object`上，这种实现的结果就使得被扩展的对象不仅仅只扩展了`extension`中的属性，还包括了`extension`原型中的属性。不难理解，`extension`原型中的属性会在`extension`中表现出来，所以它们也应该作为`extension`所具有的特性而被用来扩展`object`。所以我对这个方法进行了改写:\n\n```javascript\n    Object.prototype.extend = function(extension,override){\n    var hasOwnProperty = Object.hasOwnProperty ;\n    var object = Object.create(this) ;\n    for(var property in extension){\n        if(hasOwnProperty.call(extension,property) ||\n            typeof object[property] === 'undefined'){\n            if(object[property] !== 'undefined'){\n                if(override){\n                    deepClone(extension[property],object[property]) ;\n                }\n            }else{\n                deepClone(extension[property],object[property]) ;\n            }    \n        }\n    }\n};\n```\n\n利用上面的`extend`方法，我们可以重写`square`的代码:\n\n```javascript\nvar square = rectangle.extend({\n    create : function(side){\n        return rectangle.create.call(this,side,side) ;\n    }\n}) ;\n\nvar sq = square.create(5) ;\nalert(sq.area()) ;\n```\n\n`extend`方法是原型继承中唯一需要的操作。它是`Object.create`函数的超集，因此它可以用在对象的创建和扩展上。因此我们可以用`extend`来重写`rectangle`，使得`create`函数更加结构化看起来就像[模块模式](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html)。\n\n```javascript\nvar rectangle = {\n    create : function(width,height){\n        return this.extend({\n            height : height ,\n            width : width\n        }) ;\n    }\n} ;\n\nvar rect = rectangle.create(5,10) ;\nalert(rect.area()) ;\n```\n\n### 原型继承的两种方法\n\n一些人可能已经注意到`extend`函数返回的对象实际上是继承了两个对象的属性，一个是被扩展的对象，另一个是用来扩展的对象。另外从两个对象继承属性的方式也不一样。第一种情况下是通过委派来继承属性(也就是使用`Object.create()`来继承属性)，第二种情况下使用合并属性的方式来继承属性。\n\n#### 委派(差异化继承)\n\n很多Javascript程序员对于差别继承比较熟悉。维基百科是这么解释的:\n\n> 大部分对象是从其他更一般的对象中得到的，只是在一些很小的地方进行了修改。每个对象通常在内部维护一个指向其他对象的引用列表，这些对象就是该对象本身进行差异化继承的对象。\n\nJavascript中的原型继承是基于差异化继承的。每个对象都有个内部指针叫做[[proto]] (在大部分浏览器中可以通过\\__proto\\__属性访问)，这个指针指向对象的原型。多个对象之间通过内部[[proto]]属性链接起来形成了原型链，链的最后指向`null`。\n\n当你试图获取一个对象的属性时Javascript引擎会首先查找对象自身的属性。如果在对象上没找到该属性，那么它就会去对象的原型中去查找。以此类推，它会沿着原型链一直查找知道找到或者到原型链的末尾。\n\n```javascript\nfunction get(object,property){\n    if(!Object.hasOwnProperty.call(object,property)){\n        var prototype = Object.getPrototypeOf(object) ;\n        if(prototype) return get(prototype,property) ;\n    }else{\n        return object[property] ;\n    }\n} ;\n```\n\nJavascript中属性查找的过程就像上面的程序那样。\n\n#### 克隆(合并式继承)\n\n大多数Javascript程序员会觉得复制一个对象的属性到另一个对象上并不是一个正确的继承的方式，因为任何对原始对象的修改都不会反映在克隆的对象上。五天前我会同意这个观点。然而现在我相信合并式继承是原型继承的一种正确方式。对于原始对象的修改可以发送到它的副本来实现真正的原型继承。\n\n合并式继承和代理有他们的优点和缺点。下表列出了它们的优缺点:\n\n|  代理  |  合并  |\n|------|------|\n|任何对于原型的修改都会反映在所有副本上|任何对于原型的修改都需要手动更新到副本中|\n|属性查找效率较低因为需要进行原型链查找|属性查找更搞笑因为继承的属性是通过复制的方式附加在对象本身的|\n|使用`Object.create()`方法只能继承单一对象|对象可以从任意数量的对象中通过复制继承属性|\n\n### 从多个原型继承\n\n上表中最后一点告诉我们对象可以通过合并的方式从多个原型中继承属性。这是一个重要的特点因为这证明原型继承比Java中的类继承更强大并且与C++中的类继承一样强大。为了实现多重继承，你只需要修改`extend`方法来从多个原型中复制属性。\n\n```javascript\nObject.prototype.extend = function(){\n    var hasOwnProperty = Object.hasOwnProperty ;\n    var object = Object.create(this) ;\n    var length = arguments.length ;\n    var index = length ;\n\n    while(index){\n        var extension = arguments[length - (index--)] ;\n        for(var property in extension){\n            if(hasOwnProperty.call(extension,property)||\n                typeof object[property] === 'undefined'){\n                //这里同样应该使用深复制\n                object[property] = extension[property] ;\n            }\n        }\n    }\n    return object;\n} ;\n```\n\n多重继承是非常有用的因为它提高了代码的可重用性和模块化。对象通过委派继承一个原型对象然后通过合并继承其他属性。比如说你有一个事件发射器的原型，像下面这样：\n\n```javascript\nvar eventEmitter = {\n    on : function(event,listener){\n        if(typeof this[event] !== 'undefined')\n            this[event].push(listener) ;\n        else\n            this[event] = [listener] ;\n    } ,\n    emit : function(event){\n        if(typeof this[event] !== 'undefined'){\n            var listeners = this[event] ;\n            var length = listeners.length,index = length ;\n            var args = Array.prototype.slice.call(arguments,1) ;\n\n            while(index){\n                var listener = listeners[length - (index--)] ;\n                listener.apply(this,args) ;\n            }\n        }\n    }\n} ;\n```\n\n现在你希望`square`表现得像一个事件发射器。因为`square`已经通过委派的方式继承了`rectangle`，所以它必须通过合并的方式继承`eventEmitter`。这个修改可以很容易地通过使用`extend`方法实现：\n\n```javascript\nvar square = rectangle.extend(eventEmitter,{\n    create : function(side){\n        return rectangle.create.call(this,side,side) ;\n    } ,\n    resize : function(newSize){\n        var oldSize = this.width ;\n        this.width = this.height = newSize ;\n        this.emit('resize',oldSize,newSize) ;\n    }\n}) ;\nvar sq = square.create(5) ;\nsq.on('resize',function(oldSize,newSize){\n    alert('sq resized from ' + oldSize + 'to' + newSize + '.') ;\n}) ;\n\nsq.resize(10) ;\nalert(sq.area()) ;\n```\n\n在Java中是不可能实现上面的程序的，因为它不支持多重继承。相应的你必须另外再创建一个`EventEmitter`类或者使用一个`EventEmitter`接口并且在每个实现该接口的类中分别实现`on`和`emit`方法。当然你在C++中不需要面对这个问题。我们都知道Java sucks(呵呵呵)。\n\n### Mixin的蓝图(Buleprint)\n\n在上面的例子中你肯定注意到`eventEmitter`原型并没有一个`create`方法。这是因为你不应该直接创建一个`eventEmitter`对象。相反`eventEmitter`是用来作为其他原型的原型。这类原型称为mixin。它们等价于抽象类。mixin用来通过提供一系列可重用的方法来扩展对象的功能。\n\n然而有时候mixin需要私有的状态。例如`eventEmitter`如果能够把它的事件监听者列表放在私有变量中而不是放在`this`对象上会安全得多。但是mixin没有`create`方法来封装私有状态。因此我们需要为mixin创建一个蓝图(blueprint)来创建闭包。蓝图(blueprint)看起来会像是构造函数但是它们并不用像构造函数那样使用。例如：\n\n```javascript\nfunction eventEmitter(){\n    var evnets = Object.create(null) ;\n\n    this.on = function(event,listener){\n        if(typeof events[event] !== 'undefined')\n            events[event].push(listener) ;\n        else\n            events[event] = [listener] ;\n    } ;\n    this.emit = function(event){\n        if(typeof events[event] !== 'undefined'){\n            var listeners = events[event] ;\n            var length = listeners.length ,index = length ;\n            var args = Array.prototype.slice.call(arguments,1) ;\n        }\n    } ;\n} ;\n```\n\n一个蓝图用来在一个对象创建之后通过合并来扩展它(我觉得有点像装饰者模式)。[Eric Elliot](http://ericleads.com/)把它们叫做[闭包原型](http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/)。我们可以使用蓝图版本的`eventEmitter`来重写`square`的代码，如下：\n\n```javascript\nvar square = rectangle.extend({\n    create : function(side){\n        var self = rectangle.create.call(this,side,side) ;\n        eventEmitter.call(self) ;\n        return self ;\n    } ,\n    resize : function(newSize){\n        var oldSize = this.width ;\n        this.width = this.height = newSize ;\n        this.emit('resize',oldSize,newSize) ;\n    }\n}) ;\nvar sq = square.create(5) ;\n\nsq.on('resize',function(oldSize,newSize){\n    alert('sq resized from ' + oldSize + 'to' + newSize + '.') ;\n}) ;\n\nsq.resize(10) ;\n\nalert(sq.area()) ;\n```\n\n蓝图在Javascript中是独一无二的。它是一个很强大的特性。然而它们也有自己的缺点。下表列出了mixin和蓝图的优缺点：\n\n|  Mixin  |  蓝图  |\n|-------|------|\n|它们用来扩展对象的原型。因此对象共享同一个原型|它们用来扩展新创建的对象。因此每个对象都是在自己对象本身进行修改|\n|因为缺少封装方法所以不存在私有状态|它们是函数，所以可以封装私有状态|\n|它们是静态原型并且不能被自定义|它们可以传递参数来自定义对象，可以向蓝图函数传递一些用来自定义的参数|\n\n### 修复instanceof操作\n\n许多Javascript程序员会觉得使用原型模式来继承违背了语言的精髓。他们更偏向于构造模式因为他们觉得通过构造函数创建的对象才是真正的实例，因为`instanceof`操作会返回`true`。然而，这个争论是没有意义的，因为`instanceof`操作可以像下面这样实现：\n\n```javascript\nObject.prototype.instanceof = function(prototype){\n\tvar object = this ;\n\tdo{\n\t\tif(object === prototype) return true ;\n\t\tvar object = Object.getPrototypeOf(object) ;\n\t}while(object) ;\n\treturn false ;\n}\n```\n\n这个`instanceof`方法现在可以被用来测试一个对象是否是通过委派从一个原型继承的。例如：\n\n```javascript\nsq.instanceof(square) ;\n```\n\n然而还是没有办法判断一个对象是否是通过合并的方式从一个原型继承的，因为实例的关联信息丢失了。为了解决这个问题我们将一个原型的所有克隆的引用保存在原型自身中，然后使用这个信息来判断一个对象是否是一个原型的实例。这个可以通过修改`extend`方法来实现：\n\n```javascript\nObject.prototype.extend = function(){\n\tvar hasOwnProperty = Object.hasOwnProperty ;\n\tvar object = Object.create(this) ;\n\tvar length = arguments.lenght ;\n\tvar index = length ;\n\n\twhile(index){\n\t\tvar extension = arguments[length - (index--)] ;\n\n\t\tfor(var property in extension){\n\t\t\tif(property !== 'clones' &&\n\t\t\t\thasOwnProperty.call(extension,property) ||\n\t\t\t\ttypeof object[property] === 'undefined')\n\t\t\t\tobject[property] = extension[property] ;\n\n\t\tif(hasOwnProperty.call(extension,'clones')})\n\t\t\textension.clones.unshift(object) ;\n\t\telse\n\t\t\textension.clones = [object] ;\n\t\t}\n\t}\n\treturn object;\n} ;\n```\n\n通过合并继承自原型的对象形成了一个克隆树，这些树从根对象开始然后向下一直到叶子对象。一个克隆链是一个从根对象到叶子对象的单一路径，这跟遍历原型链很相似。我们可以使用这个信息来判断一个对象是否是通过合并继承自一个原型。\n\n```javascript\nObject.prototype.instanceof = function(prototype){\n\tif (Object.hasOwnProperty.call(prototype, \"clones\"))\n\t\tvar clones = prototype.clones;\n\tvar object = this;\n\n\tdo {\n\t\tif (object === prototype ||\n\t\t\tclones && clones.indexOf(object) >= 0)\n\t\t\treturn true;\n\t\tvar object = Object.getPrototypeOf(o  bject);\n\t} while (object);\n\n\treturn false;\n} ;\n```\n\n这个`instanceof`方法现在可以用来判断一个对象是否是通过合并继承自一个原型。例如:\n\n```javascript\nsq.instanceof(eventEmitter);\n```\n\n在上面的程序中`instanceof`会返回`true`如果我妈使用mixin版本的`eventEmitter`。然而如果我们使用蓝图版本的`eventEmitter`它会返回`false`。为了解决这个问题我创建了一个蓝图函数，这个函数接收一个蓝图作为参数，向它添加一个`clones`属性然后返回一个记录了它的克隆的新蓝图：\n\n```javascript\nfunction blueprint(f){\n\tvar g = function(){\n\t\tf.apply(this,arguments) ;\n\t\tg.clones.unshift(this) ;\n\t} ;\n\tg.clones = [] ;\n\treturn g ;\n} ;\nvar eventEmitter = blueprint(function(){\n\tvar events = Object.create(null);\n    this.on = function (event, listener) {\n        if (typeof events[event] !== \"undefined\")\n            events[event].push(listener);\n        else events[event] = [listener];\n    };\n\n    this.emit = function (event) {\n        if (typeof events[event] !== \"undefined\") {\n            var listeners = events[event];\n            var length = listeners.length, index = length;\n            var args = Array.prototype.slice.call(arguments, 1);\n\n            while (index) {\n                var listener = listeners[length - (index--)];\n                listener.apply(this, args);\n            }\n        }\n    };\n}) ;\n```\n\n### 向原型发送变化\n\n上面例子中的`clones`属性有双重作用。它可以用来判断一个对象是否是通过合并继承自一个原型的，然后他可以用来发送原型改变给所有它的克隆。原型继承相比类继承最大的优势就是你可以修改一个原型在它创建之后。为了使克隆可以继承对于原型的修改，我们创建了一个叫做`define`的函数：\n\n```javascript\nObject.prototype.define = function (property, value) {\n    this[property] = value;\n\n    if (Object.hasOwnProperty.call(this, \"clones\")) {\n        var clones = this.clones;\n        var length = clones.length;\n\n        while (length) {\n            var clone = clones[--length];\n            if (typeof clone[property] === \"undefined\")\n                clone.define(property, value);\n        }\n    }\n};\n```\n\n现在我们可以修改原型然后这个修改会反映在所有的克隆上。例如我们可以创建创建一个别名`addEventListener`针对`eventEmitter`上的`on`方法：\n\n```javascript\nvar square = rectangle.extend(eventEmitter, {\n    create: function (side) {\n        return rectangle.create.call(this, side, side);\n    },\n    resize: function (newSize) {\n        var oldSize = this.width;\n        this.width = this.height = newSize;\n        this.emit(\"resize\", oldSize, newSize);\n    }\n});\n\nvar sq = square.create(5);\n\neventEmitter.define(\"addEventListener\", eventEmitter.on);\n\nsq.addEventListener(\"resize\", function (oldSize, newSize) {\n    alert(\"sq resized from \" + oldSize + \" to \" + newSize + \".\");\n});\n\nsq.resize(10);\n\nalert(sq.area());\n```\n\n蓝图需要特别注意。尽管对于蓝图的修改会被发送到它的克隆，但是蓝图的新的克隆并不会反映这些修改。幸运的是这个问题的解决方法很简单。我们只需要对`blueprint`方法进行小小的修改，然后任何对于蓝图的修改就会反映在克隆上了。\n\n```javascript\nfunction blueprint(f) {\n    var g = function () {\n        f.apply(this, arguments);\n        g.clones.unshift(this);\n\n        var hasOwnProperty = Object.hasOwnProperty;\n\n        for (var property in g)\n            if (property !== \"clones\" &&\n                hasOwnProperty.call(g, property))\n                    this[property] = g[property];\n    };\n\n    g.clones = [];\n\n    return g;\n};\n```\n\n## 结论\n\n恭喜你。如果你读完了整篇文章并且理解了我所说的东西，你现在就了解了 原型继承并且为什么它很重要。很感谢你们看完了这篇文章。我希望这个博客能帮到你们。原型继承是强大的并且值得更多的信任。然后大部分人从来不明白这个因为Javascript中的原型继承被构造模式所掩盖了。\n\n## 译者注\n\n这篇文章针对几种继承方式进行了对比。文章中说到的几种扩展的方法我觉得是比较有用的。蓝图(blueprint，这个实在不知道该怎么翻译)的扩展方式比较像设计模式中的装饰者模式，通过函数对对象进行扩展，这个是一种比较好玩的扩展方式，可以跟原型继承配合使用。另外文中提到了`new`关键字的弊端，个人觉得主要的原因还是`new`关键字的出现掩盖了Javascript本身原型继承的特点，人们自然而然就会想到传统的类继承，这样就无法发挥原型继承的最大威力。最后说到的属性修改传播的问题也挺有意思的，应该会有相应的应用场景。总之，我觉得原型继承相比于传统的类继承提供了更大的灵活性，可以给我们开发者提供很大的发挥空间，不过不管怎样，到最后还是要涉及到基本的原型继承的原理上，所以掌握了原型继承的原理就可以根据不同的应用场景使用各种各样的扩展方式。\n\n\n---\n\n> 原文地址：http://aaditmshah.github.io/why-prototypal-inheritance-matters/\n","source":"_posts/why-prototype-important.md","raw":"title: (译)为什么原型继承很重要\ndate: 2015-03-14 14:46:35\ntags: ['javascript']\n---\n五天之前我写了一个关于ES6标准中Class的[文章](http://aaditmshah.github.io/standardizing-harmony-classes)。在里面我介绍了如何用现有的Javascript来模拟类并且介绍了ES6中类的用法，其实它只是一个语法糖。感谢[Om Shakar](http://geekyogi.tumblr.com/)以及[Javascript Room](http://rlemon.github.io/so-chat-javascript-rules/)中的各位，我的编程风格从那时候开始发生了改变；就像[Dougla Crockford](http://www.crockford.com/)2006年做的一样，我也学习了很多来完全理解基于原型的编程方式。\n\nJavascript是一个多样化的编程语言。它拥有面向对象和函数式的编程特点，你可以使用任何一种风格来编写代码。然而这两个编程风格并不能很好的融合。例如，你不无法同时使用`new`(典型的面向对象的特点)和`apply`(函数式编程的特点).原型继承一直都作为连接这两种风格的桥梁。\n<!-- more -->\n## 基于类继承的问题\n\n大部分Javascript程序员会告诉你基于类的继承不好。然而它们中只有很少一部分知道其中的原因。事实实际上是基于类的基础并没有什么不好。Python是基于类继承的，并且它是一门很好的编程语言。但是，基于类的继承并不适合用于Javascript。Python正确的使用了类，它们只有简单的工厂方法不能当成构造函数使用。而在Javascript中任何函数都可以被当成构造函数使用。\n\nJavascript中的问题是由于每个函数都可以被当成构造函数使用，所以我们需要区分普通的函数调用和构造函数调用；我们一般使用`new`关键字来进行区别。然而，这样就破坏了Javascript中的函数式特点，因为`new`是一个关键字而不是函数。因而函数式的特点无法和对象实例化一起使用。\n\n```javascript\nfunction Person(firstname,lastname){\n    this.firstname = firstname ;\n    this.lastname = lastname ;\n}\n```\n\n考虑上面这段程序。你可以通过`new`关键字来调用`Person`方法来创建一个函数`Person`的实例：\n\n```javascript\nvar author = new Person('Aadit','Shah') ;\n```\n\n然而，没有任何办法来使用`apply`方法来为构造函数指定参数列表：\n\n```javascript\nvar author = new Person.apply(null,['Aadit','Shah']);//error\n```\n\n但是，如果`new`是一个方法那么上面的需求就可以通过下面这种方式实现了：\n\n```javascript\nvar author = Person.new.apply(Person,['Aadit','Shah']) ;\n```\n\n幸运的是，因为Javascript有原型继承，所以我们可以实现一个`new`的函数：\n\n```javascript\nFunction.prototype.new = function () {\n    function functor() { return constructor.apply(this, args); }\n    var args = Array.prototype.slice.call(arguments);\n    functor.prototype = this.prototype;\n    var constructor = this;\n    return new functor;\n};\n```\n\n在像Java这样对象只能通过`new`关键字来实例化的语言中，上面这种方式是不可能实现的。\n\n下面这张表列出了原型继承相比于基于类的基础的优点：\n\n|基于类的继承         |原型继承           |\n|-------------|-------------|\n|类是不可变的。在运行时，你无法修改或者添加新的方法|原型是灵活的。它们可以是不可变的也可以是可变的|\n|类可能会不支持多重继承|对象可以继承多个原型对象|\n|基于类的继承比较复杂。你需要使用抽象类，接口和final类等等|原型继承比较简洁。你只有对象，你只需要对对象进行扩展就可以了|\n\n## 不要再使用关键词new了\n\n到现在你应该知道为什么我觉得`new`关键字是不会的了吧---你不能把它和函数式特点混合使用。然后，这并不代表你应该停止使用它。`new`关键字有合理的用处。但是我仍然建议你不要再使用它了。`new`关键字掩盖了Javascript中真正的原型继承，使得它更像是基于类的继承。就像[Raynos](http://stackoverflow.com/users/419970/raynos)说的:\n\n> `new`是Javascript在为了获得流行度而加入与Java类似的语法时期留下来的一个残留物\n\nJavascript是一个源于[Self](http://www.selflanguage.org/)的基于原型的语言。然而，为了市场需求，Brendan Eich把它当成Java的小兄弟推出：\n\n> 并且我们当时把Javascript当成Java的一个小兄弟，就像在微软语言家庭中Visual Basic相对于C++一样。\n\n这个设计决策导致了`new`的问题。当人们看到Javascript中的`new`关键字，他们就想到类，然后当他们使用继承时就遇到了傻了。就像Douglas Crockford说的：\n\n> 这个间接的行为是为了使传统的程序员对这门语言更熟悉，但是却失败了，就像我们看到的很少Java程序员选择了Javascript。Javascript的构造模式并没有吸引传统的人群。它也掩盖了Javascript基于原型的本质。结果就是，很少的程序员知道如何高效的使用这门语言\n\n因此我建议停止使用`new`关键字。Javascript在传统面向对象假象下面有着更加强大的原型系统。然大部分程序员并没有看见这些还处于黑暗中。\n\n## 理解原型继承\n\n原型继承很简单。在基于原型的语言中你只有对象。没有类。有两种方式来创建一个新对象---“无中生有”对象创建法或者通过现有对象创建。在Javascript中`Object.create`方法用来创建新的对象。新的对象之后会通过新的属性进行扩展。\n\n### “无中生有”对象创建法\n\nJavascript中的`Object.create`方法用来从0开始创建一个对象，像下面这样:\n\n```javascript\nvar object = Object.create(null) ;\n```\n\n上面例子中新创建的`object`没有任何属性。\n\n### 克隆一个现有的对象\n\n`Object.create`方法也可以克隆一个现有的对象，像下面这样:\n\n```javascript\nvar rectangle = {\n    area : function(){\n        return this.width * this.height ;\n    }\n} ;\nvar rect = Object.create(rectangle) ;\n```\n\n上面例子中`rect`从`rectangle`中继承了`area`方法。同时注意到`rectangle`是一个对象字面量。对象字面量是一个简洁的方法用来创建一个`Object.prototype`的克隆然后用新的属性来扩展它。它等价于:\n\n```javascript\nvar rectangle = Object.create(Object.prototype) ;\nrectangle.area = function(){\n    return this.width * this.height ;\n} ;\n```\n\n### 扩展一个新创建的对象\n\n上面的例子中我们克隆了`rectangle`对象命名为`rect`，但是在我们使用`rect`的`area`方法之前我们需要扩展它的`width`和`height`属性，像下面这样:\n\n```javascript\nrect.width = 5 ;\nrect.height = 10 ;\nalert(rect.area()) ;\n```\n\n然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个`rectangle`对象的克隆上手动定义`width`和`height`属性。如果有一个方法能够为我们来完成这些工作就很好了。是不是听起来有点熟悉？确实是。我要来说说构造函数。我们把这个函数叫做`create`然后在`rectangle`对象上定义它:\n\n```javascript\nvar rectangle = {\n    create : function(width,height){\n        var self = Object.create(this) ;\n        self.height = height ;\n        self.width = width ;\n        return self ;\n    } ,\n    area : function(){\n        return this.width * this.height ;\n    }\n} ;\nvar rect = rectangle.create(5,10) ;\nalert(rect.area()) ;\n```\n\n### 构造函数 VS 原型\n\n等等。这看起来很像Javascript中的正常构造模式:\n\n```javascript\nfunction Rectangle(width, height) {\n    this.height = height;\n    this.width = width;\n} ;\n\nRectangle.prototype.area = function () {\n    return this.width * this.height;\n};\n\nvar rect = new Rectangle(5, 10);\n\nalert(rect.area());\n```\n\n是的，确实很像。为了使得Javascript看起来更像Java原型模式被迫屈服于构造模式。因此每个Javascript中的函数都有一个`prototype`对象然后可以用来作为构造器(这里构造器的意思应该是说新的对象是在`prototype`对象的基础上进行构造的)。`new`关键字允许我们把函数当做构造函数使用。它会克隆构造函数的`prototype`属性然后把它绑定到`this`对象中，如果没有显式返回对象则会返回`this`。\n\n原型模式和构造模式都是平等的。因此你也许会怀疑为什么有人会困扰于是否应该使用原型模式而不是构造模式。毕竟构造模式比原型模式更加简洁。但是原型模式相比构造模式有许多优势。具体如下：\n\n|构造模式|原型模式|\n|------|------|\n|函数式特点无法与`new`关键字一起使用|函数式特点可以与`create`结合使用|\n|忘记使用`new`会导致无法预期的bug并且会污染全局变量|由于`create`是一个函数，所以程序总是会按照预期工作|\n|使用构造函数的原型继承比较复杂并且混乱|使用原型的原型继承简洁易懂|\n\n最后一点可能需要解释一下。使用构造函数的原型继承相比使用原型的原型继承更加复杂，我们先看看使用原型的原型继承:\n\n```javascript\nvar square = Object.create(rectangle);\nsquare.create = function (side) {\n    return rectangle.create.call(this, side, side);\n} ;\nvar sq = square.create(5) ;\nalert(sq.area()) ;\n```\n\n上面的代码很容易理解。首先我们创建一个`rectangle`的克隆然后命名为`square`。接着我们用新的`create`方法重写`square`对象的`create`方法。最终我们从新的`create`方法中调用`rectangle`的`create`函数并且返回对象。相反的，使用构造函数的原型继承像下面这样:\n\n```javascript\nfunction Square(){\n    Rectangle.call(this,side,side) ;\n} ;\n\nSquare.prototype = Object.create(Rectangle.prototype) ;\n\nSquare.prototype.constructor = Square ;\n\nvar sq = new Square(5) ;\n\nalert(sq.area()) ;\n```\n\n当然，构造函数的方式更简单。然后这样的话，向一个不了解情况的人解释原型继承就变得非常困难。如果想一个了解类继承的人解释则会更加困难。\n\n当使用原型模式时一个对象继承自另一个对象就变得很明显。当使用方法构造模式时就没有这么明显，因为你需要根据其他构造函数来考虑构造继承。\n\n### 对象创建和扩展相结合\n\n在上面的例子中我们创建一个`rectangle`的克隆然后命名为`square`。然后我们利用新的`create`属性扩展它，重写继承自`rectangle`对象的`create`方法。如果把这两个操作合并成一个就很好了，就像对象字面量是用来创建`Object.prototype`的克隆然后用新的属性扩展它。这个操作叫做`extend`，可以像下面这样实现:\n\n```javascript\nObject.prototype.extend = function(extension){\n    var hasOwnProperty = Object.hasOwnProperty ;\n    var object = Object.create(this) ;\n\n    for(var property in extension){\n        if(hasOwnProperty.call(extension,property) ||\n            typeof obejct[property] === 'undefined')\n            //这段代码有问题，按照文章意思，这里应该使用深复制，而不是简单的浅复制,deepClone(extension[property],object[property]),deepClone的实现可以看我之前关于继承的博客\n            object[properyty] = extension[property] ;\n    }\n    return object ;\n} ;\n```\n\n> 译者注：我觉得博主这里的实现有点不符合逻辑，正常`extend`的实现应该是可以配置当被扩展对象和用来扩展的对象属性重复时是否覆盖原有属性，而博主的实现就只是简单的覆盖。同时博主的实现在`if`判断中的做法个人觉得是值得学习的，首先判断`extension`属性是否是对象自身的，如果是就直接复制到`object`上，否则再判断`object`上是否有这个属性，如果没有那么也会把属性复制到`object`上，这种实现的结果就使得被扩展的对象不仅仅只扩展了`extension`中的属性，还包括了`extension`原型中的属性。不难理解，`extension`原型中的属性会在`extension`中表现出来，所以它们也应该作为`extension`所具有的特性而被用来扩展`object`。所以我对这个方法进行了改写:\n\n```javascript\n    Object.prototype.extend = function(extension,override){\n    var hasOwnProperty = Object.hasOwnProperty ;\n    var object = Object.create(this) ;\n    for(var property in extension){\n        if(hasOwnProperty.call(extension,property) ||\n            typeof object[property] === 'undefined'){\n            if(object[property] !== 'undefined'){\n                if(override){\n                    deepClone(extension[property],object[property]) ;\n                }\n            }else{\n                deepClone(extension[property],object[property]) ;\n            }    \n        }\n    }\n};\n```\n\n利用上面的`extend`方法，我们可以重写`square`的代码:\n\n```javascript\nvar square = rectangle.extend({\n    create : function(side){\n        return rectangle.create.call(this,side,side) ;\n    }\n}) ;\n\nvar sq = square.create(5) ;\nalert(sq.area()) ;\n```\n\n`extend`方法是原型继承中唯一需要的操作。它是`Object.create`函数的超集，因此它可以用在对象的创建和扩展上。因此我们可以用`extend`来重写`rectangle`，使得`create`函数更加结构化看起来就像[模块模式](http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html)。\n\n```javascript\nvar rectangle = {\n    create : function(width,height){\n        return this.extend({\n            height : height ,\n            width : width\n        }) ;\n    }\n} ;\n\nvar rect = rectangle.create(5,10) ;\nalert(rect.area()) ;\n```\n\n### 原型继承的两种方法\n\n一些人可能已经注意到`extend`函数返回的对象实际上是继承了两个对象的属性，一个是被扩展的对象，另一个是用来扩展的对象。另外从两个对象继承属性的方式也不一样。第一种情况下是通过委派来继承属性(也就是使用`Object.create()`来继承属性)，第二种情况下使用合并属性的方式来继承属性。\n\n#### 委派(差异化继承)\n\n很多Javascript程序员对于差别继承比较熟悉。维基百科是这么解释的:\n\n> 大部分对象是从其他更一般的对象中得到的，只是在一些很小的地方进行了修改。每个对象通常在内部维护一个指向其他对象的引用列表，这些对象就是该对象本身进行差异化继承的对象。\n\nJavascript中的原型继承是基于差异化继承的。每个对象都有个内部指针叫做[[proto]] (在大部分浏览器中可以通过\\__proto\\__属性访问)，这个指针指向对象的原型。多个对象之间通过内部[[proto]]属性链接起来形成了原型链，链的最后指向`null`。\n\n当你试图获取一个对象的属性时Javascript引擎会首先查找对象自身的属性。如果在对象上没找到该属性，那么它就会去对象的原型中去查找。以此类推，它会沿着原型链一直查找知道找到或者到原型链的末尾。\n\n```javascript\nfunction get(object,property){\n    if(!Object.hasOwnProperty.call(object,property)){\n        var prototype = Object.getPrototypeOf(object) ;\n        if(prototype) return get(prototype,property) ;\n    }else{\n        return object[property] ;\n    }\n} ;\n```\n\nJavascript中属性查找的过程就像上面的程序那样。\n\n#### 克隆(合并式继承)\n\n大多数Javascript程序员会觉得复制一个对象的属性到另一个对象上并不是一个正确的继承的方式，因为任何对原始对象的修改都不会反映在克隆的对象上。五天前我会同意这个观点。然而现在我相信合并式继承是原型继承的一种正确方式。对于原始对象的修改可以发送到它的副本来实现真正的原型继承。\n\n合并式继承和代理有他们的优点和缺点。下表列出了它们的优缺点:\n\n|  代理  |  合并  |\n|------|------|\n|任何对于原型的修改都会反映在所有副本上|任何对于原型的修改都需要手动更新到副本中|\n|属性查找效率较低因为需要进行原型链查找|属性查找更搞笑因为继承的属性是通过复制的方式附加在对象本身的|\n|使用`Object.create()`方法只能继承单一对象|对象可以从任意数量的对象中通过复制继承属性|\n\n### 从多个原型继承\n\n上表中最后一点告诉我们对象可以通过合并的方式从多个原型中继承属性。这是一个重要的特点因为这证明原型继承比Java中的类继承更强大并且与C++中的类继承一样强大。为了实现多重继承，你只需要修改`extend`方法来从多个原型中复制属性。\n\n```javascript\nObject.prototype.extend = function(){\n    var hasOwnProperty = Object.hasOwnProperty ;\n    var object = Object.create(this) ;\n    var length = arguments.length ;\n    var index = length ;\n\n    while(index){\n        var extension = arguments[length - (index--)] ;\n        for(var property in extension){\n            if(hasOwnProperty.call(extension,property)||\n                typeof object[property] === 'undefined'){\n                //这里同样应该使用深复制\n                object[property] = extension[property] ;\n            }\n        }\n    }\n    return object;\n} ;\n```\n\n多重继承是非常有用的因为它提高了代码的可重用性和模块化。对象通过委派继承一个原型对象然后通过合并继承其他属性。比如说你有一个事件发射器的原型，像下面这样：\n\n```javascript\nvar eventEmitter = {\n    on : function(event,listener){\n        if(typeof this[event] !== 'undefined')\n            this[event].push(listener) ;\n        else\n            this[event] = [listener] ;\n    } ,\n    emit : function(event){\n        if(typeof this[event] !== 'undefined'){\n            var listeners = this[event] ;\n            var length = listeners.length,index = length ;\n            var args = Array.prototype.slice.call(arguments,1) ;\n\n            while(index){\n                var listener = listeners[length - (index--)] ;\n                listener.apply(this,args) ;\n            }\n        }\n    }\n} ;\n```\n\n现在你希望`square`表现得像一个事件发射器。因为`square`已经通过委派的方式继承了`rectangle`，所以它必须通过合并的方式继承`eventEmitter`。这个修改可以很容易地通过使用`extend`方法实现：\n\n```javascript\nvar square = rectangle.extend(eventEmitter,{\n    create : function(side){\n        return rectangle.create.call(this,side,side) ;\n    } ,\n    resize : function(newSize){\n        var oldSize = this.width ;\n        this.width = this.height = newSize ;\n        this.emit('resize',oldSize,newSize) ;\n    }\n}) ;\nvar sq = square.create(5) ;\nsq.on('resize',function(oldSize,newSize){\n    alert('sq resized from ' + oldSize + 'to' + newSize + '.') ;\n}) ;\n\nsq.resize(10) ;\nalert(sq.area()) ;\n```\n\n在Java中是不可能实现上面的程序的，因为它不支持多重继承。相应的你必须另外再创建一个`EventEmitter`类或者使用一个`EventEmitter`接口并且在每个实现该接口的类中分别实现`on`和`emit`方法。当然你在C++中不需要面对这个问题。我们都知道Java sucks(呵呵呵)。\n\n### Mixin的蓝图(Buleprint)\n\n在上面的例子中你肯定注意到`eventEmitter`原型并没有一个`create`方法。这是因为你不应该直接创建一个`eventEmitter`对象。相反`eventEmitter`是用来作为其他原型的原型。这类原型称为mixin。它们等价于抽象类。mixin用来通过提供一系列可重用的方法来扩展对象的功能。\n\n然而有时候mixin需要私有的状态。例如`eventEmitter`如果能够把它的事件监听者列表放在私有变量中而不是放在`this`对象上会安全得多。但是mixin没有`create`方法来封装私有状态。因此我们需要为mixin创建一个蓝图(blueprint)来创建闭包。蓝图(blueprint)看起来会像是构造函数但是它们并不用像构造函数那样使用。例如：\n\n```javascript\nfunction eventEmitter(){\n    var evnets = Object.create(null) ;\n\n    this.on = function(event,listener){\n        if(typeof events[event] !== 'undefined')\n            events[event].push(listener) ;\n        else\n            events[event] = [listener] ;\n    } ;\n    this.emit = function(event){\n        if(typeof events[event] !== 'undefined'){\n            var listeners = events[event] ;\n            var length = listeners.length ,index = length ;\n            var args = Array.prototype.slice.call(arguments,1) ;\n        }\n    } ;\n} ;\n```\n\n一个蓝图用来在一个对象创建之后通过合并来扩展它(我觉得有点像装饰者模式)。[Eric Elliot](http://ericleads.com/)把它们叫做[闭包原型](http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/)。我们可以使用蓝图版本的`eventEmitter`来重写`square`的代码，如下：\n\n```javascript\nvar square = rectangle.extend({\n    create : function(side){\n        var self = rectangle.create.call(this,side,side) ;\n        eventEmitter.call(self) ;\n        return self ;\n    } ,\n    resize : function(newSize){\n        var oldSize = this.width ;\n        this.width = this.height = newSize ;\n        this.emit('resize',oldSize,newSize) ;\n    }\n}) ;\nvar sq = square.create(5) ;\n\nsq.on('resize',function(oldSize,newSize){\n    alert('sq resized from ' + oldSize + 'to' + newSize + '.') ;\n}) ;\n\nsq.resize(10) ;\n\nalert(sq.area()) ;\n```\n\n蓝图在Javascript中是独一无二的。它是一个很强大的特性。然而它们也有自己的缺点。下表列出了mixin和蓝图的优缺点：\n\n|  Mixin  |  蓝图  |\n|-------|------|\n|它们用来扩展对象的原型。因此对象共享同一个原型|它们用来扩展新创建的对象。因此每个对象都是在自己对象本身进行修改|\n|因为缺少封装方法所以不存在私有状态|它们是函数，所以可以封装私有状态|\n|它们是静态原型并且不能被自定义|它们可以传递参数来自定义对象，可以向蓝图函数传递一些用来自定义的参数|\n\n### 修复instanceof操作\n\n许多Javascript程序员会觉得使用原型模式来继承违背了语言的精髓。他们更偏向于构造模式因为他们觉得通过构造函数创建的对象才是真正的实例，因为`instanceof`操作会返回`true`。然而，这个争论是没有意义的，因为`instanceof`操作可以像下面这样实现：\n\n```javascript\nObject.prototype.instanceof = function(prototype){\n\tvar object = this ;\n\tdo{\n\t\tif(object === prototype) return true ;\n\t\tvar object = Object.getPrototypeOf(object) ;\n\t}while(object) ;\n\treturn false ;\n}\n```\n\n这个`instanceof`方法现在可以被用来测试一个对象是否是通过委派从一个原型继承的。例如：\n\n```javascript\nsq.instanceof(square) ;\n```\n\n然而还是没有办法判断一个对象是否是通过合并的方式从一个原型继承的，因为实例的关联信息丢失了。为了解决这个问题我们将一个原型的所有克隆的引用保存在原型自身中，然后使用这个信息来判断一个对象是否是一个原型的实例。这个可以通过修改`extend`方法来实现：\n\n```javascript\nObject.prototype.extend = function(){\n\tvar hasOwnProperty = Object.hasOwnProperty ;\n\tvar object = Object.create(this) ;\n\tvar length = arguments.lenght ;\n\tvar index = length ;\n\n\twhile(index){\n\t\tvar extension = arguments[length - (index--)] ;\n\n\t\tfor(var property in extension){\n\t\t\tif(property !== 'clones' &&\n\t\t\t\thasOwnProperty.call(extension,property) ||\n\t\t\t\ttypeof object[property] === 'undefined')\n\t\t\t\tobject[property] = extension[property] ;\n\n\t\tif(hasOwnProperty.call(extension,'clones')})\n\t\t\textension.clones.unshift(object) ;\n\t\telse\n\t\t\textension.clones = [object] ;\n\t\t}\n\t}\n\treturn object;\n} ;\n```\n\n通过合并继承自原型的对象形成了一个克隆树，这些树从根对象开始然后向下一直到叶子对象。一个克隆链是一个从根对象到叶子对象的单一路径，这跟遍历原型链很相似。我们可以使用这个信息来判断一个对象是否是通过合并继承自一个原型。\n\n```javascript\nObject.prototype.instanceof = function(prototype){\n\tif (Object.hasOwnProperty.call(prototype, \"clones\"))\n\t\tvar clones = prototype.clones;\n\tvar object = this;\n\n\tdo {\n\t\tif (object === prototype ||\n\t\t\tclones && clones.indexOf(object) >= 0)\n\t\t\treturn true;\n\t\tvar object = Object.getPrototypeOf(o  bject);\n\t} while (object);\n\n\treturn false;\n} ;\n```\n\n这个`instanceof`方法现在可以用来判断一个对象是否是通过合并继承自一个原型。例如:\n\n```javascript\nsq.instanceof(eventEmitter);\n```\n\n在上面的程序中`instanceof`会返回`true`如果我妈使用mixin版本的`eventEmitter`。然而如果我们使用蓝图版本的`eventEmitter`它会返回`false`。为了解决这个问题我创建了一个蓝图函数，这个函数接收一个蓝图作为参数，向它添加一个`clones`属性然后返回一个记录了它的克隆的新蓝图：\n\n```javascript\nfunction blueprint(f){\n\tvar g = function(){\n\t\tf.apply(this,arguments) ;\n\t\tg.clones.unshift(this) ;\n\t} ;\n\tg.clones = [] ;\n\treturn g ;\n} ;\nvar eventEmitter = blueprint(function(){\n\tvar events = Object.create(null);\n    this.on = function (event, listener) {\n        if (typeof events[event] !== \"undefined\")\n            events[event].push(listener);\n        else events[event] = [listener];\n    };\n\n    this.emit = function (event) {\n        if (typeof events[event] !== \"undefined\") {\n            var listeners = events[event];\n            var length = listeners.length, index = length;\n            var args = Array.prototype.slice.call(arguments, 1);\n\n            while (index) {\n                var listener = listeners[length - (index--)];\n                listener.apply(this, args);\n            }\n        }\n    };\n}) ;\n```\n\n### 向原型发送变化\n\n上面例子中的`clones`属性有双重作用。它可以用来判断一个对象是否是通过合并继承自一个原型的，然后他可以用来发送原型改变给所有它的克隆。原型继承相比类继承最大的优势就是你可以修改一个原型在它创建之后。为了使克隆可以继承对于原型的修改，我们创建了一个叫做`define`的函数：\n\n```javascript\nObject.prototype.define = function (property, value) {\n    this[property] = value;\n\n    if (Object.hasOwnProperty.call(this, \"clones\")) {\n        var clones = this.clones;\n        var length = clones.length;\n\n        while (length) {\n            var clone = clones[--length];\n            if (typeof clone[property] === \"undefined\")\n                clone.define(property, value);\n        }\n    }\n};\n```\n\n现在我们可以修改原型然后这个修改会反映在所有的克隆上。例如我们可以创建创建一个别名`addEventListener`针对`eventEmitter`上的`on`方法：\n\n```javascript\nvar square = rectangle.extend(eventEmitter, {\n    create: function (side) {\n        return rectangle.create.call(this, side, side);\n    },\n    resize: function (newSize) {\n        var oldSize = this.width;\n        this.width = this.height = newSize;\n        this.emit(\"resize\", oldSize, newSize);\n    }\n});\n\nvar sq = square.create(5);\n\neventEmitter.define(\"addEventListener\", eventEmitter.on);\n\nsq.addEventListener(\"resize\", function (oldSize, newSize) {\n    alert(\"sq resized from \" + oldSize + \" to \" + newSize + \".\");\n});\n\nsq.resize(10);\n\nalert(sq.area());\n```\n\n蓝图需要特别注意。尽管对于蓝图的修改会被发送到它的克隆，但是蓝图的新的克隆并不会反映这些修改。幸运的是这个问题的解决方法很简单。我们只需要对`blueprint`方法进行小小的修改，然后任何对于蓝图的修改就会反映在克隆上了。\n\n```javascript\nfunction blueprint(f) {\n    var g = function () {\n        f.apply(this, arguments);\n        g.clones.unshift(this);\n\n        var hasOwnProperty = Object.hasOwnProperty;\n\n        for (var property in g)\n            if (property !== \"clones\" &&\n                hasOwnProperty.call(g, property))\n                    this[property] = g[property];\n    };\n\n    g.clones = [];\n\n    return g;\n};\n```\n\n## 结论\n\n恭喜你。如果你读完了整篇文章并且理解了我所说的东西，你现在就了解了 原型继承并且为什么它很重要。很感谢你们看完了这篇文章。我希望这个博客能帮到你们。原型继承是强大的并且值得更多的信任。然后大部分人从来不明白这个因为Javascript中的原型继承被构造模式所掩盖了。\n\n## 译者注\n\n这篇文章针对几种继承方式进行了对比。文章中说到的几种扩展的方法我觉得是比较有用的。蓝图(blueprint，这个实在不知道该怎么翻译)的扩展方式比较像设计模式中的装饰者模式，通过函数对对象进行扩展，这个是一种比较好玩的扩展方式，可以跟原型继承配合使用。另外文中提到了`new`关键字的弊端，个人觉得主要的原因还是`new`关键字的出现掩盖了Javascript本身原型继承的特点，人们自然而然就会想到传统的类继承，这样就无法发挥原型继承的最大威力。最后说到的属性修改传播的问题也挺有意思的，应该会有相应的应用场景。总之，我觉得原型继承相比于传统的类继承提供了更大的灵活性，可以给我们开发者提供很大的发挥空间，不过不管怎样，到最后还是要涉及到基本的原型继承的原理上，所以掌握了原型继承的原理就可以根据不同的应用场景使用各种各样的扩展方式。\n\n\n---\n\n> 原文地址：http://aaditmshah.github.io/why-prototypal-inheritance-matters/\n","slug":"why-prototype-important","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvlo001v0povg81qvi9n","content":"<p>五天之前我写了一个关于ES6标准中Class的<a href=\"http://aaditmshah.github.io/standardizing-harmony-classes\" target=\"_blank\" rel=\"external\">文章</a>。在里面我介绍了如何用现有的Javascript来模拟类并且介绍了ES6中类的用法，其实它只是一个语法糖。感谢<a href=\"http://geekyogi.tumblr.com/\" target=\"_blank\" rel=\"external\">Om Shakar</a>以及<a href=\"http://rlemon.github.io/so-chat-javascript-rules/\" target=\"_blank\" rel=\"external\">Javascript Room</a>中的各位，我的编程风格从那时候开始发生了改变；就像<a href=\"http://www.crockford.com/\" target=\"_blank\" rel=\"external\">Dougla Crockford</a>2006年做的一样，我也学习了很多来完全理解基于原型的编程方式。</p>\n<p>Javascript是一个多样化的编程语言。它拥有面向对象和函数式的编程特点，你可以使用任何一种风格来编写代码。然而这两个编程风格并不能很好的融合。例如，你不无法同时使用<code>new</code>(典型的面向对象的特点)和<code>apply</code>(函数式编程的特点).原型继承一直都作为连接这两种风格的桥梁。<br><a id=\"more\"></a></p>\n<h2 id=\"基于类继承的问题\"><a href=\"#基于类继承的问题\" class=\"headerlink\" title=\"基于类继承的问题\"></a>基于类继承的问题</h2><p>大部分Javascript程序员会告诉你基于类的继承不好。然而它们中只有很少一部分知道其中的原因。事实实际上是基于类的基础并没有什么不好。Python是基于类继承的，并且它是一门很好的编程语言。但是，基于类的继承并不适合用于Javascript。Python正确的使用了类，它们只有简单的工厂方法不能当成构造函数使用。而在Javascript中任何函数都可以被当成构造函数使用。</p>\n<p>Javascript中的问题是由于每个函数都可以被当成构造函数使用，所以我们需要区分普通的函数调用和构造函数调用；我们一般使用<code>new</code>关键字来进行区别。然而，这样就破坏了Javascript中的函数式特点，因为<code>new</code>是一个关键字而不是函数。因而函数式的特点无法和对象实例化一起使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">firstname,lastname</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstname = firstname ;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lastname = lastname ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑上面这段程序。你可以通过<code>new</code>关键字来调用<code>Person</code>方法来创建一个函数<code>Person</code>的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>) ;</div></pre></td></tr></table></figure>\n<p>然而，没有任何办法来使用<code>apply</code>方法来为构造函数指定参数列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person.apply(<span class=\"literal\">null</span>,[<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>]);<span class=\"comment\">//error</span></div></pre></td></tr></table></figure>\n<p>但是，如果<code>new</code>是一个方法那么上面的需求就可以通过下面这种方式实现了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> author = Person.new.apply(Person,[<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>]) ;</div></pre></td></tr></table></figure>\n<p>幸运的是，因为Javascript有原型继承，所以我们可以实现一个<code>new</code>的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.new = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functor</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">constructor</span>.apply(this, args); &#125;</div><div class=\"line\">    var args = Array.prototype.slice.call(arguments);</div><div class=\"line\">    functor.prototype = this.prototype;</div><div class=\"line\">    var <span class=\"keyword\">constructor</span> = this;</div><div class=\"line\">    return new functor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在像Java这样对象只能通过<code>new</code>关键字来实例化的语言中，上面这种方式是不可能实现的。</p>\n<p>下面这张表列出了原型继承相比于基于类的基础的优点：</p>\n<table>\n<thead>\n<tr>\n<th>基于类的继承</th>\n<th>原型继承</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类是不可变的。在运行时，你无法修改或者添加新的方法</td>\n<td>原型是灵活的。它们可以是不可变的也可以是可变的</td>\n</tr>\n<tr>\n<td>类可能会不支持多重继承</td>\n<td>对象可以继承多个原型对象</td>\n</tr>\n<tr>\n<td>基于类的继承比较复杂。你需要使用抽象类，接口和final类等等</td>\n<td>原型继承比较简洁。你只有对象，你只需要对对象进行扩展就可以了</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"不要再使用关键词new了\"><a href=\"#不要再使用关键词new了\" class=\"headerlink\" title=\"不要再使用关键词new了\"></a>不要再使用关键词new了</h2><p>到现在你应该知道为什么我觉得<code>new</code>关键字是不会的了吧—你不能把它和函数式特点混合使用。然后，这并不代表你应该停止使用它。<code>new</code>关键字有合理的用处。但是我仍然建议你不要再使用它了。<code>new</code>关键字掩盖了Javascript中真正的原型继承，使得它更像是基于类的继承。就像<a href=\"http://stackoverflow.com/users/419970/raynos\" target=\"_blank\" rel=\"external\">Raynos</a>说的:</p>\n<blockquote>\n<p><code>new</code>是Javascript在为了获得流行度而加入与Java类似的语法时期留下来的一个残留物</p>\n</blockquote>\n<p>Javascript是一个源于<a href=\"http://www.selflanguage.org/\" target=\"_blank\" rel=\"external\">Self</a>的基于原型的语言。然而，为了市场需求，Brendan Eich把它当成Java的小兄弟推出：</p>\n<blockquote>\n<p>并且我们当时把Javascript当成Java的一个小兄弟，就像在微软语言家庭中Visual Basic相对于C++一样。</p>\n</blockquote>\n<p>这个设计决策导致了<code>new</code>的问题。当人们看到Javascript中的<code>new</code>关键字，他们就想到类，然后当他们使用继承时就遇到了傻了。就像Douglas Crockford说的：</p>\n<blockquote>\n<p>这个间接的行为是为了使传统的程序员对这门语言更熟悉，但是却失败了，就像我们看到的很少Java程序员选择了Javascript。Javascript的构造模式并没有吸引传统的人群。它也掩盖了Javascript基于原型的本质。结果就是，很少的程序员知道如何高效的使用这门语言</p>\n</blockquote>\n<p>因此我建议停止使用<code>new</code>关键字。Javascript在传统面向对象假象下面有着更加强大的原型系统。然大部分程序员并没有看见这些还处于黑暗中。</p>\n<h2 id=\"理解原型继承\"><a href=\"#理解原型继承\" class=\"headerlink\" title=\"理解原型继承\"></a>理解原型继承</h2><p>原型继承很简单。在基于原型的语言中你只有对象。没有类。有两种方式来创建一个新对象—“无中生有”对象创建法或者通过现有对象创建。在Javascript中<code>Object.create</code>方法用来创建新的对象。新的对象之后会通过新的属性进行扩展。</p>\n<h3 id=\"“无中生有”对象创建法\"><a href=\"#“无中生有”对象创建法\" class=\"headerlink\" title=\"“无中生有”对象创建法\"></a>“无中生有”对象创建法</h3><p>Javascript中的<code>Object.create</code>方法用来从0开始创建一个对象，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) ;</div></pre></td></tr></table></figure>\n<p>上面例子中新创建的<code>object</code>没有任何属性。</p>\n<h3 id=\"克隆一个现有的对象\"><a href=\"#克隆一个现有的对象\" class=\"headerlink\" title=\"克隆一个现有的对象\"></a>克隆一个现有的对象</h3><p><code>Object.create</code>方法也可以克隆一个现有的对象，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</div><div class=\"line\">    area : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"built_in\">Object</span>.create(rectangle) ;</div></pre></td></tr></table></figure>\n<p>上面例子中<code>rect</code>从<code>rectangle</code>中继承了<code>area</code>方法。同时注意到<code>rectangle</code>是一个对象字面量。对象字面量是一个简洁的方法用来创建一个<code>Object.prototype</code>的克隆然后用新的属性来扩展它。它等价于:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.prototype) ;</div><div class=\"line\">rectangle.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h3 id=\"扩展一个新创建的对象\"><a href=\"#扩展一个新创建的对象\" class=\"headerlink\" title=\"扩展一个新创建的对象\"></a>扩展一个新创建的对象</h3><p>上面的例子中我们克隆了<code>rectangle</code>对象命名为<code>rect</code>，但是在我们使用<code>rect</code>的<code>area</code>方法之前我们需要扩展它的<code>width</code>和<code>height</code>属性，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect.width = <span class=\"number\">5</span> ;</div><div class=\"line\">rect.height = <span class=\"number\">10</span> ;</div><div class=\"line\">alert(rect.area()) ;</div></pre></td></tr></table></figure>\n<p>然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个<code>rectangle</code>对象的克隆上手动定义<code>width</code>和<code>height</code>属性。如果有一个方法能够为我们来完成这些工作就很好了。是不是听起来有点熟悉？确实是。我要来说说构造函数。我们把这个函数叫做<code>create</code>然后在<code>rectangle</code>对象上定义它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">width,height</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">        self.height = height ;</div><div class=\"line\">        self.width = width ;</div><div class=\"line\">        <span class=\"keyword\">return</span> self ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    area : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> rect = rectangle.create(<span class=\"number\">5</span>,<span class=\"number\">10</span>) ;</div><div class=\"line\">alert(rect.area()) ;</div></pre></td></tr></table></figure>\n<h3 id=\"构造函数-VS-原型\"><a href=\"#构造函数-VS-原型\" class=\"headerlink\" title=\"构造函数 VS 原型\"></a>构造函数 VS 原型</h3><p>等等。这看起来很像Javascript中的正常构造模式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle</span>(<span class=\"params\">width, height</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\">Rectangle.prototype.area = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">alert(rect.area());</div></pre></td></tr></table></figure>\n<p>是的，确实很像。为了使得Javascript看起来更像Java原型模式被迫屈服于构造模式。因此每个Javascript中的函数都有一个<code>prototype</code>对象然后可以用来作为构造器(这里构造器的意思应该是说新的对象是在<code>prototype</code>对象的基础上进行构造的)。<code>new</code>关键字允许我们把函数当做构造函数使用。它会克隆构造函数的<code>prototype</code>属性然后把它绑定到<code>this</code>对象中，如果没有显式返回对象则会返回<code>this</code>。</p>\n<p>原型模式和构造模式都是平等的。因此你也许会怀疑为什么有人会困扰于是否应该使用原型模式而不是构造模式。毕竟构造模式比原型模式更加简洁。但是原型模式相比构造模式有许多优势。具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>构造模式</th>\n<th>原型模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数式特点无法与<code>new</code>关键字一起使用</td>\n<td>函数式特点可以与<code>create</code>结合使用</td>\n</tr>\n<tr>\n<td>忘记使用<code>new</code>会导致无法预期的bug并且会污染全局变量</td>\n<td>由于<code>create</code>是一个函数，所以程序总是会按照预期工作</td>\n</tr>\n<tr>\n<td>使用构造函数的原型继承比较复杂并且混乱</td>\n<td>使用原型的原型继承简洁易懂</td>\n</tr>\n</tbody>\n</table>\n<p>最后一点可能需要解释一下。使用构造函数的原型继承相比使用原型的原型继承更加复杂，我们先看看使用原型的原型继承:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"built_in\">Object</span>.create(rectangle);</div><div class=\"line\">square.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">side</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>, side, side);</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>上面的代码很容易理解。首先我们创建一个<code>rectangle</code>的克隆然后命名为<code>square</code>。接着我们用新的<code>create</code>方法重写<code>square</code>对象的<code>create</code>方法。最终我们从新的<code>create</code>方法中调用<code>rectangle</code>的<code>create</code>函数并且返回对象。相反的，使用构造函数的原型继承像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Square</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Rectangle.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\">Square.prototype = <span class=\"built_in\">Object</span>.create(Rectangle.prototype) ;</div><div class=\"line\"></div><div class=\"line\">Square.prototype.constructor = Square ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sq = <span class=\"keyword\">new</span> Square(<span class=\"number\">5</span>) ;</div><div class=\"line\"></div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>当然，构造函数的方式更简单。然后这样的话，向一个不了解情况的人解释原型继承就变得非常困难。如果想一个了解类继承的人解释则会更加困难。</p>\n<p>当使用原型模式时一个对象继承自另一个对象就变得很明显。当使用方法构造模式时就没有这么明显，因为你需要根据其他构造函数来考虑构造继承。</p>\n<h3 id=\"对象创建和扩展相结合\"><a href=\"#对象创建和扩展相结合\" class=\"headerlink\" title=\"对象创建和扩展相结合\"></a>对象创建和扩展相结合</h3><p>在上面的例子中我们创建一个<code>rectangle</code>的克隆然后命名为<code>square</code>。然后我们利用新的<code>create</code>属性扩展它，重写继承自<code>rectangle</code>对象的<code>create</code>方法。如果把这两个操作合并成一个就很好了，就像对象字面量是用来创建<code>Object.prototype</code>的克隆然后用新的属性扩展它。这个操作叫做<code>extend</code>，可以像下面这样实现:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">extension</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property) ||</div><div class=\"line\">            <span class=\"keyword\">typeof</span> obejct[property] === <span class=\"string\">'undefined'</span>)</div><div class=\"line\">            <span class=\"comment\">//这段代码有问题，按照文章意思，这里应该使用深复制，而不是简单的浅复制,deepClone(extension[property],object[property]),deepClone的实现可以看我之前关于继承的博客</span></div><div class=\"line\">            object[properyty] = extension[property] ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> object ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>译者注：我觉得博主这里的实现有点不符合逻辑，正常<code>extend</code>的实现应该是可以配置当被扩展对象和用来扩展的对象属性重复时是否覆盖原有属性，而博主的实现就只是简单的覆盖。同时博主的实现在<code>if</code>判断中的做法个人觉得是值得学习的，首先判断<code>extension</code>属性是否是对象自身的，如果是就直接复制到<code>object</code>上，否则再判断<code>object</code>上是否有这个属性，如果没有那么也会把属性复制到<code>object</code>上，这种实现的结果就使得被扩展的对象不仅仅只扩展了<code>extension</code>中的属性，还包括了<code>extension</code>原型中的属性。不难理解，<code>extension</code>原型中的属性会在<code>extension</code>中表现出来，所以它们也应该作为<code>extension</code>所具有的特性而被用来扩展<code>object</code>。所以我对这个方法进行了改写:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">extension,override</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property) ||</div><div class=\"line\">            <span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(object[property] !== <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(override)&#123;</div><div class=\"line\">                    deepClone(extension[property],object[property]) ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                deepClone(extension[property],object[property]) ;</div><div class=\"line\">            &#125;    </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>利用上面的<code>extend</code>方法，我们可以重写<code>square</code>的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(&#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p><code>extend</code>方法是原型继承中唯一需要的操作。它是<code>Object.create</code>函数的超集，因此它可以用在对象的创建和扩展上。因此我们可以用<code>extend</code>来重写<code>rectangle</code>，使得<code>create</code>函数更加结构化看起来就像<a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\" target=\"_blank\" rel=\"external\">模块模式</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">width,height</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.extend(&#123;</div><div class=\"line\">            height : height ,</div><div class=\"line\">            width : width</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rect = rectangle.create(<span class=\"number\">5</span>,<span class=\"number\">10</span>) ;</div><div class=\"line\">alert(rect.area()) ;</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承的两种方法\"><a href=\"#原型继承的两种方法\" class=\"headerlink\" title=\"原型继承的两种方法\"></a>原型继承的两种方法</h3><p>一些人可能已经注意到<code>extend</code>函数返回的对象实际上是继承了两个对象的属性，一个是被扩展的对象，另一个是用来扩展的对象。另外从两个对象继承属性的方式也不一样。第一种情况下是通过委派来继承属性(也就是使用<code>Object.create()</code>来继承属性)，第二种情况下使用合并属性的方式来继承属性。</p>\n<h4 id=\"委派-差异化继承\"><a href=\"#委派-差异化继承\" class=\"headerlink\" title=\"委派(差异化继承)\"></a>委派(差异化继承)</h4><p>很多Javascript程序员对于差别继承比较熟悉。维基百科是这么解释的:</p>\n<blockquote>\n<p>大部分对象是从其他更一般的对象中得到的，只是在一些很小的地方进行了修改。每个对象通常在内部维护一个指向其他对象的引用列表，这些对象就是该对象本身进行差异化继承的对象。</p>\n</blockquote>\n<p>Javascript中的原型继承是基于差异化继承的。每个对象都有个内部指针叫做[[proto]] (在大部分浏览器中可以通过__proto__属性访问)，这个指针指向对象的原型。多个对象之间通过内部[[proto]]属性链接起来形成了原型链，链的最后指向<code>null</code>。</p>\n<p>当你试图获取一个对象的属性时Javascript引擎会首先查找对象自身的属性。如果在对象上没找到该属性，那么它就会去对象的原型中去查找。以此类推，它会沿着原型链一直查找知道找到或者到原型链的末尾。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">object,property</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">Object</span>.hasOwnProperty.call(object,property))&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> prototype = <span class=\"built_in\">Object</span>.getPrototypeOf(object) ;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prototype) <span class=\"keyword\">return</span> get(prototype,property) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> object[property] ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Javascript中属性查找的过程就像上面的程序那样。</p>\n<h4 id=\"克隆-合并式继承\"><a href=\"#克隆-合并式继承\" class=\"headerlink\" title=\"克隆(合并式继承)\"></a>克隆(合并式继承)</h4><p>大多数Javascript程序员会觉得复制一个对象的属性到另一个对象上并不是一个正确的继承的方式，因为任何对原始对象的修改都不会反映在克隆的对象上。五天前我会同意这个观点。然而现在我相信合并式继承是原型继承的一种正确方式。对于原始对象的修改可以发送到它的副本来实现真正的原型继承。</p>\n<p>合并式继承和代理有他们的优点和缺点。下表列出了它们的优缺点:</p>\n<table>\n<thead>\n<tr>\n<th>代理</th>\n<th>合并</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>任何对于原型的修改都会反映在所有副本上</td>\n<td>任何对于原型的修改都需要手动更新到副本中</td>\n</tr>\n<tr>\n<td>属性查找效率较低因为需要进行原型链查找</td>\n<td>属性查找更搞笑因为继承的属性是通过复制的方式附加在对象本身的</td>\n</tr>\n<tr>\n<td>使用<code>Object.create()</code>方法只能继承单一对象</td>\n<td>对象可以从任意数量的对象中通过复制继承属性</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"从多个原型继承\"><a href=\"#从多个原型继承\" class=\"headerlink\" title=\"从多个原型继承\"></a>从多个原型继承</h3><p>上表中最后一点告诉我们对象可以通过合并的方式从多个原型中继承属性。这是一个重要的特点因为这证明原型继承比Java中的类继承更强大并且与C++中的类继承一样强大。为了实现多重继承，你只需要修改<code>extend</code>方法来从多个原型中复制属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length ;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = length ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(index)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> extension = <span class=\"built_in\">arguments</span>[length - (index--)] ;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property)||</div><div class=\"line\">                <span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">                <span class=\"comment\">//这里同样应该使用深复制</span></div><div class=\"line\">                object[property] = extension[property] ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> object;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>多重继承是非常有用的因为它提高了代码的可重用性和模块化。对象通过委派继承一个原型对象然后通过合并继承其他属性。比如说你有一个事件发射器的原型，像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = &#123;</div><div class=\"line\">    on : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,listener</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[event] !== <span class=\"string\">'undefined'</span>)</div><div class=\"line\">            <span class=\"keyword\">this</span>[event].push(listener) ;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">this</span>[event] = [listener] ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    emit : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[event] !== <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> listeners = <span class=\"keyword\">this</span>[event] ;</div><div class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length,index = length ;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>) ;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span>(index)&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> listener = listeners[length - (index--)] ;</div><div class=\"line\">                listener.apply(<span class=\"keyword\">this</span>,args) ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>现在你希望<code>square</code>表现得像一个事件发射器。因为<code>square</code>已经通过委派的方式继承了<code>rectangle</code>，所以它必须通过合并的方式继承<code>eventEmitter</code>。这个修改可以很容易地通过使用<code>extend</code>方法实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(eventEmitter,&#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    resize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newSize</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'resize'</span>,oldSize,newSize) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\">sq.on(<span class=\"string\">'resize'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldSize,newSize</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'sq resized from '</span> + oldSize + <span class=\"string\">'to'</span> + newSize + <span class=\"string\">'.'</span>) ;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"></div><div class=\"line\">sq.resize(<span class=\"number\">10</span>) ;</div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>在Java中是不可能实现上面的程序的，因为它不支持多重继承。相应的你必须另外再创建一个<code>EventEmitter</code>类或者使用一个<code>EventEmitter</code>接口并且在每个实现该接口的类中分别实现<code>on</code>和<code>emit</code>方法。当然你在C++中不需要面对这个问题。我们都知道Java sucks(呵呵呵)。</p>\n<h3 id=\"Mixin的蓝图-Buleprint\"><a href=\"#Mixin的蓝图-Buleprint\" class=\"headerlink\" title=\"Mixin的蓝图(Buleprint)\"></a>Mixin的蓝图(Buleprint)</h3><p>在上面的例子中你肯定注意到<code>eventEmitter</code>原型并没有一个<code>create</code>方法。这是因为你不应该直接创建一个<code>eventEmitter</code>对象。相反<code>eventEmitter</code>是用来作为其他原型的原型。这类原型称为mixin。它们等价于抽象类。mixin用来通过提供一系列可重用的方法来扩展对象的功能。</p>\n<p>然而有时候mixin需要私有的状态。例如<code>eventEmitter</code>如果能够把它的事件监听者列表放在私有变量中而不是放在<code>this</code>对象上会安全得多。但是mixin没有<code>create</code>方法来封装私有状态。因此我们需要为mixin创建一个蓝图(blueprint)来创建闭包。蓝图(blueprint)看起来会像是构造函数但是它们并不用像构造函数那样使用。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventEmitter</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> evnets = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,listener</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">'undefined'</span>)</div><div class=\"line\">            events[event].push(listener) ;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            events[event] = [listener] ;</div><div class=\"line\">    &#125; ;</div><div class=\"line\">    <span class=\"keyword\">this</span>.emit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> listeners = events[event] ;</div><div class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length ,index = length ;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>) ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>一个蓝图用来在一个对象创建之后通过合并来扩展它(我觉得有点像装饰者模式)。<a href=\"http://ericleads.com/\" target=\"_blank\" rel=\"external\">Eric Elliot</a>把它们叫做<a href=\"http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/\" target=\"_blank\" rel=\"external\">闭包原型</a>。我们可以使用蓝图版本的<code>eventEmitter</code>来重写<code>square</code>的代码，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(&#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">        eventEmitter.call(self) ;</div><div class=\"line\">        <span class=\"keyword\">return</span> self ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    resize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newSize</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'resize'</span>,oldSize,newSize) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\"></div><div class=\"line\">sq.on(<span class=\"string\">'resize'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldSize,newSize</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'sq resized from '</span> + oldSize + <span class=\"string\">'to'</span> + newSize + <span class=\"string\">'.'</span>) ;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"></div><div class=\"line\">sq.resize(<span class=\"number\">10</span>) ;</div><div class=\"line\"></div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>蓝图在Javascript中是独一无二的。它是一个很强大的特性。然而它们也有自己的缺点。下表列出了mixin和蓝图的优缺点：</p>\n<table>\n<thead>\n<tr>\n<th>Mixin</th>\n<th>蓝图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>它们用来扩展对象的原型。因此对象共享同一个原型</td>\n<td>它们用来扩展新创建的对象。因此每个对象都是在自己对象本身进行修改</td>\n</tr>\n<tr>\n<td>因为缺少封装方法所以不存在私有状态</td>\n<td>它们是函数，所以可以封装私有状态</td>\n</tr>\n<tr>\n<td>它们是静态原型并且不能被自定义</td>\n<td>它们可以传递参数来自定义对象，可以向蓝图函数传递一些用来自定义的参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"修复instanceof操作\"><a href=\"#修复instanceof操作\" class=\"headerlink\" title=\"修复instanceof操作\"></a>修复instanceof操作</h3><p>许多Javascript程序员会觉得使用原型模式来继承违背了语言的精髓。他们更偏向于构造模式因为他们觉得通过构造函数创建的对象才是真正的实例，因为<code>instanceof</code>操作会返回<code>true</code>。然而，这个争论是没有意义的，因为<code>instanceof</code>操作可以像下面这样实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.instanceof = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"keyword\">this</span> ;</div><div class=\"line\">\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(object === prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.getPrototypeOf(object) ;</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span>(object) ;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个<code>instanceof</code>方法现在可以被用来测试一个对象是否是通过委派从一个原型继承的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sq.instanceof(square) ;</div></pre></td></tr></table></figure>\n<p>然而还是没有办法判断一个对象是否是通过合并的方式从一个原型继承的，因为实例的关联信息丢失了。为了解决这个问题我们将一个原型的所有克隆的引用保存在原型自身中，然后使用这个信息来判断一个对象是否是一个原型的实例。这个可以通过修改<code>extend</code>方法来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">\t<span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.lenght ;</div><div class=\"line\">\t<span class=\"keyword\">var</span> index = length ;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>(index)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> extension = <span class=\"built_in\">arguments</span>[length - (index--)] ;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(property !== <span class=\"string\">'clones'</span> &amp;&amp;</div><div class=\"line\">\t\t\t\thasOwnProperty.call(extension,property) ||</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)</div><div class=\"line\">\t\t\t\tobject[property] = extension[property] ;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hasOwnProperty.call(extension,<span class=\"string\">'clones'</span>)&#125;)</div><div class=\"line\">\t\t\textension.clones.unshift(object) ;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\textension.clones = [object] ;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> object;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>通过合并继承自原型的对象形成了一个克隆树，这些树从根对象开始然后向下一直到叶子对象。一个克隆链是一个从根对象到叶子对象的单一路径，这跟遍历原型链很相似。我们可以使用这个信息来判断一个对象是否是通过合并继承自一个原型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.instanceof = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(prototype, <span class=\"string\">\"clones\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> clones = prototype.clones;</div><div class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (object === prototype ||</div><div class=\"line\">\t\t\tclones &amp;&amp; clones.indexOf(object) &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.getPrototypeOf(o  bject);</div><div class=\"line\">\t&#125; <span class=\"keyword\">while</span> (object);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>这个<code>instanceof</code>方法现在可以用来判断一个对象是否是通过合并继承自一个原型。例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sq.instanceof(eventEmitter);</div></pre></td></tr></table></figure>\n<p>在上面的程序中<code>instanceof</code>会返回<code>true</code>如果我妈使用mixin版本的<code>eventEmitter</code>。然而如果我们使用蓝图版本的<code>eventEmitter</code>它会返回<code>false</code>。为了解决这个问题我创建了一个蓝图函数，这个函数接收一个蓝图作为参数，向它添加一个<code>clones</code>属性然后返回一个记录了它的克隆的新蓝图：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blueprint</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\tf.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">\t\tg.clones.unshift(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">\t&#125; ;</div><div class=\"line\">\tg.clones = [] ;</div><div class=\"line\">\t<span class=\"keyword\">return</span> g ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = blueprint(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, listener</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">            events[event].push(listener);</div><div class=\"line\">        <span class=\"keyword\">else</span> events[event] = [listener];</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.emit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> listeners = events[event];</div><div class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length, index = length;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> listener = listeners[length - (index--)];</div><div class=\"line\">                listener.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure>\n<h3 id=\"向原型发送变化\"><a href=\"#向原型发送变化\" class=\"headerlink\" title=\"向原型发送变化\"></a>向原型发送变化</h3><p>上面例子中的<code>clones</code>属性有双重作用。它可以用来判断一个对象是否是通过合并继承自一个原型的，然后他可以用来发送原型改变给所有它的克隆。原型继承相比类继承最大的优势就是你可以修改一个原型在它创建之后。为了使克隆可以继承对于原型的修改，我们创建了一个叫做<code>define</code>的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.define = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">property, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[property] = value;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(<span class=\"keyword\">this</span>, <span class=\"string\">\"clones\"</span>)) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> clones = <span class=\"keyword\">this</span>.clones;</div><div class=\"line\">        <span class=\"keyword\">var</span> length = clones.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (length) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> clone = clones[--length];</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> clone[property] === <span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">                clone.define(property, value);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在我们可以修改原型然后这个修改会反映在所有的克隆上。例如我们可以创建创建一个别名<code>addEventListener</code>针对<code>eventEmitter</code>上的<code>on</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(eventEmitter, &#123;</div><div class=\"line\">    create: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">side</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>, side, side);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    resize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newSize</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width;</div><div class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize;</div><div class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">\"resize\"</span>, oldSize, newSize);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">eventEmitter.define(<span class=\"string\">\"addEventListener\"</span>, eventEmitter.on);</div><div class=\"line\"></div><div class=\"line\">sq.addEventListener(<span class=\"string\">\"resize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oldSize, newSize</span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"sq resized from \"</span> + oldSize + <span class=\"string\">\" to \"</span> + newSize + <span class=\"string\">\".\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">sq.resize(<span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">alert(sq.area());</div></pre></td></tr></table></figure>\n<p>蓝图需要特别注意。尽管对于蓝图的修改会被发送到它的克隆，但是蓝图的新的克隆并不会反映这些修改。幸运的是这个问题的解决方法很简单。我们只需要对<code>blueprint</code>方法进行小小的修改，然后任何对于蓝图的修改就会反映在克隆上了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blueprint</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        f.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        g.clones.unshift(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> g)</div><div class=\"line\">            <span class=\"keyword\">if</span> (property !== <span class=\"string\">\"clones\"</span> &amp;&amp;</div><div class=\"line\">                hasOwnProperty.call(g, property))</div><div class=\"line\">                    <span class=\"keyword\">this</span>[property] = g[property];</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    g.clones = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> g;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>恭喜你。如果你读完了整篇文章并且理解了我所说的东西，你现在就了解了 原型继承并且为什么它很重要。很感谢你们看完了这篇文章。我希望这个博客能帮到你们。原型继承是强大的并且值得更多的信任。然后大部分人从来不明白这个因为Javascript中的原型继承被构造模式所掩盖了。</p>\n<h2 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注\"></a>译者注</h2><p>这篇文章针对几种继承方式进行了对比。文章中说到的几种扩展的方法我觉得是比较有用的。蓝图(blueprint，这个实在不知道该怎么翻译)的扩展方式比较像设计模式中的装饰者模式，通过函数对对象进行扩展，这个是一种比较好玩的扩展方式，可以跟原型继承配合使用。另外文中提到了<code>new</code>关键字的弊端，个人觉得主要的原因还是<code>new</code>关键字的出现掩盖了Javascript本身原型继承的特点，人们自然而然就会想到传统的类继承，这样就无法发挥原型继承的最大威力。最后说到的属性修改传播的问题也挺有意思的，应该会有相应的应用场景。总之，我觉得原型继承相比于传统的类继承提供了更大的灵活性，可以给我们开发者提供很大的发挥空间，不过不管怎样，到最后还是要涉及到基本的原型继承的原理上，所以掌握了原型继承的原理就可以根据不同的应用场景使用各种各样的扩展方式。</p>\n<hr>\n<blockquote>\n<p>原文地址：<a href=\"http://aaditmshah.github.io/why-prototypal-inheritance-matters/\" target=\"_blank\" rel=\"external\">http://aaditmshah.github.io/why-prototypal-inheritance-matters/</a></p>\n</blockquote>\n","excerpt":"<p>五天之前我写了一个关于ES6标准中Class的<a href=\"http://aaditmshah.github.io/standardizing-harmony-classes\">文章</a>。在里面我介绍了如何用现有的Javascript来模拟类并且介绍了ES6中类的用法，其实它只是一个语法糖。感谢<a href=\"http://geekyogi.tumblr.com/\">Om Shakar</a>以及<a href=\"http://rlemon.github.io/so-chat-javascript-rules/\">Javascript Room</a>中的各位，我的编程风格从那时候开始发生了改变；就像<a href=\"http://www.crockford.com/\">Dougla Crockford</a>2006年做的一样，我也学习了很多来完全理解基于原型的编程方式。</p>\n<p>Javascript是一个多样化的编程语言。它拥有面向对象和函数式的编程特点，你可以使用任何一种风格来编写代码。然而这两个编程风格并不能很好的融合。例如，你不无法同时使用<code>new</code>(典型的面向对象的特点)和<code>apply</code>(函数式编程的特点).原型继承一直都作为连接这两种风格的桥梁。<br>","more":"</p>\n<h2 id=\"基于类继承的问题\"><a href=\"#基于类继承的问题\" class=\"headerlink\" title=\"基于类继承的问题\"></a>基于类继承的问题</h2><p>大部分Javascript程序员会告诉你基于类的继承不好。然而它们中只有很少一部分知道其中的原因。事实实际上是基于类的基础并没有什么不好。Python是基于类继承的，并且它是一门很好的编程语言。但是，基于类的继承并不适合用于Javascript。Python正确的使用了类，它们只有简单的工厂方法不能当成构造函数使用。而在Javascript中任何函数都可以被当成构造函数使用。</p>\n<p>Javascript中的问题是由于每个函数都可以被当成构造函数使用，所以我们需要区分普通的函数调用和构造函数调用；我们一般使用<code>new</code>关键字来进行区别。然而，这样就破坏了Javascript中的函数式特点，因为<code>new</code>是一个关键字而不是函数。因而函数式的特点无法和对象实例化一起使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">firstname,lastname</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstname = firstname ;</div><div class=\"line\">    <span class=\"keyword\">this</span>.lastname = lastname ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>考虑上面这段程序。你可以通过<code>new</code>关键字来调用<code>Person</code>方法来创建一个函数<code>Person</code>的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>) ;</div></pre></td></tr></table></figure>\n<p>然而，没有任何办法来使用<code>apply</code>方法来为构造函数指定参数列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person.apply(<span class=\"literal\">null</span>,[<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>]);<span class=\"comment\">//error</span></div></pre></td></tr></table></figure>\n<p>但是，如果<code>new</code>是一个方法那么上面的需求就可以通过下面这种方式实现了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> author = Person.new.apply(Person,[<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>]) ;</div></pre></td></tr></table></figure>\n<p>幸运的是，因为Javascript有原型继承，所以我们可以实现一个<code>new</code>的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.new = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functor</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">constructor</span>.apply(this, args); &#125;</div><div class=\"line\">    var args = Array.prototype.slice.call(arguments);</div><div class=\"line\">    functor.prototype = this.prototype;</div><div class=\"line\">    var <span class=\"keyword\">constructor</span> = this;</div><div class=\"line\">    return new functor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>在像Java这样对象只能通过<code>new</code>关键字来实例化的语言中，上面这种方式是不可能实现的。</p>\n<p>下面这张表列出了原型继承相比于基于类的基础的优点：</p>\n<table>\n<thead>\n<tr>\n<th>基于类的继承</th>\n<th>原型继承</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类是不可变的。在运行时，你无法修改或者添加新的方法</td>\n<td>原型是灵活的。它们可以是不可变的也可以是可变的</td>\n</tr>\n<tr>\n<td>类可能会不支持多重继承</td>\n<td>对象可以继承多个原型对象</td>\n</tr>\n<tr>\n<td>基于类的继承比较复杂。你需要使用抽象类，接口和final类等等</td>\n<td>原型继承比较简洁。你只有对象，你只需要对对象进行扩展就可以了</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"不要再使用关键词new了\"><a href=\"#不要再使用关键词new了\" class=\"headerlink\" title=\"不要再使用关键词new了\"></a>不要再使用关键词new了</h2><p>到现在你应该知道为什么我觉得<code>new</code>关键字是不会的了吧—你不能把它和函数式特点混合使用。然后，这并不代表你应该停止使用它。<code>new</code>关键字有合理的用处。但是我仍然建议你不要再使用它了。<code>new</code>关键字掩盖了Javascript中真正的原型继承，使得它更像是基于类的继承。就像<a href=\"http://stackoverflow.com/users/419970/raynos\">Raynos</a>说的:</p>\n<blockquote>\n<p><code>new</code>是Javascript在为了获得流行度而加入与Java类似的语法时期留下来的一个残留物</p>\n</blockquote>\n<p>Javascript是一个源于<a href=\"http://www.selflanguage.org/\">Self</a>的基于原型的语言。然而，为了市场需求，Brendan Eich把它当成Java的小兄弟推出：</p>\n<blockquote>\n<p>并且我们当时把Javascript当成Java的一个小兄弟，就像在微软语言家庭中Visual Basic相对于C++一样。</p>\n</blockquote>\n<p>这个设计决策导致了<code>new</code>的问题。当人们看到Javascript中的<code>new</code>关键字，他们就想到类，然后当他们使用继承时就遇到了傻了。就像Douglas Crockford说的：</p>\n<blockquote>\n<p>这个间接的行为是为了使传统的程序员对这门语言更熟悉，但是却失败了，就像我们看到的很少Java程序员选择了Javascript。Javascript的构造模式并没有吸引传统的人群。它也掩盖了Javascript基于原型的本质。结果就是，很少的程序员知道如何高效的使用这门语言</p>\n</blockquote>\n<p>因此我建议停止使用<code>new</code>关键字。Javascript在传统面向对象假象下面有着更加强大的原型系统。然大部分程序员并没有看见这些还处于黑暗中。</p>\n<h2 id=\"理解原型继承\"><a href=\"#理解原型继承\" class=\"headerlink\" title=\"理解原型继承\"></a>理解原型继承</h2><p>原型继承很简单。在基于原型的语言中你只有对象。没有类。有两种方式来创建一个新对象—“无中生有”对象创建法或者通过现有对象创建。在Javascript中<code>Object.create</code>方法用来创建新的对象。新的对象之后会通过新的属性进行扩展。</p>\n<h3 id=\"“无中生有”对象创建法\"><a href=\"#“无中生有”对象创建法\" class=\"headerlink\" title=\"“无中生有”对象创建法\"></a>“无中生有”对象创建法</h3><p>Javascript中的<code>Object.create</code>方法用来从0开始创建一个对象，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) ;</div></pre></td></tr></table></figure>\n<p>上面例子中新创建的<code>object</code>没有任何属性。</p>\n<h3 id=\"克隆一个现有的对象\"><a href=\"#克隆一个现有的对象\" class=\"headerlink\" title=\"克隆一个现有的对象\"></a>克隆一个现有的对象</h3><p><code>Object.create</code>方法也可以克隆一个现有的对象，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</div><div class=\"line\">    area : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"built_in\">Object</span>.create(rectangle) ;</div></pre></td></tr></table></figure>\n<p>上面例子中<code>rect</code>从<code>rectangle</code>中继承了<code>area</code>方法。同时注意到<code>rectangle</code>是一个对象字面量。对象字面量是一个简洁的方法用来创建一个<code>Object.prototype</code>的克隆然后用新的属性来扩展它。它等价于:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.prototype) ;</div><div class=\"line\">rectangle.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<h3 id=\"扩展一个新创建的对象\"><a href=\"#扩展一个新创建的对象\" class=\"headerlink\" title=\"扩展一个新创建的对象\"></a>扩展一个新创建的对象</h3><p>上面的例子中我们克隆了<code>rectangle</code>对象命名为<code>rect</code>，但是在我们使用<code>rect</code>的<code>area</code>方法之前我们需要扩展它的<code>width</code>和<code>height</code>属性，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">rect.width = <span class=\"number\">5</span> ;</div><div class=\"line\">rect.height = <span class=\"number\">10</span> ;</div><div class=\"line\">alert(rect.area()) ;</div></pre></td></tr></table></figure>\n<p>然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个<code>rectangle</code>对象的克隆上手动定义<code>width</code>和<code>height</code>属性。如果有一个方法能够为我们来完成这些工作就很好了。是不是听起来有点熟悉？确实是。我要来说说构造函数。我们把这个函数叫做<code>create</code>然后在<code>rectangle</code>对象上定义它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">width,height</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">        self.height = height ;</div><div class=\"line\">        self.width = width ;</div><div class=\"line\">        <span class=\"keyword\">return</span> self ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    area : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> rect = rectangle.create(<span class=\"number\">5</span>,<span class=\"number\">10</span>) ;</div><div class=\"line\">alert(rect.area()) ;</div></pre></td></tr></table></figure>\n<h3 id=\"构造函数-VS-原型\"><a href=\"#构造函数-VS-原型\" class=\"headerlink\" title=\"构造函数 VS 原型\"></a>构造函数 VS 原型</h3><p>等等。这看起来很像Javascript中的正常构造模式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle</span>(<span class=\"params\">width, height</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.height = height;</div><div class=\"line\">    <span class=\"keyword\">this</span>.width = width;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\">Rectangle.prototype.area = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">alert(rect.area());</div></pre></td></tr></table></figure>\n<p>是的，确实很像。为了使得Javascript看起来更像Java原型模式被迫屈服于构造模式。因此每个Javascript中的函数都有一个<code>prototype</code>对象然后可以用来作为构造器(这里构造器的意思应该是说新的对象是在<code>prototype</code>对象的基础上进行构造的)。<code>new</code>关键字允许我们把函数当做构造函数使用。它会克隆构造函数的<code>prototype</code>属性然后把它绑定到<code>this</code>对象中，如果没有显式返回对象则会返回<code>this</code>。</p>\n<p>原型模式和构造模式都是平等的。因此你也许会怀疑为什么有人会困扰于是否应该使用原型模式而不是构造模式。毕竟构造模式比原型模式更加简洁。但是原型模式相比构造模式有许多优势。具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>构造模式</th>\n<th>原型模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数式特点无法与<code>new</code>关键字一起使用</td>\n<td>函数式特点可以与<code>create</code>结合使用</td>\n</tr>\n<tr>\n<td>忘记使用<code>new</code>会导致无法预期的bug并且会污染全局变量</td>\n<td>由于<code>create</code>是一个函数，所以程序总是会按照预期工作</td>\n</tr>\n<tr>\n<td>使用构造函数的原型继承比较复杂并且混乱</td>\n<td>使用原型的原型继承简洁易懂</td>\n</tr>\n</tbody>\n</table>\n<p>最后一点可能需要解释一下。使用构造函数的原型继承相比使用原型的原型继承更加复杂，我们先看看使用原型的原型继承:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"built_in\">Object</span>.create(rectangle);</div><div class=\"line\">square.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">side</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>, side, side);</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>上面的代码很容易理解。首先我们创建一个<code>rectangle</code>的克隆然后命名为<code>square</code>。接着我们用新的<code>create</code>方法重写<code>square</code>对象的<code>create</code>方法。最终我们从新的<code>create</code>方法中调用<code>rectangle</code>的<code>create</code>函数并且返回对象。相反的，使用构造函数的原型继承像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Square</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    Rectangle.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\">Square.prototype = <span class=\"built_in\">Object</span>.create(Rectangle.prototype) ;</div><div class=\"line\"></div><div class=\"line\">Square.prototype.constructor = Square ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sq = <span class=\"keyword\">new</span> Square(<span class=\"number\">5</span>) ;</div><div class=\"line\"></div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>当然，构造函数的方式更简单。然后这样的话，向一个不了解情况的人解释原型继承就变得非常困难。如果想一个了解类继承的人解释则会更加困难。</p>\n<p>当使用原型模式时一个对象继承自另一个对象就变得很明显。当使用方法构造模式时就没有这么明显，因为你需要根据其他构造函数来考虑构造继承。</p>\n<h3 id=\"对象创建和扩展相结合\"><a href=\"#对象创建和扩展相结合\" class=\"headerlink\" title=\"对象创建和扩展相结合\"></a>对象创建和扩展相结合</h3><p>在上面的例子中我们创建一个<code>rectangle</code>的克隆然后命名为<code>square</code>。然后我们利用新的<code>create</code>属性扩展它，重写继承自<code>rectangle</code>对象的<code>create</code>方法。如果把这两个操作合并成一个就很好了，就像对象字面量是用来创建<code>Object.prototype</code>的克隆然后用新的属性扩展它。这个操作叫做<code>extend</code>，可以像下面这样实现:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">extension</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property) ||</div><div class=\"line\">            <span class=\"keyword\">typeof</span> obejct[property] === <span class=\"string\">'undefined'</span>)</div><div class=\"line\">            <span class=\"comment\">//这段代码有问题，按照文章意思，这里应该使用深复制，而不是简单的浅复制,deepClone(extension[property],object[property]),deepClone的实现可以看我之前关于继承的博客</span></div><div class=\"line\">            object[properyty] = extension[property] ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> object ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>译者注：我觉得博主这里的实现有点不符合逻辑，正常<code>extend</code>的实现应该是可以配置当被扩展对象和用来扩展的对象属性重复时是否覆盖原有属性，而博主的实现就只是简单的覆盖。同时博主的实现在<code>if</code>判断中的做法个人觉得是值得学习的，首先判断<code>extension</code>属性是否是对象自身的，如果是就直接复制到<code>object</code>上，否则再判断<code>object</code>上是否有这个属性，如果没有那么也会把属性复制到<code>object</code>上，这种实现的结果就使得被扩展的对象不仅仅只扩展了<code>extension</code>中的属性，还包括了<code>extension</code>原型中的属性。不难理解，<code>extension</code>原型中的属性会在<code>extension</code>中表现出来，所以它们也应该作为<code>extension</code>所具有的特性而被用来扩展<code>object</code>。所以我对这个方法进行了改写:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">extension,override</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property) ||</div><div class=\"line\">            <span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(object[property] !== <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(override)&#123;</div><div class=\"line\">                    deepClone(extension[property],object[property]) ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                deepClone(extension[property],object[property]) ;</div><div class=\"line\">            &#125;    </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>利用上面的<code>extend</code>方法，我们可以重写<code>square</code>的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(&#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p><code>extend</code>方法是原型继承中唯一需要的操作。它是<code>Object.create</code>函数的超集，因此它可以用在对象的创建和扩展上。因此我们可以用<code>extend</code>来重写<code>rectangle</code>，使得<code>create</code>函数更加结构化看起来就像<a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\">模块模式</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">width,height</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.extend(&#123;</div><div class=\"line\">            height : height ,</div><div class=\"line\">            width : width</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rect = rectangle.create(<span class=\"number\">5</span>,<span class=\"number\">10</span>) ;</div><div class=\"line\">alert(rect.area()) ;</div></pre></td></tr></table></figure>\n<h3 id=\"原型继承的两种方法\"><a href=\"#原型继承的两种方法\" class=\"headerlink\" title=\"原型继承的两种方法\"></a>原型继承的两种方法</h3><p>一些人可能已经注意到<code>extend</code>函数返回的对象实际上是继承了两个对象的属性，一个是被扩展的对象，另一个是用来扩展的对象。另外从两个对象继承属性的方式也不一样。第一种情况下是通过委派来继承属性(也就是使用<code>Object.create()</code>来继承属性)，第二种情况下使用合并属性的方式来继承属性。</p>\n<h4 id=\"委派-差异化继承\"><a href=\"#委派-差异化继承\" class=\"headerlink\" title=\"委派(差异化继承)\"></a>委派(差异化继承)</h4><p>很多Javascript程序员对于差别继承比较熟悉。维基百科是这么解释的:</p>\n<blockquote>\n<p>大部分对象是从其他更一般的对象中得到的，只是在一些很小的地方进行了修改。每个对象通常在内部维护一个指向其他对象的引用列表，这些对象就是该对象本身进行差异化继承的对象。</p>\n</blockquote>\n<p>Javascript中的原型继承是基于差异化继承的。每个对象都有个内部指针叫做[[proto]] (在大部分浏览器中可以通过__proto__属性访问)，这个指针指向对象的原型。多个对象之间通过内部[[proto]]属性链接起来形成了原型链，链的最后指向<code>null</code>。</p>\n<p>当你试图获取一个对象的属性时Javascript引擎会首先查找对象自身的属性。如果在对象上没找到该属性，那么它就会去对象的原型中去查找。以此类推，它会沿着原型链一直查找知道找到或者到原型链的末尾。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">object,property</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">Object</span>.hasOwnProperty.call(object,property))&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> prototype = <span class=\"built_in\">Object</span>.getPrototypeOf(object) ;</div><div class=\"line\">        <span class=\"keyword\">if</span>(prototype) <span class=\"keyword\">return</span> get(prototype,property) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> object[property] ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>Javascript中属性查找的过程就像上面的程序那样。</p>\n<h4 id=\"克隆-合并式继承\"><a href=\"#克隆-合并式继承\" class=\"headerlink\" title=\"克隆(合并式继承)\"></a>克隆(合并式继承)</h4><p>大多数Javascript程序员会觉得复制一个对象的属性到另一个对象上并不是一个正确的继承的方式，因为任何对原始对象的修改都不会反映在克隆的对象上。五天前我会同意这个观点。然而现在我相信合并式继承是原型继承的一种正确方式。对于原始对象的修改可以发送到它的副本来实现真正的原型继承。</p>\n<p>合并式继承和代理有他们的优点和缺点。下表列出了它们的优缺点:</p>\n<table>\n<thead>\n<tr>\n<th>代理</th>\n<th>合并</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>任何对于原型的修改都会反映在所有副本上</td>\n<td>任何对于原型的修改都需要手动更新到副本中</td>\n</tr>\n<tr>\n<td>属性查找效率较低因为需要进行原型链查找</td>\n<td>属性查找更搞笑因为继承的属性是通过复制的方式附加在对象本身的</td>\n</tr>\n<tr>\n<td>使用<code>Object.create()</code>方法只能继承单一对象</td>\n<td>对象可以从任意数量的对象中通过复制继承属性</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"从多个原型继承\"><a href=\"#从多个原型继承\" class=\"headerlink\" title=\"从多个原型继承\"></a>从多个原型继承</h3><p>上表中最后一点告诉我们对象可以通过合并的方式从多个原型中继承属性。这是一个重要的特点因为这证明原型继承比Java中的类继承更强大并且与C++中的类继承一样强大。为了实现多重继承，你只需要修改<code>extend</code>方法来从多个原型中复制属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length ;</div><div class=\"line\">    <span class=\"keyword\">var</span> index = length ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span>(index)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> extension = <span class=\"built_in\">arguments</span>[length - (index--)] ;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property)||</div><div class=\"line\">                <span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">                <span class=\"comment\">//这里同样应该使用深复制</span></div><div class=\"line\">                object[property] = extension[property] ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> object;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>多重继承是非常有用的因为它提高了代码的可重用性和模块化。对象通过委派继承一个原型对象然后通过合并继承其他属性。比如说你有一个事件发射器的原型，像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = &#123;</div><div class=\"line\">    on : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,listener</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[event] !== <span class=\"string\">'undefined'</span>)</div><div class=\"line\">            <span class=\"keyword\">this</span>[event].push(listener) ;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">this</span>[event] = [listener] ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    emit : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[event] !== <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> listeners = <span class=\"keyword\">this</span>[event] ;</div><div class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length,index = length ;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>) ;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span>(index)&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> listener = listeners[length - (index--)] ;</div><div class=\"line\">                listener.apply(<span class=\"keyword\">this</span>,args) ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>现在你希望<code>square</code>表现得像一个事件发射器。因为<code>square</code>已经通过委派的方式继承了<code>rectangle</code>，所以它必须通过合并的方式继承<code>eventEmitter</code>。这个修改可以很容易地通过使用<code>extend</code>方法实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(eventEmitter,&#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    resize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newSize</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'resize'</span>,oldSize,newSize) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\">sq.on(<span class=\"string\">'resize'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldSize,newSize</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'sq resized from '</span> + oldSize + <span class=\"string\">'to'</span> + newSize + <span class=\"string\">'.'</span>) ;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"></div><div class=\"line\">sq.resize(<span class=\"number\">10</span>) ;</div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>在Java中是不可能实现上面的程序的，因为它不支持多重继承。相应的你必须另外再创建一个<code>EventEmitter</code>类或者使用一个<code>EventEmitter</code>接口并且在每个实现该接口的类中分别实现<code>on</code>和<code>emit</code>方法。当然你在C++中不需要面对这个问题。我们都知道Java sucks(呵呵呵)。</p>\n<h3 id=\"Mixin的蓝图-Buleprint\"><a href=\"#Mixin的蓝图-Buleprint\" class=\"headerlink\" title=\"Mixin的蓝图(Buleprint)\"></a>Mixin的蓝图(Buleprint)</h3><p>在上面的例子中你肯定注意到<code>eventEmitter</code>原型并没有一个<code>create</code>方法。这是因为你不应该直接创建一个<code>eventEmitter</code>对象。相反<code>eventEmitter</code>是用来作为其他原型的原型。这类原型称为mixin。它们等价于抽象类。mixin用来通过提供一系列可重用的方法来扩展对象的功能。</p>\n<p>然而有时候mixin需要私有的状态。例如<code>eventEmitter</code>如果能够把它的事件监听者列表放在私有变量中而不是放在<code>this</code>对象上会安全得多。但是mixin没有<code>create</code>方法来封装私有状态。因此我们需要为mixin创建一个蓝图(blueprint)来创建闭包。蓝图(blueprint)看起来会像是构造函数但是它们并不用像构造函数那样使用。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventEmitter</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> evnets = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) ;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,listener</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">'undefined'</span>)</div><div class=\"line\">            events[event].push(listener) ;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            events[event] = [listener] ;</div><div class=\"line\">    &#125; ;</div><div class=\"line\">    <span class=\"keyword\">this</span>.emit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">'undefined'</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> listeners = events[event] ;</div><div class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length ,index = length ;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>) ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; ;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>一个蓝图用来在一个对象创建之后通过合并来扩展它(我觉得有点像装饰者模式)。<a href=\"http://ericleads.com/\">Eric Elliot</a>把它们叫做<a href=\"http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/\">闭包原型</a>。我们可以使用蓝图版本的<code>eventEmitter</code>来重写<code>square</code>的代码，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(&#123;</div><div class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> self = rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</div><div class=\"line\">        eventEmitter.call(self) ;</div><div class=\"line\">        <span class=\"keyword\">return</span> self ;</div><div class=\"line\">    &#125; ,</div><div class=\"line\">    resize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newSize</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize ;</div><div class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'resize'</span>,oldSize,newSize) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</div><div class=\"line\"></div><div class=\"line\">sq.on(<span class=\"string\">'resize'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldSize,newSize</span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'sq resized from '</span> + oldSize + <span class=\"string\">'to'</span> + newSize + <span class=\"string\">'.'</span>) ;</div><div class=\"line\">&#125;) ;</div><div class=\"line\"></div><div class=\"line\">sq.resize(<span class=\"number\">10</span>) ;</div><div class=\"line\"></div><div class=\"line\">alert(sq.area()) ;</div></pre></td></tr></table></figure>\n<p>蓝图在Javascript中是独一无二的。它是一个很强大的特性。然而它们也有自己的缺点。下表列出了mixin和蓝图的优缺点：</p>\n<table>\n<thead>\n<tr>\n<th>Mixin</th>\n<th>蓝图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>它们用来扩展对象的原型。因此对象共享同一个原型</td>\n<td>它们用来扩展新创建的对象。因此每个对象都是在自己对象本身进行修改</td>\n</tr>\n<tr>\n<td>因为缺少封装方法所以不存在私有状态</td>\n<td>它们是函数，所以可以封装私有状态</td>\n</tr>\n<tr>\n<td>它们是静态原型并且不能被自定义</td>\n<td>它们可以传递参数来自定义对象，可以向蓝图函数传递一些用来自定义的参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"修复instanceof操作\"><a href=\"#修复instanceof操作\" class=\"headerlink\" title=\"修复instanceof操作\"></a>修复instanceof操作</h3><p>许多Javascript程序员会觉得使用原型模式来继承违背了语言的精髓。他们更偏向于构造模式因为他们觉得通过构造函数创建的对象才是真正的实例，因为<code>instanceof</code>操作会返回<code>true</code>。然而，这个争论是没有意义的，因为<code>instanceof</code>操作可以像下面这样实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.instanceof = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"keyword\">this</span> ;</div><div class=\"line\">\t<span class=\"keyword\">do</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(object === prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.getPrototypeOf(object) ;</div><div class=\"line\">\t&#125;<span class=\"keyword\">while</span>(object) ;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个<code>instanceof</code>方法现在可以被用来测试一个对象是否是通过委派从一个原型继承的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sq.instanceof(square) ;</div></pre></td></tr></table></figure>\n<p>然而还是没有办法判断一个对象是否是通过合并的方式从一个原型继承的，因为实例的关联信息丢失了。为了解决这个问题我们将一个原型的所有克隆的引用保存在原型自身中，然后使用这个信息来判断一个对象是否是一个原型的实例。这个可以通过修改<code>extend</code>方法来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</div><div class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">\t<span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.lenght ;</div><div class=\"line\">\t<span class=\"keyword\">var</span> index = length ;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span>(index)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> extension = <span class=\"built_in\">arguments</span>[length - (index--)] ;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(property !== <span class=\"string\">'clones'</span> &amp;&amp;</div><div class=\"line\">\t\t\t\thasOwnProperty.call(extension,property) ||</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)</div><div class=\"line\">\t\t\t\tobject[property] = extension[property] ;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(hasOwnProperty.call(extension,<span class=\"string\">'clones'</span>)&#125;)</div><div class=\"line\">\t\t\textension.clones.unshift(object) ;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\textension.clones = [object] ;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> object;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>通过合并继承自原型的对象形成了一个克隆树，这些树从根对象开始然后向下一直到叶子对象。一个克隆链是一个从根对象到叶子对象的单一路径，这跟遍历原型链很相似。我们可以使用这个信息来判断一个对象是否是通过合并继承自一个原型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.instanceof = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(prototype, <span class=\"string\">\"clones\"</span>))</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> clones = prototype.clones;</div><div class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (object === prototype ||</div><div class=\"line\">\t\t\tclones &amp;&amp; clones.indexOf(object) &gt;= <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.getPrototypeOf(o  bject);</div><div class=\"line\">\t&#125; <span class=\"keyword\">while</span> (object);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125; ;</div></pre></td></tr></table></figure>\n<p>这个<code>instanceof</code>方法现在可以用来判断一个对象是否是通过合并继承自一个原型。例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sq.instanceof(eventEmitter);</div></pre></td></tr></table></figure>\n<p>在上面的程序中<code>instanceof</code>会返回<code>true</code>如果我妈使用mixin版本的<code>eventEmitter</code>。然而如果我们使用蓝图版本的<code>eventEmitter</code>它会返回<code>false</code>。为了解决这个问题我创建了一个蓝图函数，这个函数接收一个蓝图作为参数，向它添加一个<code>clones</code>属性然后返回一个记录了它的克隆的新蓝图：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blueprint</span>(<span class=\"params\">f</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\tf.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</div><div class=\"line\">\t\tg.clones.unshift(<span class=\"keyword\">this</span>) ;</div><div class=\"line\">\t&#125; ;</div><div class=\"line\">\tg.clones = [] ;</div><div class=\"line\">\t<span class=\"keyword\">return</span> g ;</div><div class=\"line\">&#125; ;</div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = blueprint(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, listener</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">            events[event].push(listener);</div><div class=\"line\">        <span class=\"keyword\">else</span> events[event] = [listener];</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.emit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> listeners = events[event];</div><div class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length, index = length;</div><div class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> listener = listeners[length - (index--)];</div><div class=\"line\">                listener.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;) ;</div></pre></td></tr></table></figure>\n<h3 id=\"向原型发送变化\"><a href=\"#向原型发送变化\" class=\"headerlink\" title=\"向原型发送变化\"></a>向原型发送变化</h3><p>上面例子中的<code>clones</code>属性有双重作用。它可以用来判断一个对象是否是通过合并继承自一个原型的，然后他可以用来发送原型改变给所有它的克隆。原型继承相比类继承最大的优势就是你可以修改一个原型在它创建之后。为了使克隆可以继承对于原型的修改，我们创建了一个叫做<code>define</code>的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.define = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">property, value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>[property] = value;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(<span class=\"keyword\">this</span>, <span class=\"string\">\"clones\"</span>)) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> clones = <span class=\"keyword\">this</span>.clones;</div><div class=\"line\">        <span class=\"keyword\">var</span> length = clones.length;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">while</span> (length) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> clone = clones[--length];</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> clone[property] === <span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">                clone.define(property, value);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在我们可以修改原型然后这个修改会反映在所有的克隆上。例如我们可以创建创建一个别名<code>addEventListener</code>针对<code>eventEmitter</code>上的<code>on</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(eventEmitter, &#123;</div><div class=\"line\">    create: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">side</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>, side, side);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    resize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newSize</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width;</div><div class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize;</div><div class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">\"resize\"</span>, oldSize, newSize);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">eventEmitter.define(<span class=\"string\">\"addEventListener\"</span>, eventEmitter.on);</div><div class=\"line\"></div><div class=\"line\">sq.addEventListener(<span class=\"string\">\"resize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oldSize, newSize</span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">\"sq resized from \"</span> + oldSize + <span class=\"string\">\" to \"</span> + newSize + <span class=\"string\">\".\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">sq.resize(<span class=\"number\">10</span>);</div><div class=\"line\"></div><div class=\"line\">alert(sq.area());</div></pre></td></tr></table></figure>\n<p>蓝图需要特别注意。尽管对于蓝图的修改会被发送到它的克隆，但是蓝图的新的克隆并不会反映这些修改。幸运的是这个问题的解决方法很简单。我们只需要对<code>blueprint</code>方法进行小小的修改，然后任何对于蓝图的修改就会反映在克隆上了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blueprint</span>(<span class=\"params\">f</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        f.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        g.clones.unshift(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> g)</div><div class=\"line\">            <span class=\"keyword\">if</span> (property !== <span class=\"string\">\"clones\"</span> &amp;&amp;</div><div class=\"line\">                hasOwnProperty.call(g, property))</div><div class=\"line\">                    <span class=\"keyword\">this</span>[property] = g[property];</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    g.clones = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> g;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>恭喜你。如果你读完了整篇文章并且理解了我所说的东西，你现在就了解了 原型继承并且为什么它很重要。很感谢你们看完了这篇文章。我希望这个博客能帮到你们。原型继承是强大的并且值得更多的信任。然后大部分人从来不明白这个因为Javascript中的原型继承被构造模式所掩盖了。</p>\n<h2 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注\"></a>译者注</h2><p>这篇文章针对几种继承方式进行了对比。文章中说到的几种扩展的方法我觉得是比较有用的。蓝图(blueprint，这个实在不知道该怎么翻译)的扩展方式比较像设计模式中的装饰者模式，通过函数对对象进行扩展，这个是一种比较好玩的扩展方式，可以跟原型继承配合使用。另外文中提到了<code>new</code>关键字的弊端，个人觉得主要的原因还是<code>new</code>关键字的出现掩盖了Javascript本身原型继承的特点，人们自然而然就会想到传统的类继承，这样就无法发挥原型继承的最大威力。最后说到的属性修改传播的问题也挺有意思的，应该会有相应的应用场景。总之，我觉得原型继承相比于传统的类继承提供了更大的灵活性，可以给我们开发者提供很大的发挥空间，不过不管怎样，到最后还是要涉及到基本的原型继承的原理上，所以掌握了原型继承的原理就可以根据不同的应用场景使用各种各样的扩展方式。</p>\n<hr>\n<blockquote>\n<p>原文地址：<a href=\"http://aaditmshah.github.io/why-prototypal-inheritance-matters/\">http://aaditmshah.github.io/why-prototypal-inheritance-matters/</a></p>\n</blockquote>"},{"title":"(译)深入理解Promise五部曲：5.LEGO","date":"2014-07-19T06:44:48.000Z","_content":"在[Part4:扩展问题](/#/blog/2014/07/09/understand-promise-4/)中，我讨论了如何扩展和抽象Promise是多么的常见，以及这中间的一些问题。但是为什么promise对于开发者来说不是足够友好的呢？这就是它的设计用意吗？\n<!-- more -->\n#I've Got Friends In Low Places\nPromise被设计为低级别的构建块。一个promise就像一个乐高玩具。单个乐高只是一个有趣的玩具。但是如果把它们拼在一起，你会感受到更多的乐趣。\n问题是promise不是你小时候玩儿的那个有趣LEGO，它们不是充满想象力的打气筒，也不是Gandalf mini-figure(一种乐高玩具)。\n都不是，promise只是你的简单老旧的4X2的砖块。\n这并不是使它们非常有用。但是它们是你箱子中最重要的组成部分之一。当它们彼此分开时它们只是这么个东西，但是当把它们整合在一起它们就会散发出光芒。\n换句话说，promise本质上是一个构建在真实用户之上的低级别的API。这是对的：**promise并不是给开发者使用的**，它们是给库作者使用的。\n你会从它们那收益许多，但是你很可能不是直接使用它们。你将会使用的是经过许多库组合包装之后的结果。\n#控制 VS 值\n请允许我矫正第一个最大的关于promise的误解：**它们不是真正关于流程控制的**。\npromise当然可以链接在一起来变成近似异步流程控制的东西。但是最后证明它们并不像你想象的那样擅长这个任务。\npromises确实只是一个值的容器。这个值可能现在就存在也可能是未来的一个值。但是不管怎样，它只是一个值。\n这是promise最有意义的好处之一。它们在值的上面创建了一个强大的抽象使得值不再是暂存的东西。换句话说，不管那个值现在是否存在，你都可以用同样的方式使用promise。在这个系列的[第三部分](/#/blog/2014/07/02/understand-promise-3/)中，我讨论过promise必须是不可变的，它们作为值的意义也是基于这个特点的。\npromises就像状态的小型的自包含的表现方式。它们是可组合的，也就意味着你全部的程序可以用它们来表示。\n\n# 限制\n就像你不能奢望一个单独的4X2的乐高可以变成一个跑车，让promise成为你的异步流程控制机制也是一种奢望。\n那么promises作为一个非暂存的不可变的值对于解决异步任务意味着什么呢？在它们设计哲学的约束中，有它们擅长并且可以有帮助的东西。\n在剩下的内容中，我会讨论这个限制。但是我并不打算作为一个promise的批判者。我试图去强调扩展和抽象的重要性。\n## 错误处理\n当我说promise只是一个值的容器的时候我撒了个小慌。实际上，它是一个成功值或者失败信息的容器。在任何时候，一个promise是一个未来的成功值或者在获取这个值时的失败信息。不会超过这两种情况。\n在某种意义上说，一个promise是一个决策结构，一个`if..then..else`。其他人喜欢把它想成一个`try..catch`结构。不管是哪种理解，你就像在说\"请求一个值，不管成功还是失败\"。\n就像尤达说，\"Do or do not, there is no try.\"。\n考虑下面这个情况：\n```javascript\nfunction ajax(url) {\n    return new Promise( function(resolve,reject){\n        // make some ajax request\n        // if you get a response, `resolve( answer )`\n        // if it fails, `reject( excuses )`\n    } );\n}\n\najax( \"http://TheMeaningOfLife.com\" )\n.then(\n    winAtLife,\n    keepSearching\n);\n```\n看到`winAtLife()`和`keepSearching()`函数了吗？我们在说，\"去问问生命的意义，不管你有没有找到答案，我们都继续\"。\n如果我们不传入`keepSearching`会怎样？除了作为一个乐观主义者假设你会找到答案然后在生命长河中取胜，这里会有什么危险呢？\n如果promise没有找到生命的意义（或者如果在处理答案的过程中发生了javascript异常），它会默默地保留着错误的事实，也许会永远保留着。就算你等上一百万年，你都不会知道对于答案的请求失败了。\n你只能通过观察才能知道它失败了。这可能需要深入到形而上学或者量子学的东西。让我们停止在这吧。\n所以不带失败处理函数的promise是一个会默默地失败的promise。这并不好。这意味着如果你忘记了，你会陷入失败的陷阱而不是成功。\n所以你会怀疑：为什么promises会忽略失败处理函数呢？因为你可能现在不在意失败的情况，只有以后某个时刻会关心。我们程序的暂时性意味着系统现在不会知道你以后会想做什么。现在忽略失败处理函数也许对你来说是正合适的，因为你知道你会把这个promise链接到另一个promise，并且那个promise有一个失败处理函数。\n所以promise机制让你可以创建不需要监听失败的promise。\n这里有一个很微妙的问题，很可能也是大多数刚接触promise的开发者会碰到的问题。\n## 束缚我们的链子\n为了理解这个问题，我们首先需要理解promises是如何链接在一起的。我认为你会很快明白promise链是强大并且有一点复杂的。\n```javascript\najax( \"http://TheMeaningOfLife.com\" )\n.then(\n    winAtLife,\n    keepSearching\n)\n// a second promise returned here that we ignored!\n;\n```\n`ajax(..)`调用产生了第一个promise，然后`then(..)`调用产生了第二个promise。我们没有捕捉并且观察在这段代码中的第二个promise，但是我们可以。第二个promise是根据第一个promise处理函数如何运行来自动变成fulfilled状态(成功或者失败)。\n第二个promise不会在意第一个promise是成功还是失败。它在意第一个promise的处理函数(不管成功还是失败)。\n这是promise链的关键。但是这有一点不好理解，所以重复读上面那段话直到你理解为止。\n考虑下promise代码通常是怎么写的(通过链):\n```javascript\najax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n```\n这段代码也可以像下面这么写，效果是一样的：\n```javascript\nvar promiseA = ajax( \"..\" );\n\nvar promiseB = promiseA.then( transformResult );\n\nvar promiseC = promiseB.then(\n    displayAnswer,\n    reportError\n);\n\n// we don't use `promiseC` here, but we could...\n```\nPromise A是唯一在意`ajax(..)`结果的promise。\nPromise B只关心Promise A在`transformResult(..)`函数内部是如何处理的(不是Promise A的结果本身),同样的，Promise C只关心Promise B在`displayAnswer(..)`或者`reportError(..)`函数内部是如何处理的(不是Promise B结果本身)。\n再一次，重复读这段话直到理解。\n在`transformResult(..)`内部，如果它立刻完成了它的任务，然后Promise B就会立刻完成，不管成功还是失败。然而，如果`transformResult(..)`不能立刻完成，而是创建它自己的promise，我们称它为Promise H1('H'是'hidden',因为它是隐藏在内部的)。原本Promise B返回的等待我们如何处理Promise A的promise，现在概念上被Promise H1替换了(并不是真的替换了，只是被说成一样的)。\n所以，现在当你说`promiseB.then(..)`时，它实际上就像说`promiseH1.then(..)`。如果Promise H1成功了，`displayAnswer(..)`会被调用，但是如果它失败了，`reportError(..)`会被调用。\n这就是promise链是如何工作的。\n但是，如果Promise A(由ajax调用返回)失败了会怎样？`promiseA.then(..)`调用没有注册一个失败处理函数。它会默默地隐藏错误吗？它会的，除了我们链接上Promise B然后在上面注册一个错误处理函数:`reportError(..)`。如果Promise A失败了，`transformResult(..)`不会被调用，并且没有错误处理函数，所以Promise B马上被标记为失败，所以`reportError(..)`会被调用。\n如果Promise A成功了，`transformResult(..)`会被执行，然后当运行`transformResult(..)`时有一个错误会怎样？Promise B被标记为失败，然后`reportError(..)`也会被调用。\n但是这里是危险的地方，这个地方甚至有经验的开发者都会遗漏的！\n如果Promise A成功了(成功的`ajax(..)`)，然后Promise B成功了(成功的`transformResult(..)`)，但是当运行`displayAnswer(..)`时有一个错误会怎样？\n你也许会认为`reportError(..)`会被调用？大多数人会这么想，但是不是的。\n为什么？因为来自`displayAnswer(..)`的一个错误或者失败promise导致一个失败的Promise C。我们监听Promise C失败的情况了吗？仔细看看。没有。\n为了确保你不会漏掉这种错误并且让它默默地隐藏在Promise C状态内部，你也会希望监听Promise C的失败：\n```javascript\nvar promiseC = promiseB.then(\n    displayAnswer,\n    reportError\n);\n\n// need to do this:\npromiseC.then( null, reportError );\n\n// or this:, which is the same thing:\npromiseC.catch( reportError );\n\n// Note: a silently ignored *Promise D* was created here!\n```\nOK,所以现在我们捕获`displayAnswer(..)`内部的错误。不得不去记住这个有一点坑爹。\n## 乌龟\n但是有一个更加微妙的问题！如果当处理`displayAnswer(..)`返回的错误时，`reportError(..)`函数也有一个JS异常会怎样？会有人捕获这个错误吗？没有。\n看！上面有一个隐含的Promise D，并且它会被告知`reportError(..)`内部的异常。\nOMG，你肯定会想。什么时候才能停止？它会这样一直下去吗？\n一些promise库作者认为有必要解决这个问题通过让\"安静的错误\"被作为全局异常抛出。但是这种机制该如何得知你不想再链接promise并且提供一个错误处理函数呢？它如何知道什么时候应该通报一个全局异常或者不通报呢？你肯定不希望当你已经捕获并且处理错误的情况下仍然有很多控制台错误信息。\n在某种意义上，你需要可以标记一个promise为“final”，就像说“这是我链子中的最后一个promise”或者“我不打算再链接了，所以这是乌龟停止的地方”。如果在链的最后发生了错误并且没有被捕获，然后它需要被报告为一个全局异常。\n从表面上我猜测这似乎是很明智的。这种情况下的实现像下面这样：\n```javascript\nvar promiseC = promiseB.then(\n    displayAnswer,\n    reportError\n);\n\npromiseC\n.catch( reportError )\n.done(); // marking the end of the chain\n```\n你仍然需要记住调用`done()`，要不然错误还是会隐藏在最后一个promsie中。你必须使用稳固的错误处理函数。\n\"恶心\"，你肯定会这么想。欢迎来到promises的欢乐世界。\n## Value vs Values\n对于错误处理已经说了很多了。另一个核心promsie的限制是一个promise代表一个单独的值。什么是一个单独的值呢？它是一个对象或者一个数组或者一个字符串或者一个数字。等等，我还可以在一个容器里放入多个值，就像一个数组或对象中的多个元素。Cool！\n一个操作的最终结果不总是一个值，但是promise并不会这样，这很微妙并且又是另一个失败陷阱：\n```javascript\nfunction ajax(url) {\n    return new Promise( function(resolve,reject){\n        // make some ajax request\n        // if you get a response, `resolve( answer, url )`\n        // if it fails, `reject( excuses, url )`\n    } );\n}\n\najax( \"..\" )\n.then(\n    function(answer,url){\n        console.log( answer, url ); // ..  undefined\n    },\n    function(excuses,url){\n        console.log( excuses, url ); // ..  undefined\n    }\n);\n```\n你看出这里面的问题了吗？如果你意外的尝试传递超过一个的值过去，不管传给失败处理函数还是成功处理函数，只有第一个值能被传递过去，其他几个会被默默地丢掉。\n为什么？我相信这和组合的可预测性有关，或者一些其他花哨的词汇有关。\n最后，你不得不记住包裹自己的多个值要不然你就会不知不觉的丢失数据。\n## 并行\n真实世界中的app经常在“同一时间”发生超过一件事情。本质上说，我们需要构建一个处理器，并行处理多个事件，等待它们全部完成再执行回调函数。\n相比于promise问题，这是一个异步流程控制的问题。一个单独的promise不能表达两个或更多并行发生的异步事件。你需要一个抽象层来处理它。\n在计算机科学术语中，这个概念叫做一个“门”。一个等待所有任务完成，并且不关心它们完成顺序的门。\n在promise世界中，我们添加一个API叫做`Promise.all(..)`，它可以构建一个promise来等待所有传递进来的promise完成。\n```javascript\nPromise.all([\n    // these will all proceed \"in parallel\"\n    makePromise1(),\n    makePromise2(),\n    makePromise3()\n])\n.then( .. );\n```\n一个相近的方法是`race()`。它的作用和`all()`一样，除了它只要有一个promise返回消息就执行回调函数，而不等待其他promise的结果。\n当你思考这些方法的时候，你可能会想到许多方式来实现这些方法。`Promise.all(..)`和`Promise.race(..)`是原生提供的，因为这两个方法是很常用到的，但是如果你还需要其他的功能那么你就需要一个库来帮助你了。\n限制的另一个表现就是你很快就会发现你需要自己使用`Array`的相关方法来管理promise列表，比如`.map(..)`和`.reduce(..)`。如果你对map/reduce不熟悉，那么赶紧去熟悉一下，因为你会发现当处理现实世界中promise的时候你经常会需要它们。\n幸运的是，已经有很多库来帮助你了，并且每天还有很多新的库被创造出来。\n## Single Shot Of Espresso，Please！\n另一个关于promise的事情是它们只会运行一次，然后就不用了。\n如果你只需要处理单个事件，比如初始化一个也没或者资源加载，那么这样没什么问题。但是如果你有一个重复的事件(比如用户点击按钮)，你每次都需要执行一系列异步操作会怎么样呢？\nPromise并不提供这样的功能，因为它们是不可变的，也就是不能被重置。要重复同样的promise，唯一的方法就是重新定义一个promise。\n```javascript\n$(\"#my_button\").click(function(evt){\n    doTask1( evt.target )\n    .then( doTask2 )\n    .then( doTask3 )\n    .catch( handleError );\n});\n```\n太恶心了，不仅仅是因为重复创建promise对于效率有影响，而且它对于职责分散不利。你不得不把多个事件监听函数放在同一个函数中。如果有一个方式来改变这种情况就好了，这样事件监听和事件处理函数就能够分开了。\nMicrosoft的RxJS库把这种方式叫做\"观察者模式\"。\n我的*asynquence*库有一个`react(..)`方法通过简单的方式提供了一个类似的功能。\n\n## 盲区...\n在一个已经被使用回调函数的API占据的世界中，把promise插入到代码中比我们想象的要困难。考虑下面这段代码：\n```javascript\nfunction myAjax(url) {\n    return new Promise( function(resolve,reject){\n        ajax( url, function(err,response){\n            if (err) {\n                reject( err );\n            }\n            else {\n                resolve( response );\n            }\n        } )\n    } );\n}\n```\n我认为promise解决了回调地狱的问题，但是它们代码看起来仍然像垃圾。\n我们需要抽象层来使得用promise表示回调变得更简单。原生的promise并没有提供这个抽象层，所以结果就是通过原生promise写出来的代码还是很丑陋。但是如果有抽象层那么事情就变得很简单了。\n例如，我的*asynquence*库提供了一个`errfcb()`[插件](https://github.com/getify/asynquence/tree/master/contrib#errfcb-plugin)(error-first callback)，用它可以构建一个回调来处理下面这种场景:\n```javascript\nfunction myAjax(url) {\n    var sq = ASQ();\n    ajax( url, sq.errfcb() );\n    return sq;\n}\n```\n## Stop The Presses!\n有时，你想要取消一个promise而去做别的事情，但是如果现在你的promise正处在挂起状态会怎样呢？\n```javascript\nvar pr = ajax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n\n// Later\npr.cancel(); //  <-- doesn't work!\n```\n所以，为了取消promise，你需要引入一下东西：\n```javascript\nfunction transformResult(data) {\n    if (!pr.ignored) {\n        // do something!\n    }\n}\n\nvar pr = ajax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n\n// Later\npr.ignored = true; // just hacking around\n```\n换句话说，你为了能够取消你的promise，在promise上面加了一层来处理这种情况。\n你不能从promise取消注册处理函数。并且因为一个promise必须不可变，你能够直接取消一个promise这种情况是不允许出现的。从外部取消一个promise跟改变它的状态没有什么区别。它使得promise变得不可靠。\n许多promise库都提供了这种功能，但是这明显是一个错误。取消这种行为是不需要promise，但是它可以出现在promise上面的一个抽象层里。\n## 冗长\n另一个关于原生promise的担心是有些事情并没有被实现，所以你必须自动手动实现它们，而这些事情对于可扩展性是很重要的，但是这些东西经常会导致令人讨厌的重复代码。\n看一个例子，在每一个promise的完成步骤中，有一个设定就是你希望保持链式结构，所以`then(..)`方法会返回一个新的promise。但是如果你想要加入一个自己创建的promise并且从一个成功处理函数中返回，这样你的promise就可以加入到链的流程控制中。\n```javascript\nfunction transformResult(data) {\n    // we have to manually create and return a promise here\n    return new Promise( function(resolve,reject){\n        // whatever\n    } );\n}\n\nvar pr = ajax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n```\n不同的是，就像上面解释的一样，从第一个`then(..)`返回的隐藏的promise立刻就完成(或者失败)，然后你就没办法让剩下的链异步延迟。\n如果有一个抽象层能够通过某种方式把自动创建/链接的promise暴露给你，然后你就不需要创建自己的promise来替换了，这样该多好。\n换句话说，如果有一个设定假设你需要为了异步的目的使用链，而不是你只是需要漂亮得执行异步。（也就是说你确实是希望你的代码可以异步执行，而不是说希望整个异步流程看过去好看点）。\n另一个例子：你不能直接传递一个已经存在的promise给`then(..)`方法，你必须传递一个返回这个promise的函数。\n```javascript\nvar pr = doTask2();\n\ndoTask1()\n.then( pr ); // would be nice, but doesn't work!\n\n// instead:\n\ndoTask1()\n.then( function(){ return pr; } );\n```\n这个限制性是有很多原因的。但是它只是减弱了有利于保持可扩展性和可预测性的用法的简洁。抽象可以容易的解决这个问题。\n# 全剧终\n所有这些原因就是为什么原生的promise API是强大同时也是有局限性的。\n关于扩展和抽象是一个成熟的领域。许多库正在做这些工作。就像我之前说的，[asynquence](http://github.com/getify/asynquence)是我自己的promise抽象库。它很小但是很强大。它解决了所有博客中提到的promise的问题。\n我后面会写一篇详细的博客来介绍*asynquence*是如果解决这些问题的，所以敬请期待。\n\n原文地址：http://blog.getify.com/promises-part-5/\n\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n","source":"_posts/understand-promise-5.md","raw":"title: (译)深入理解Promise五部曲：5.LEGO\ndate: 2014-07-19 14:44:48\ntags: ['promise']\n---\n在[Part4:扩展问题](/#/blog/2014/07/09/understand-promise-4/)中，我讨论了如何扩展和抽象Promise是多么的常见，以及这中间的一些问题。但是为什么promise对于开发者来说不是足够友好的呢？这就是它的设计用意吗？\n<!-- more -->\n#I've Got Friends In Low Places\nPromise被设计为低级别的构建块。一个promise就像一个乐高玩具。单个乐高只是一个有趣的玩具。但是如果把它们拼在一起，你会感受到更多的乐趣。\n问题是promise不是你小时候玩儿的那个有趣LEGO，它们不是充满想象力的打气筒，也不是Gandalf mini-figure(一种乐高玩具)。\n都不是，promise只是你的简单老旧的4X2的砖块。\n这并不是使它们非常有用。但是它们是你箱子中最重要的组成部分之一。当它们彼此分开时它们只是这么个东西，但是当把它们整合在一起它们就会散发出光芒。\n换句话说，promise本质上是一个构建在真实用户之上的低级别的API。这是对的：**promise并不是给开发者使用的**，它们是给库作者使用的。\n你会从它们那收益许多，但是你很可能不是直接使用它们。你将会使用的是经过许多库组合包装之后的结果。\n#控制 VS 值\n请允许我矫正第一个最大的关于promise的误解：**它们不是真正关于流程控制的**。\npromise当然可以链接在一起来变成近似异步流程控制的东西。但是最后证明它们并不像你想象的那样擅长这个任务。\npromises确实只是一个值的容器。这个值可能现在就存在也可能是未来的一个值。但是不管怎样，它只是一个值。\n这是promise最有意义的好处之一。它们在值的上面创建了一个强大的抽象使得值不再是暂存的东西。换句话说，不管那个值现在是否存在，你都可以用同样的方式使用promise。在这个系列的[第三部分](/#/blog/2014/07/02/understand-promise-3/)中，我讨论过promise必须是不可变的，它们作为值的意义也是基于这个特点的。\npromises就像状态的小型的自包含的表现方式。它们是可组合的，也就意味着你全部的程序可以用它们来表示。\n\n# 限制\n就像你不能奢望一个单独的4X2的乐高可以变成一个跑车，让promise成为你的异步流程控制机制也是一种奢望。\n那么promises作为一个非暂存的不可变的值对于解决异步任务意味着什么呢？在它们设计哲学的约束中，有它们擅长并且可以有帮助的东西。\n在剩下的内容中，我会讨论这个限制。但是我并不打算作为一个promise的批判者。我试图去强调扩展和抽象的重要性。\n## 错误处理\n当我说promise只是一个值的容器的时候我撒了个小慌。实际上，它是一个成功值或者失败信息的容器。在任何时候，一个promise是一个未来的成功值或者在获取这个值时的失败信息。不会超过这两种情况。\n在某种意义上说，一个promise是一个决策结构，一个`if..then..else`。其他人喜欢把它想成一个`try..catch`结构。不管是哪种理解，你就像在说\"请求一个值，不管成功还是失败\"。\n就像尤达说，\"Do or do not, there is no try.\"。\n考虑下面这个情况：\n```javascript\nfunction ajax(url) {\n    return new Promise( function(resolve,reject){\n        // make some ajax request\n        // if you get a response, `resolve( answer )`\n        // if it fails, `reject( excuses )`\n    } );\n}\n\najax( \"http://TheMeaningOfLife.com\" )\n.then(\n    winAtLife,\n    keepSearching\n);\n```\n看到`winAtLife()`和`keepSearching()`函数了吗？我们在说，\"去问问生命的意义，不管你有没有找到答案，我们都继续\"。\n如果我们不传入`keepSearching`会怎样？除了作为一个乐观主义者假设你会找到答案然后在生命长河中取胜，这里会有什么危险呢？\n如果promise没有找到生命的意义（或者如果在处理答案的过程中发生了javascript异常），它会默默地保留着错误的事实，也许会永远保留着。就算你等上一百万年，你都不会知道对于答案的请求失败了。\n你只能通过观察才能知道它失败了。这可能需要深入到形而上学或者量子学的东西。让我们停止在这吧。\n所以不带失败处理函数的promise是一个会默默地失败的promise。这并不好。这意味着如果你忘记了，你会陷入失败的陷阱而不是成功。\n所以你会怀疑：为什么promises会忽略失败处理函数呢？因为你可能现在不在意失败的情况，只有以后某个时刻会关心。我们程序的暂时性意味着系统现在不会知道你以后会想做什么。现在忽略失败处理函数也许对你来说是正合适的，因为你知道你会把这个promise链接到另一个promise，并且那个promise有一个失败处理函数。\n所以promise机制让你可以创建不需要监听失败的promise。\n这里有一个很微妙的问题，很可能也是大多数刚接触promise的开发者会碰到的问题。\n## 束缚我们的链子\n为了理解这个问题，我们首先需要理解promises是如何链接在一起的。我认为你会很快明白promise链是强大并且有一点复杂的。\n```javascript\najax( \"http://TheMeaningOfLife.com\" )\n.then(\n    winAtLife,\n    keepSearching\n)\n// a second promise returned here that we ignored!\n;\n```\n`ajax(..)`调用产生了第一个promise，然后`then(..)`调用产生了第二个promise。我们没有捕捉并且观察在这段代码中的第二个promise，但是我们可以。第二个promise是根据第一个promise处理函数如何运行来自动变成fulfilled状态(成功或者失败)。\n第二个promise不会在意第一个promise是成功还是失败。它在意第一个promise的处理函数(不管成功还是失败)。\n这是promise链的关键。但是这有一点不好理解，所以重复读上面那段话直到你理解为止。\n考虑下promise代码通常是怎么写的(通过链):\n```javascript\najax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n```\n这段代码也可以像下面这么写，效果是一样的：\n```javascript\nvar promiseA = ajax( \"..\" );\n\nvar promiseB = promiseA.then( transformResult );\n\nvar promiseC = promiseB.then(\n    displayAnswer,\n    reportError\n);\n\n// we don't use `promiseC` here, but we could...\n```\nPromise A是唯一在意`ajax(..)`结果的promise。\nPromise B只关心Promise A在`transformResult(..)`函数内部是如何处理的(不是Promise A的结果本身),同样的，Promise C只关心Promise B在`displayAnswer(..)`或者`reportError(..)`函数内部是如何处理的(不是Promise B结果本身)。\n再一次，重复读这段话直到理解。\n在`transformResult(..)`内部，如果它立刻完成了它的任务，然后Promise B就会立刻完成，不管成功还是失败。然而，如果`transformResult(..)`不能立刻完成，而是创建它自己的promise，我们称它为Promise H1('H'是'hidden',因为它是隐藏在内部的)。原本Promise B返回的等待我们如何处理Promise A的promise，现在概念上被Promise H1替换了(并不是真的替换了，只是被说成一样的)。\n所以，现在当你说`promiseB.then(..)`时，它实际上就像说`promiseH1.then(..)`。如果Promise H1成功了，`displayAnswer(..)`会被调用，但是如果它失败了，`reportError(..)`会被调用。\n这就是promise链是如何工作的。\n但是，如果Promise A(由ajax调用返回)失败了会怎样？`promiseA.then(..)`调用没有注册一个失败处理函数。它会默默地隐藏错误吗？它会的，除了我们链接上Promise B然后在上面注册一个错误处理函数:`reportError(..)`。如果Promise A失败了，`transformResult(..)`不会被调用，并且没有错误处理函数，所以Promise B马上被标记为失败，所以`reportError(..)`会被调用。\n如果Promise A成功了，`transformResult(..)`会被执行，然后当运行`transformResult(..)`时有一个错误会怎样？Promise B被标记为失败，然后`reportError(..)`也会被调用。\n但是这里是危险的地方，这个地方甚至有经验的开发者都会遗漏的！\n如果Promise A成功了(成功的`ajax(..)`)，然后Promise B成功了(成功的`transformResult(..)`)，但是当运行`displayAnswer(..)`时有一个错误会怎样？\n你也许会认为`reportError(..)`会被调用？大多数人会这么想，但是不是的。\n为什么？因为来自`displayAnswer(..)`的一个错误或者失败promise导致一个失败的Promise C。我们监听Promise C失败的情况了吗？仔细看看。没有。\n为了确保你不会漏掉这种错误并且让它默默地隐藏在Promise C状态内部，你也会希望监听Promise C的失败：\n```javascript\nvar promiseC = promiseB.then(\n    displayAnswer,\n    reportError\n);\n\n// need to do this:\npromiseC.then( null, reportError );\n\n// or this:, which is the same thing:\npromiseC.catch( reportError );\n\n// Note: a silently ignored *Promise D* was created here!\n```\nOK,所以现在我们捕获`displayAnswer(..)`内部的错误。不得不去记住这个有一点坑爹。\n## 乌龟\n但是有一个更加微妙的问题！如果当处理`displayAnswer(..)`返回的错误时，`reportError(..)`函数也有一个JS异常会怎样？会有人捕获这个错误吗？没有。\n看！上面有一个隐含的Promise D，并且它会被告知`reportError(..)`内部的异常。\nOMG，你肯定会想。什么时候才能停止？它会这样一直下去吗？\n一些promise库作者认为有必要解决这个问题通过让\"安静的错误\"被作为全局异常抛出。但是这种机制该如何得知你不想再链接promise并且提供一个错误处理函数呢？它如何知道什么时候应该通报一个全局异常或者不通报呢？你肯定不希望当你已经捕获并且处理错误的情况下仍然有很多控制台错误信息。\n在某种意义上，你需要可以标记一个promise为“final”，就像说“这是我链子中的最后一个promise”或者“我不打算再链接了，所以这是乌龟停止的地方”。如果在链的最后发生了错误并且没有被捕获，然后它需要被报告为一个全局异常。\n从表面上我猜测这似乎是很明智的。这种情况下的实现像下面这样：\n```javascript\nvar promiseC = promiseB.then(\n    displayAnswer,\n    reportError\n);\n\npromiseC\n.catch( reportError )\n.done(); // marking the end of the chain\n```\n你仍然需要记住调用`done()`，要不然错误还是会隐藏在最后一个promsie中。你必须使用稳固的错误处理函数。\n\"恶心\"，你肯定会这么想。欢迎来到promises的欢乐世界。\n## Value vs Values\n对于错误处理已经说了很多了。另一个核心promsie的限制是一个promise代表一个单独的值。什么是一个单独的值呢？它是一个对象或者一个数组或者一个字符串或者一个数字。等等，我还可以在一个容器里放入多个值，就像一个数组或对象中的多个元素。Cool！\n一个操作的最终结果不总是一个值，但是promise并不会这样，这很微妙并且又是另一个失败陷阱：\n```javascript\nfunction ajax(url) {\n    return new Promise( function(resolve,reject){\n        // make some ajax request\n        // if you get a response, `resolve( answer, url )`\n        // if it fails, `reject( excuses, url )`\n    } );\n}\n\najax( \"..\" )\n.then(\n    function(answer,url){\n        console.log( answer, url ); // ..  undefined\n    },\n    function(excuses,url){\n        console.log( excuses, url ); // ..  undefined\n    }\n);\n```\n你看出这里面的问题了吗？如果你意外的尝试传递超过一个的值过去，不管传给失败处理函数还是成功处理函数，只有第一个值能被传递过去，其他几个会被默默地丢掉。\n为什么？我相信这和组合的可预测性有关，或者一些其他花哨的词汇有关。\n最后，你不得不记住包裹自己的多个值要不然你就会不知不觉的丢失数据。\n## 并行\n真实世界中的app经常在“同一时间”发生超过一件事情。本质上说，我们需要构建一个处理器，并行处理多个事件，等待它们全部完成再执行回调函数。\n相比于promise问题，这是一个异步流程控制的问题。一个单独的promise不能表达两个或更多并行发生的异步事件。你需要一个抽象层来处理它。\n在计算机科学术语中，这个概念叫做一个“门”。一个等待所有任务完成，并且不关心它们完成顺序的门。\n在promise世界中，我们添加一个API叫做`Promise.all(..)`，它可以构建一个promise来等待所有传递进来的promise完成。\n```javascript\nPromise.all([\n    // these will all proceed \"in parallel\"\n    makePromise1(),\n    makePromise2(),\n    makePromise3()\n])\n.then( .. );\n```\n一个相近的方法是`race()`。它的作用和`all()`一样，除了它只要有一个promise返回消息就执行回调函数，而不等待其他promise的结果。\n当你思考这些方法的时候，你可能会想到许多方式来实现这些方法。`Promise.all(..)`和`Promise.race(..)`是原生提供的，因为这两个方法是很常用到的，但是如果你还需要其他的功能那么你就需要一个库来帮助你了。\n限制的另一个表现就是你很快就会发现你需要自己使用`Array`的相关方法来管理promise列表，比如`.map(..)`和`.reduce(..)`。如果你对map/reduce不熟悉，那么赶紧去熟悉一下，因为你会发现当处理现实世界中promise的时候你经常会需要它们。\n幸运的是，已经有很多库来帮助你了，并且每天还有很多新的库被创造出来。\n## Single Shot Of Espresso，Please！\n另一个关于promise的事情是它们只会运行一次，然后就不用了。\n如果你只需要处理单个事件，比如初始化一个也没或者资源加载，那么这样没什么问题。但是如果你有一个重复的事件(比如用户点击按钮)，你每次都需要执行一系列异步操作会怎么样呢？\nPromise并不提供这样的功能，因为它们是不可变的，也就是不能被重置。要重复同样的promise，唯一的方法就是重新定义一个promise。\n```javascript\n$(\"#my_button\").click(function(evt){\n    doTask1( evt.target )\n    .then( doTask2 )\n    .then( doTask3 )\n    .catch( handleError );\n});\n```\n太恶心了，不仅仅是因为重复创建promise对于效率有影响，而且它对于职责分散不利。你不得不把多个事件监听函数放在同一个函数中。如果有一个方式来改变这种情况就好了，这样事件监听和事件处理函数就能够分开了。\nMicrosoft的RxJS库把这种方式叫做\"观察者模式\"。\n我的*asynquence*库有一个`react(..)`方法通过简单的方式提供了一个类似的功能。\n\n## 盲区...\n在一个已经被使用回调函数的API占据的世界中，把promise插入到代码中比我们想象的要困难。考虑下面这段代码：\n```javascript\nfunction myAjax(url) {\n    return new Promise( function(resolve,reject){\n        ajax( url, function(err,response){\n            if (err) {\n                reject( err );\n            }\n            else {\n                resolve( response );\n            }\n        } )\n    } );\n}\n```\n我认为promise解决了回调地狱的问题，但是它们代码看起来仍然像垃圾。\n我们需要抽象层来使得用promise表示回调变得更简单。原生的promise并没有提供这个抽象层，所以结果就是通过原生promise写出来的代码还是很丑陋。但是如果有抽象层那么事情就变得很简单了。\n例如，我的*asynquence*库提供了一个`errfcb()`[插件](https://github.com/getify/asynquence/tree/master/contrib#errfcb-plugin)(error-first callback)，用它可以构建一个回调来处理下面这种场景:\n```javascript\nfunction myAjax(url) {\n    var sq = ASQ();\n    ajax( url, sq.errfcb() );\n    return sq;\n}\n```\n## Stop The Presses!\n有时，你想要取消一个promise而去做别的事情，但是如果现在你的promise正处在挂起状态会怎样呢？\n```javascript\nvar pr = ajax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n\n// Later\npr.cancel(); //  <-- doesn't work!\n```\n所以，为了取消promise，你需要引入一下东西：\n```javascript\nfunction transformResult(data) {\n    if (!pr.ignored) {\n        // do something!\n    }\n}\n\nvar pr = ajax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n\n// Later\npr.ignored = true; // just hacking around\n```\n换句话说，你为了能够取消你的promise，在promise上面加了一层来处理这种情况。\n你不能从promise取消注册处理函数。并且因为一个promise必须不可变，你能够直接取消一个promise这种情况是不允许出现的。从外部取消一个promise跟改变它的状态没有什么区别。它使得promise变得不可靠。\n许多promise库都提供了这种功能，但是这明显是一个错误。取消这种行为是不需要promise，但是它可以出现在promise上面的一个抽象层里。\n## 冗长\n另一个关于原生promise的担心是有些事情并没有被实现，所以你必须自动手动实现它们，而这些事情对于可扩展性是很重要的，但是这些东西经常会导致令人讨厌的重复代码。\n看一个例子，在每一个promise的完成步骤中，有一个设定就是你希望保持链式结构，所以`then(..)`方法会返回一个新的promise。但是如果你想要加入一个自己创建的promise并且从一个成功处理函数中返回，这样你的promise就可以加入到链的流程控制中。\n```javascript\nfunction transformResult(data) {\n    // we have to manually create and return a promise here\n    return new Promise( function(resolve,reject){\n        // whatever\n    } );\n}\n\nvar pr = ajax( \"..\" )\n.then( transformResult )\n.then(\n    displayAnswer,\n    reportError\n);\n```\n不同的是，就像上面解释的一样，从第一个`then(..)`返回的隐藏的promise立刻就完成(或者失败)，然后你就没办法让剩下的链异步延迟。\n如果有一个抽象层能够通过某种方式把自动创建/链接的promise暴露给你，然后你就不需要创建自己的promise来替换了，这样该多好。\n换句话说，如果有一个设定假设你需要为了异步的目的使用链，而不是你只是需要漂亮得执行异步。（也就是说你确实是希望你的代码可以异步执行，而不是说希望整个异步流程看过去好看点）。\n另一个例子：你不能直接传递一个已经存在的promise给`then(..)`方法，你必须传递一个返回这个promise的函数。\n```javascript\nvar pr = doTask2();\n\ndoTask1()\n.then( pr ); // would be nice, but doesn't work!\n\n// instead:\n\ndoTask1()\n.then( function(){ return pr; } );\n```\n这个限制性是有很多原因的。但是它只是减弱了有利于保持可扩展性和可预测性的用法的简洁。抽象可以容易的解决这个问题。\n# 全剧终\n所有这些原因就是为什么原生的promise API是强大同时也是有局限性的。\n关于扩展和抽象是一个成熟的领域。许多库正在做这些工作。就像我之前说的，[asynquence](http://github.com/getify/asynquence)是我自己的promise抽象库。它很小但是很强大。它解决了所有博客中提到的promise的问题。\n我后面会写一篇详细的博客来介绍*asynquence*是如果解决这些问题的，所以敬请期待。\n\n原文地址：http://blog.getify.com/promises-part-5/\n\n\n[深入理解Promise五部曲--1.异步问题](/#/blog/2014/06/23/understand-promise-1/)\n[深入理解Promise五部曲--2.转换问题](/#/blog/2014/06/29/understand-promise-2/)\n[深入理解Promise五部曲--3.可靠性问题](/#/blog/2014/07/02/understand-promise-3/)\n[深入理解Promise五部曲--4.扩展性问题](/#/blog/2014/07/09/understand-promise-4/)\n[深入理解Promise五部曲--5.乐高问题](/#/blog/2014/07/19/understand-promise-5/)\n","slug":"understand-promise-5","published":1,"updated":"2016-09-06T14:46:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisrlbvlp001w0povq0zl2ivt","content":"<p>在<a href=\"/#/blog/2014/07/09/understand-promise-4/\">Part4:扩展问题</a>中，我讨论了如何扩展和抽象Promise是多么的常见，以及这中间的一些问题。但是为什么promise对于开发者来说不是足够友好的呢？这就是它的设计用意吗？<br><a id=\"more\"></a></p>\n<p>#I’ve Got Friends In Low Places<br>Promise被设计为低级别的构建块。一个promise就像一个乐高玩具。单个乐高只是一个有趣的玩具。但是如果把它们拼在一起，你会感受到更多的乐趣。<br>问题是promise不是你小时候玩儿的那个有趣LEGO，它们不是充满想象力的打气筒，也不是Gandalf mini-figure(一种乐高玩具)。<br>都不是，promise只是你的简单老旧的4X2的砖块。<br>这并不是使它们非常有用。但是它们是你箱子中最重要的组成部分之一。当它们彼此分开时它们只是这么个东西，但是当把它们整合在一起它们就会散发出光芒。<br>换句话说，promise本质上是一个构建在真实用户之上的低级别的API。这是对的：<strong>promise并不是给开发者使用的</strong>，它们是给库作者使用的。<br>你会从它们那收益许多，但是你很可能不是直接使用它们。你将会使用的是经过许多库组合包装之后的结果。</p>\n<p>#控制 VS 值<br>请允许我矫正第一个最大的关于promise的误解：<strong>它们不是真正关于流程控制的</strong>。<br>promise当然可以链接在一起来变成近似异步流程控制的东西。但是最后证明它们并不像你想象的那样擅长这个任务。<br>promises确实只是一个值的容器。这个值可能现在就存在也可能是未来的一个值。但是不管怎样，它只是一个值。<br>这是promise最有意义的好处之一。它们在值的上面创建了一个强大的抽象使得值不再是暂存的东西。换句话说，不管那个值现在是否存在，你都可以用同样的方式使用promise。在这个系列的<a href=\"/#/blog/2014/07/02/understand-promise-3/\">第三部分</a>中，我讨论过promise必须是不可变的，它们作为值的意义也是基于这个特点的。<br>promises就像状态的小型的自包含的表现方式。它们是可组合的，也就意味着你全部的程序可以用它们来表示。</p>\n<h1 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h1><p>就像你不能奢望一个单独的4X2的乐高可以变成一个跑车，让promise成为你的异步流程控制机制也是一种奢望。<br>那么promises作为一个非暂存的不可变的值对于解决异步任务意味着什么呢？在它们设计哲学的约束中，有它们擅长并且可以有帮助的东西。<br>在剩下的内容中，我会讨论这个限制。但是我并不打算作为一个promise的批判者。我试图去强调扩展和抽象的重要性。</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>当我说promise只是一个值的容器的时候我撒了个小慌。实际上，它是一个成功值或者失败信息的容器。在任何时候，一个promise是一个未来的成功值或者在获取这个值时的失败信息。不会超过这两种情况。<br>在某种意义上说，一个promise是一个决策结构，一个<code>if..then..else</code>。其他人喜欢把它想成一个<code>try..catch</code>结构。不管是哪种理解，你就像在说”请求一个值，不管成功还是失败”。<br>就像尤达说，”Do or do not, there is no try.”。<br>考虑下面这个情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// make some ajax request</span></div><div class=\"line\">        <span class=\"comment\">// if you get a response, `resolve( answer )`</span></div><div class=\"line\">        <span class=\"comment\">// if it fails, `reject( excuses )`</span></div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ajax( <span class=\"string\">\"http://TheMeaningOfLife.com\"</span> )</div><div class=\"line\">.then(</div><div class=\"line\">    winAtLife,</div><div class=\"line\">    keepSearching</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>看到<code>winAtLife()</code>和<code>keepSearching()</code>函数了吗？我们在说，”去问问生命的意义，不管你有没有找到答案，我们都继续”。<br>如果我们不传入<code>keepSearching</code>会怎样？除了作为一个乐观主义者假设你会找到答案然后在生命长河中取胜，这里会有什么危险呢？<br>如果promise没有找到生命的意义（或者如果在处理答案的过程中发生了javascript异常），它会默默地保留着错误的事实，也许会永远保留着。就算你等上一百万年，你都不会知道对于答案的请求失败了。<br>你只能通过观察才能知道它失败了。这可能需要深入到形而上学或者量子学的东西。让我们停止在这吧。<br>所以不带失败处理函数的promise是一个会默默地失败的promise。这并不好。这意味着如果你忘记了，你会陷入失败的陷阱而不是成功。<br>所以你会怀疑：为什么promises会忽略失败处理函数呢？因为你可能现在不在意失败的情况，只有以后某个时刻会关心。我们程序的暂时性意味着系统现在不会知道你以后会想做什么。现在忽略失败处理函数也许对你来说是正合适的，因为你知道你会把这个promise链接到另一个promise，并且那个promise有一个失败处理函数。<br>所以promise机制让你可以创建不需要监听失败的promise。<br>这里有一个很微妙的问题，很可能也是大多数刚接触promise的开发者会碰到的问题。</p>\n<h2 id=\"束缚我们的链子\"><a href=\"#束缚我们的链子\" class=\"headerlink\" title=\"束缚我们的链子\"></a>束缚我们的链子</h2><p>为了理解这个问题，我们首先需要理解promises是如何链接在一起的。我认为你会很快明白promise链是强大并且有一点复杂的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ajax( <span class=\"string\">\"http://TheMeaningOfLife.com\"</span> )</div><div class=\"line\">.then(</div><div class=\"line\">    winAtLife,</div><div class=\"line\">    keepSearching</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">// a second promise returned here that we ignored!</span></div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n<p><code>ajax(..)</code>调用产生了第一个promise，然后<code>then(..)</code>调用产生了第二个promise。我们没有捕捉并且观察在这段代码中的第二个promise，但是我们可以。第二个promise是根据第一个promise处理函数如何运行来自动变成fulfilled状态(成功或者失败)。<br>第二个promise不会在意第一个promise是成功还是失败。它在意第一个promise的处理函数(不管成功还是失败)。<br>这是promise链的关键。但是这有一点不好理解，所以重复读上面那段话直到你理解为止。<br>考虑下promise代码通常是怎么写的(通过链):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>这段代码也可以像下面这么写，效果是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promiseA = ajax( <span class=\"string\">\"..\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> promiseB = promiseA.then( transformResult );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// we don't use `promiseC` here, but we could...</span></div></pre></td></tr></table></figure></p>\n<p>Promise A是唯一在意<code>ajax(..)</code>结果的promise。<br>Promise B只关心Promise A在<code>transformResult(..)</code>函数内部是如何处理的(不是Promise A的结果本身),同样的，Promise C只关心Promise B在<code>displayAnswer(..)</code>或者<code>reportError(..)</code>函数内部是如何处理的(不是Promise B结果本身)。<br>再一次，重复读这段话直到理解。<br>在<code>transformResult(..)</code>内部，如果它立刻完成了它的任务，然后Promise B就会立刻完成，不管成功还是失败。然而，如果<code>transformResult(..)</code>不能立刻完成，而是创建它自己的promise，我们称它为Promise H1(‘H’是’hidden’,因为它是隐藏在内部的)。原本Promise B返回的等待我们如何处理Promise A的promise，现在概念上被Promise H1替换了(并不是真的替换了，只是被说成一样的)。<br>所以，现在当你说<code>promiseB.then(..)</code>时，它实际上就像说<code>promiseH1.then(..)</code>。如果Promise H1成功了，<code>displayAnswer(..)</code>会被调用，但是如果它失败了，<code>reportError(..)</code>会被调用。<br>这就是promise链是如何工作的。<br>但是，如果Promise A(由ajax调用返回)失败了会怎样？<code>promiseA.then(..)</code>调用没有注册一个失败处理函数。它会默默地隐藏错误吗？它会的，除了我们链接上Promise B然后在上面注册一个错误处理函数:<code>reportError(..)</code>。如果Promise A失败了，<code>transformResult(..)</code>不会被调用，并且没有错误处理函数，所以Promise B马上被标记为失败，所以<code>reportError(..)</code>会被调用。<br>如果Promise A成功了，<code>transformResult(..)</code>会被执行，然后当运行<code>transformResult(..)</code>时有一个错误会怎样？Promise B被标记为失败，然后<code>reportError(..)</code>也会被调用。<br>但是这里是危险的地方，这个地方甚至有经验的开发者都会遗漏的！<br>如果Promise A成功了(成功的<code>ajax(..)</code>)，然后Promise B成功了(成功的<code>transformResult(..)</code>)，但是当运行<code>displayAnswer(..)</code>时有一个错误会怎样？<br>你也许会认为<code>reportError(..)</code>会被调用？大多数人会这么想，但是不是的。<br>为什么？因为来自<code>displayAnswer(..)</code>的一个错误或者失败promise导致一个失败的Promise C。我们监听Promise C失败的情况了吗？仔细看看。没有。<br>为了确保你不会漏掉这种错误并且让它默默地隐藏在Promise C状态内部，你也会希望监听Promise C的失败：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// need to do this:</span></div><div class=\"line\">promiseC.then( <span class=\"literal\">null</span>, reportError );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or this:, which is the same thing:</span></div><div class=\"line\">promiseC.catch( reportError );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Note: a silently ignored *Promise D* was created here!</span></div></pre></td></tr></table></figure></p>\n<p>OK,所以现在我们捕获<code>displayAnswer(..)</code>内部的错误。不得不去记住这个有一点坑爹。</p>\n<h2 id=\"乌龟\"><a href=\"#乌龟\" class=\"headerlink\" title=\"乌龟\"></a>乌龟</h2><p>但是有一个更加微妙的问题！如果当处理<code>displayAnswer(..)</code>返回的错误时，<code>reportError(..)</code>函数也有一个JS异常会怎样？会有人捕获这个错误吗？没有。<br>看！上面有一个隐含的Promise D，并且它会被告知<code>reportError(..)</code>内部的异常。<br>OMG，你肯定会想。什么时候才能停止？它会这样一直下去吗？<br>一些promise库作者认为有必要解决这个问题通过让”安静的错误”被作为全局异常抛出。但是这种机制该如何得知你不想再链接promise并且提供一个错误处理函数呢？它如何知道什么时候应该通报一个全局异常或者不通报呢？你肯定不希望当你已经捕获并且处理错误的情况下仍然有很多控制台错误信息。<br>在某种意义上，你需要可以标记一个promise为“final”，就像说“这是我链子中的最后一个promise”或者“我不打算再链接了，所以这是乌龟停止的地方”。如果在链的最后发生了错误并且没有被捕获，然后它需要被报告为一个全局异常。<br>从表面上我猜测这似乎是很明智的。这种情况下的实现像下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">promiseC</div><div class=\"line\">.catch( reportError )</div><div class=\"line\">.done(); <span class=\"comment\">// marking the end of the chain</span></div></pre></td></tr></table></figure></p>\n<p>你仍然需要记住调用<code>done()</code>，要不然错误还是会隐藏在最后一个promsie中。你必须使用稳固的错误处理函数。<br>“恶心”，你肯定会这么想。欢迎来到promises的欢乐世界。</p>\n<h2 id=\"Value-vs-Values\"><a href=\"#Value-vs-Values\" class=\"headerlink\" title=\"Value vs Values\"></a>Value vs Values</h2><p>对于错误处理已经说了很多了。另一个核心promsie的限制是一个promise代表一个单独的值。什么是一个单独的值呢？它是一个对象或者一个数组或者一个字符串或者一个数字。等等，我还可以在一个容器里放入多个值，就像一个数组或对象中的多个元素。Cool！<br>一个操作的最终结果不总是一个值，但是promise并不会这样，这很微妙并且又是另一个失败陷阱：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// make some ajax request</span></div><div class=\"line\">        <span class=\"comment\">// if you get a response, `resolve( answer, url )`</span></div><div class=\"line\">        <span class=\"comment\">// if it fails, `reject( excuses, url )`</span></div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">answer,url</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( answer, url ); <span class=\"comment\">// ..  undefined</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">excuses,url</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( excuses, url ); <span class=\"comment\">// ..  undefined</span></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>你看出这里面的问题了吗？如果你意外的尝试传递超过一个的值过去，不管传给失败处理函数还是成功处理函数，只有第一个值能被传递过去，其他几个会被默默地丢掉。<br>为什么？我相信这和组合的可预测性有关，或者一些其他花哨的词汇有关。<br>最后，你不得不记住包裹自己的多个值要不然你就会不知不觉的丢失数据。</p>\n<h2 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h2><p>真实世界中的app经常在“同一时间”发生超过一件事情。本质上说，我们需要构建一个处理器，并行处理多个事件，等待它们全部完成再执行回调函数。<br>相比于promise问题，这是一个异步流程控制的问题。一个单独的promise不能表达两个或更多并行发生的异步事件。你需要一个抽象层来处理它。<br>在计算机科学术语中，这个概念叫做一个“门”。一个等待所有任务完成，并且不关心它们完成顺序的门。<br>在promise世界中，我们添加一个API叫做<code>Promise.all(..)</code>，它可以构建一个promise来等待所有传递进来的promise完成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">    <span class=\"comment\">// these will all proceed \"in parallel\"</span></div><div class=\"line\">    makePromise1(),</div><div class=\"line\">    makePromise2(),</div><div class=\"line\">    makePromise3()</div><div class=\"line\">])</div><div class=\"line\">.then( .. );</div></pre></td></tr></table></figure></p>\n<p>一个相近的方法是<code>race()</code>。它的作用和<code>all()</code>一样，除了它只要有一个promise返回消息就执行回调函数，而不等待其他promise的结果。<br>当你思考这些方法的时候，你可能会想到许多方式来实现这些方法。<code>Promise.all(..)</code>和<code>Promise.race(..)</code>是原生提供的，因为这两个方法是很常用到的，但是如果你还需要其他的功能那么你就需要一个库来帮助你了。<br>限制的另一个表现就是你很快就会发现你需要自己使用<code>Array</code>的相关方法来管理promise列表，比如<code>.map(..)</code>和<code>.reduce(..)</code>。如果你对map/reduce不熟悉，那么赶紧去熟悉一下，因为你会发现当处理现实世界中promise的时候你经常会需要它们。<br>幸运的是，已经有很多库来帮助你了，并且每天还有很多新的库被创造出来。</p>\n<h2 id=\"Single-Shot-Of-Espresso，Please！\"><a href=\"#Single-Shot-Of-Espresso，Please！\" class=\"headerlink\" title=\"Single Shot Of Espresso，Please！\"></a>Single Shot Of Espresso，Please！</h2><p>另一个关于promise的事情是它们只会运行一次，然后就不用了。<br>如果你只需要处理单个事件，比如初始化一个也没或者资源加载，那么这样没什么问题。但是如果你有一个重复的事件(比如用户点击按钮)，你每次都需要执行一系列异步操作会怎么样呢？<br>Promise并不提供这样的功能，因为它们是不可变的，也就是不能被重置。要重复同样的promise，唯一的方法就是重新定义一个promise。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#my_button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</div><div class=\"line\">    doTask1( evt.target )</div><div class=\"line\">    .then( doTask2 )</div><div class=\"line\">    .then( doTask3 )</div><div class=\"line\">    .catch( handleError );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>太恶心了，不仅仅是因为重复创建promise对于效率有影响，而且它对于职责分散不利。你不得不把多个事件监听函数放在同一个函数中。如果有一个方式来改变这种情况就好了，这样事件监听和事件处理函数就能够分开了。<br>Microsoft的RxJS库把这种方式叫做”观察者模式”。<br>我的<em>asynquence</em>库有一个<code>react(..)</code>方法通过简单的方式提供了一个类似的功能。</p>\n<h2 id=\"盲区…\"><a href=\"#盲区…\" class=\"headerlink\" title=\"盲区…\"></a>盲区…</h2><p>在一个已经被使用回调函数的API占据的世界中，把promise插入到代码中比我们想象的要困难。考虑下面这段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAjax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        ajax( url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,response</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                reject( err );</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                resolve( response );</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; )</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我认为promise解决了回调地狱的问题，但是它们代码看起来仍然像垃圾。<br>我们需要抽象层来使得用promise表示回调变得更简单。原生的promise并没有提供这个抽象层，所以结果就是通过原生promise写出来的代码还是很丑陋。但是如果有抽象层那么事情就变得很简单了。<br>例如，我的<em>asynquence</em>库提供了一个<code>errfcb()</code><a href=\"https://github.com/getify/asynquence/tree/master/contrib#errfcb-plugin\" target=\"_blank\" rel=\"external\">插件</a>(error-first callback)，用它可以构建一个回调来处理下面这种场景:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAjax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sq = ASQ();</div><div class=\"line\">    ajax( url, sq.errfcb() );</div><div class=\"line\">    <span class=\"keyword\">return</span> sq;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Stop-The-Presses\"><a href=\"#Stop-The-Presses\" class=\"headerlink\" title=\"Stop The Presses!\"></a>Stop The Presses!</h2><p>有时，你想要取消一个promise而去做别的事情，但是如果现在你的promise正处在挂起状态会怎样呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Later</span></div><div class=\"line\">pr.cancel(); <span class=\"comment\">//  &lt;-- doesn't work!</span></div></pre></td></tr></table></figure></p>\n<p>所以，为了取消promise，你需要引入一下东西：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformResult</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!pr.ignored) &#123;</div><div class=\"line\">        <span class=\"comment\">// do something!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Later</span></div><div class=\"line\">pr.ignored = <span class=\"literal\">true</span>; <span class=\"comment\">// just hacking around</span></div></pre></td></tr></table></figure></p>\n<p>换句话说，你为了能够取消你的promise，在promise上面加了一层来处理这种情况。<br>你不能从promise取消注册处理函数。并且因为一个promise必须不可变，你能够直接取消一个promise这种情况是不允许出现的。从外部取消一个promise跟改变它的状态没有什么区别。它使得promise变得不可靠。<br>许多promise库都提供了这种功能，但是这明显是一个错误。取消这种行为是不需要promise，但是它可以出现在promise上面的一个抽象层里。</p>\n<h2 id=\"冗长\"><a href=\"#冗长\" class=\"headerlink\" title=\"冗长\"></a>冗长</h2><p>另一个关于原生promise的担心是有些事情并没有被实现，所以你必须自动手动实现它们，而这些事情对于可扩展性是很重要的，但是这些东西经常会导致令人讨厌的重复代码。<br>看一个例子，在每一个promise的完成步骤中，有一个设定就是你希望保持链式结构，所以<code>then(..)</code>方法会返回一个新的promise。但是如果你想要加入一个自己创建的promise并且从一个成功处理函数中返回，这样你的promise就可以加入到链的流程控制中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformResult</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we have to manually create and return a promise here</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// whatever</span></div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不同的是，就像上面解释的一样，从第一个<code>then(..)</code>返回的隐藏的promise立刻就完成(或者失败)，然后你就没办法让剩下的链异步延迟。<br>如果有一个抽象层能够通过某种方式把自动创建/链接的promise暴露给你，然后你就不需要创建自己的promise来替换了，这样该多好。<br>换句话说，如果有一个设定假设你需要为了异步的目的使用链，而不是你只是需要漂亮得执行异步。（也就是说你确实是希望你的代码可以异步执行，而不是说希望整个异步流程看过去好看点）。<br>另一个例子：你不能直接传递一个已经存在的promise给<code>then(..)</code>方法，你必须传递一个返回这个promise的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pr = doTask2();</div><div class=\"line\"></div><div class=\"line\">doTask1()</div><div class=\"line\">.then( pr ); <span class=\"comment\">// would be nice, but doesn't work!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// instead:</span></div><div class=\"line\"></div><div class=\"line\">doTask1()</div><div class=\"line\">.then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> pr; &#125; );</div></pre></td></tr></table></figure></p>\n<p>这个限制性是有很多原因的。但是它只是减弱了有利于保持可扩展性和可预测性的用法的简洁。抽象可以容易的解决这个问题。</p>\n<h1 id=\"全剧终\"><a href=\"#全剧终\" class=\"headerlink\" title=\"全剧终\"></a>全剧终</h1><p>所有这些原因就是为什么原生的promise API是强大同时也是有局限性的。<br>关于扩展和抽象是一个成熟的领域。许多库正在做这些工作。就像我之前说的，<a href=\"http://github.com/getify/asynquence\" target=\"_blank\" rel=\"external\">asynquence</a>是我自己的promise抽象库。它很小但是很强大。它解决了所有博客中提到的promise的问题。<br>我后面会写一篇详细的博客来介绍<em>asynquence</em>是如果解决这些问题的，所以敬请期待。</p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-5/\" target=\"_blank\" rel=\"external\">http://blog.getify.com/promises-part-5/</a></p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>\n","excerpt":"<p>在<a href=\"/#/blog/2014/07/09/understand-promise-4/\">Part4:扩展问题</a>中，我讨论了如何扩展和抽象Promise是多么的常见，以及这中间的一些问题。但是为什么promise对于开发者来说不是足够友好的呢？这就是它的设计用意吗？<br>","more":"</p>\n<p>#I’ve Got Friends In Low Places<br>Promise被设计为低级别的构建块。一个promise就像一个乐高玩具。单个乐高只是一个有趣的玩具。但是如果把它们拼在一起，你会感受到更多的乐趣。<br>问题是promise不是你小时候玩儿的那个有趣LEGO，它们不是充满想象力的打气筒，也不是Gandalf mini-figure(一种乐高玩具)。<br>都不是，promise只是你的简单老旧的4X2的砖块。<br>这并不是使它们非常有用。但是它们是你箱子中最重要的组成部分之一。当它们彼此分开时它们只是这么个东西，但是当把它们整合在一起它们就会散发出光芒。<br>换句话说，promise本质上是一个构建在真实用户之上的低级别的API。这是对的：<strong>promise并不是给开发者使用的</strong>，它们是给库作者使用的。<br>你会从它们那收益许多，但是你很可能不是直接使用它们。你将会使用的是经过许多库组合包装之后的结果。</p>\n<p>#控制 VS 值<br>请允许我矫正第一个最大的关于promise的误解：<strong>它们不是真正关于流程控制的</strong>。<br>promise当然可以链接在一起来变成近似异步流程控制的东西。但是最后证明它们并不像你想象的那样擅长这个任务。<br>promises确实只是一个值的容器。这个值可能现在就存在也可能是未来的一个值。但是不管怎样，它只是一个值。<br>这是promise最有意义的好处之一。它们在值的上面创建了一个强大的抽象使得值不再是暂存的东西。换句话说，不管那个值现在是否存在，你都可以用同样的方式使用promise。在这个系列的<a href=\"/#/blog/2014/07/02/understand-promise-3/\">第三部分</a>中，我讨论过promise必须是不可变的，它们作为值的意义也是基于这个特点的。<br>promises就像状态的小型的自包含的表现方式。它们是可组合的，也就意味着你全部的程序可以用它们来表示。</p>\n<h1 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h1><p>就像你不能奢望一个单独的4X2的乐高可以变成一个跑车，让promise成为你的异步流程控制机制也是一种奢望。<br>那么promises作为一个非暂存的不可变的值对于解决异步任务意味着什么呢？在它们设计哲学的约束中，有它们擅长并且可以有帮助的东西。<br>在剩下的内容中，我会讨论这个限制。但是我并不打算作为一个promise的批判者。我试图去强调扩展和抽象的重要性。</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>当我说promise只是一个值的容器的时候我撒了个小慌。实际上，它是一个成功值或者失败信息的容器。在任何时候，一个promise是一个未来的成功值或者在获取这个值时的失败信息。不会超过这两种情况。<br>在某种意义上说，一个promise是一个决策结构，一个<code>if..then..else</code>。其他人喜欢把它想成一个<code>try..catch</code>结构。不管是哪种理解，你就像在说”请求一个值，不管成功还是失败”。<br>就像尤达说，”Do or do not, there is no try.”。<br>考虑下面这个情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// make some ajax request</span></div><div class=\"line\">        <span class=\"comment\">// if you get a response, `resolve( answer )`</span></div><div class=\"line\">        <span class=\"comment\">// if it fails, `reject( excuses )`</span></div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ajax( <span class=\"string\">\"http://TheMeaningOfLife.com\"</span> )</div><div class=\"line\">.then(</div><div class=\"line\">    winAtLife,</div><div class=\"line\">    keepSearching</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>看到<code>winAtLife()</code>和<code>keepSearching()</code>函数了吗？我们在说，”去问问生命的意义，不管你有没有找到答案，我们都继续”。<br>如果我们不传入<code>keepSearching</code>会怎样？除了作为一个乐观主义者假设你会找到答案然后在生命长河中取胜，这里会有什么危险呢？<br>如果promise没有找到生命的意义（或者如果在处理答案的过程中发生了javascript异常），它会默默地保留着错误的事实，也许会永远保留着。就算你等上一百万年，你都不会知道对于答案的请求失败了。<br>你只能通过观察才能知道它失败了。这可能需要深入到形而上学或者量子学的东西。让我们停止在这吧。<br>所以不带失败处理函数的promise是一个会默默地失败的promise。这并不好。这意味着如果你忘记了，你会陷入失败的陷阱而不是成功。<br>所以你会怀疑：为什么promises会忽略失败处理函数呢？因为你可能现在不在意失败的情况，只有以后某个时刻会关心。我们程序的暂时性意味着系统现在不会知道你以后会想做什么。现在忽略失败处理函数也许对你来说是正合适的，因为你知道你会把这个promise链接到另一个promise，并且那个promise有一个失败处理函数。<br>所以promise机制让你可以创建不需要监听失败的promise。<br>这里有一个很微妙的问题，很可能也是大多数刚接触promise的开发者会碰到的问题。</p>\n<h2 id=\"束缚我们的链子\"><a href=\"#束缚我们的链子\" class=\"headerlink\" title=\"束缚我们的链子\"></a>束缚我们的链子</h2><p>为了理解这个问题，我们首先需要理解promises是如何链接在一起的。我认为你会很快明白promise链是强大并且有一点复杂的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">ajax( <span class=\"string\">\"http://TheMeaningOfLife.com\"</span> )</div><div class=\"line\">.then(</div><div class=\"line\">    winAtLife,</div><div class=\"line\">    keepSearching</div><div class=\"line\">)</div><div class=\"line\"><span class=\"comment\">// a second promise returned here that we ignored!</span></div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n<p><code>ajax(..)</code>调用产生了第一个promise，然后<code>then(..)</code>调用产生了第二个promise。我们没有捕捉并且观察在这段代码中的第二个promise，但是我们可以。第二个promise是根据第一个promise处理函数如何运行来自动变成fulfilled状态(成功或者失败)。<br>第二个promise不会在意第一个promise是成功还是失败。它在意第一个promise的处理函数(不管成功还是失败)。<br>这是promise链的关键。但是这有一点不好理解，所以重复读上面那段话直到你理解为止。<br>考虑下promise代码通常是怎么写的(通过链):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>这段代码也可以像下面这么写，效果是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promiseA = ajax( <span class=\"string\">\"..\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> promiseB = promiseA.then( transformResult );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// we don't use `promiseC` here, but we could...</span></div></pre></td></tr></table></figure></p>\n<p>Promise A是唯一在意<code>ajax(..)</code>结果的promise。<br>Promise B只关心Promise A在<code>transformResult(..)</code>函数内部是如何处理的(不是Promise A的结果本身),同样的，Promise C只关心Promise B在<code>displayAnswer(..)</code>或者<code>reportError(..)</code>函数内部是如何处理的(不是Promise B结果本身)。<br>再一次，重复读这段话直到理解。<br>在<code>transformResult(..)</code>内部，如果它立刻完成了它的任务，然后Promise B就会立刻完成，不管成功还是失败。然而，如果<code>transformResult(..)</code>不能立刻完成，而是创建它自己的promise，我们称它为Promise H1(‘H’是’hidden’,因为它是隐藏在内部的)。原本Promise B返回的等待我们如何处理Promise A的promise，现在概念上被Promise H1替换了(并不是真的替换了，只是被说成一样的)。<br>所以，现在当你说<code>promiseB.then(..)</code>时，它实际上就像说<code>promiseH1.then(..)</code>。如果Promise H1成功了，<code>displayAnswer(..)</code>会被调用，但是如果它失败了，<code>reportError(..)</code>会被调用。<br>这就是promise链是如何工作的。<br>但是，如果Promise A(由ajax调用返回)失败了会怎样？<code>promiseA.then(..)</code>调用没有注册一个失败处理函数。它会默默地隐藏错误吗？它会的，除了我们链接上Promise B然后在上面注册一个错误处理函数:<code>reportError(..)</code>。如果Promise A失败了，<code>transformResult(..)</code>不会被调用，并且没有错误处理函数，所以Promise B马上被标记为失败，所以<code>reportError(..)</code>会被调用。<br>如果Promise A成功了，<code>transformResult(..)</code>会被执行，然后当运行<code>transformResult(..)</code>时有一个错误会怎样？Promise B被标记为失败，然后<code>reportError(..)</code>也会被调用。<br>但是这里是危险的地方，这个地方甚至有经验的开发者都会遗漏的！<br>如果Promise A成功了(成功的<code>ajax(..)</code>)，然后Promise B成功了(成功的<code>transformResult(..)</code>)，但是当运行<code>displayAnswer(..)</code>时有一个错误会怎样？<br>你也许会认为<code>reportError(..)</code>会被调用？大多数人会这么想，但是不是的。<br>为什么？因为来自<code>displayAnswer(..)</code>的一个错误或者失败promise导致一个失败的Promise C。我们监听Promise C失败的情况了吗？仔细看看。没有。<br>为了确保你不会漏掉这种错误并且让它默默地隐藏在Promise C状态内部，你也会希望监听Promise C的失败：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// need to do this:</span></div><div class=\"line\">promiseC.then( <span class=\"literal\">null</span>, reportError );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// or this:, which is the same thing:</span></div><div class=\"line\">promiseC.catch( reportError );</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Note: a silently ignored *Promise D* was created here!</span></div></pre></td></tr></table></figure></p>\n<p>OK,所以现在我们捕获<code>displayAnswer(..)</code>内部的错误。不得不去记住这个有一点坑爹。</p>\n<h2 id=\"乌龟\"><a href=\"#乌龟\" class=\"headerlink\" title=\"乌龟\"></a>乌龟</h2><p>但是有一个更加微妙的问题！如果当处理<code>displayAnswer(..)</code>返回的错误时，<code>reportError(..)</code>函数也有一个JS异常会怎样？会有人捕获这个错误吗？没有。<br>看！上面有一个隐含的Promise D，并且它会被告知<code>reportError(..)</code>内部的异常。<br>OMG，你肯定会想。什么时候才能停止？它会这样一直下去吗？<br>一些promise库作者认为有必要解决这个问题通过让”安静的错误”被作为全局异常抛出。但是这种机制该如何得知你不想再链接promise并且提供一个错误处理函数呢？它如何知道什么时候应该通报一个全局异常或者不通报呢？你肯定不希望当你已经捕获并且处理错误的情况下仍然有很多控制台错误信息。<br>在某种意义上，你需要可以标记一个promise为“final”，就像说“这是我链子中的最后一个promise”或者“我不打算再链接了，所以这是乌龟停止的地方”。如果在链的最后发生了错误并且没有被捕获，然后它需要被报告为一个全局异常。<br>从表面上我猜测这似乎是很明智的。这种情况下的实现像下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">promiseC</div><div class=\"line\">.catch( reportError )</div><div class=\"line\">.done(); <span class=\"comment\">// marking the end of the chain</span></div></pre></td></tr></table></figure></p>\n<p>你仍然需要记住调用<code>done()</code>，要不然错误还是会隐藏在最后一个promsie中。你必须使用稳固的错误处理函数。<br>“恶心”，你肯定会这么想。欢迎来到promises的欢乐世界。</p>\n<h2 id=\"Value-vs-Values\"><a href=\"#Value-vs-Values\" class=\"headerlink\" title=\"Value vs Values\"></a>Value vs Values</h2><p>对于错误处理已经说了很多了。另一个核心promsie的限制是一个promise代表一个单独的值。什么是一个单独的值呢？它是一个对象或者一个数组或者一个字符串或者一个数字。等等，我还可以在一个容器里放入多个值，就像一个数组或对象中的多个元素。Cool！<br>一个操作的最终结果不总是一个值，但是promise并不会这样，这很微妙并且又是另一个失败陷阱：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// make some ajax request</span></div><div class=\"line\">        <span class=\"comment\">// if you get a response, `resolve( answer, url )`</span></div><div class=\"line\">        <span class=\"comment\">// if it fails, `reject( excuses, url )`</span></div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then(</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">answer,url</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( answer, url ); <span class=\"comment\">// ..  undefined</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">excuses,url</span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log( excuses, url ); <span class=\"comment\">// ..  undefined</span></div><div class=\"line\">    &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>你看出这里面的问题了吗？如果你意外的尝试传递超过一个的值过去，不管传给失败处理函数还是成功处理函数，只有第一个值能被传递过去，其他几个会被默默地丢掉。<br>为什么？我相信这和组合的可预测性有关，或者一些其他花哨的词汇有关。<br>最后，你不得不记住包裹自己的多个值要不然你就会不知不觉的丢失数据。</p>\n<h2 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h2><p>真实世界中的app经常在“同一时间”发生超过一件事情。本质上说，我们需要构建一个处理器，并行处理多个事件，等待它们全部完成再执行回调函数。<br>相比于promise问题，这是一个异步流程控制的问题。一个单独的promise不能表达两个或更多并行发生的异步事件。你需要一个抽象层来处理它。<br>在计算机科学术语中，这个概念叫做一个“门”。一个等待所有任务完成，并且不关心它们完成顺序的门。<br>在promise世界中，我们添加一个API叫做<code>Promise.all(..)</code>，它可以构建一个promise来等待所有传递进来的promise完成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">    <span class=\"comment\">// these will all proceed \"in parallel\"</span></div><div class=\"line\">    makePromise1(),</div><div class=\"line\">    makePromise2(),</div><div class=\"line\">    makePromise3()</div><div class=\"line\">])</div><div class=\"line\">.then( .. );</div></pre></td></tr></table></figure></p>\n<p>一个相近的方法是<code>race()</code>。它的作用和<code>all()</code>一样，除了它只要有一个promise返回消息就执行回调函数，而不等待其他promise的结果。<br>当你思考这些方法的时候，你可能会想到许多方式来实现这些方法。<code>Promise.all(..)</code>和<code>Promise.race(..)</code>是原生提供的，因为这两个方法是很常用到的，但是如果你还需要其他的功能那么你就需要一个库来帮助你了。<br>限制的另一个表现就是你很快就会发现你需要自己使用<code>Array</code>的相关方法来管理promise列表，比如<code>.map(..)</code>和<code>.reduce(..)</code>。如果你对map/reduce不熟悉，那么赶紧去熟悉一下，因为你会发现当处理现实世界中promise的时候你经常会需要它们。<br>幸运的是，已经有很多库来帮助你了，并且每天还有很多新的库被创造出来。</p>\n<h2 id=\"Single-Shot-Of-Espresso，Please！\"><a href=\"#Single-Shot-Of-Espresso，Please！\" class=\"headerlink\" title=\"Single Shot Of Espresso，Please！\"></a>Single Shot Of Espresso，Please！</h2><p>另一个关于promise的事情是它们只会运行一次，然后就不用了。<br>如果你只需要处理单个事件，比如初始化一个也没或者资源加载，那么这样没什么问题。但是如果你有一个重复的事件(比如用户点击按钮)，你每次都需要执行一系列异步操作会怎么样呢？<br>Promise并不提供这样的功能，因为它们是不可变的，也就是不能被重置。要重复同样的promise，唯一的方法就是重新定义一个promise。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#my_button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</div><div class=\"line\">    doTask1( evt.target )</div><div class=\"line\">    .then( doTask2 )</div><div class=\"line\">    .then( doTask3 )</div><div class=\"line\">    .catch( handleError );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>太恶心了，不仅仅是因为重复创建promise对于效率有影响，而且它对于职责分散不利。你不得不把多个事件监听函数放在同一个函数中。如果有一个方式来改变这种情况就好了，这样事件监听和事件处理函数就能够分开了。<br>Microsoft的RxJS库把这种方式叫做”观察者模式”。<br>我的<em>asynquence</em>库有一个<code>react(..)</code>方法通过简单的方式提供了一个类似的功能。</p>\n<h2 id=\"盲区…\"><a href=\"#盲区…\" class=\"headerlink\" title=\"盲区…\"></a>盲区…</h2><p>在一个已经被使用回调函数的API占据的世界中，把promise插入到代码中比我们想象的要困难。考虑下面这段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAjax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        ajax( url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,response</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                reject( err );</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                resolve( response );</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; )</div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我认为promise解决了回调地狱的问题，但是它们代码看起来仍然像垃圾。<br>我们需要抽象层来使得用promise表示回调变得更简单。原生的promise并没有提供这个抽象层，所以结果就是通过原生promise写出来的代码还是很丑陋。但是如果有抽象层那么事情就变得很简单了。<br>例如，我的<em>asynquence</em>库提供了一个<code>errfcb()</code><a href=\"https://github.com/getify/asynquence/tree/master/contrib#errfcb-plugin\">插件</a>(error-first callback)，用它可以构建一个回调来处理下面这种场景:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAjax</span>(<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> sq = ASQ();</div><div class=\"line\">    ajax( url, sq.errfcb() );</div><div class=\"line\">    <span class=\"keyword\">return</span> sq;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Stop-The-Presses\"><a href=\"#Stop-The-Presses\" class=\"headerlink\" title=\"Stop The Presses!\"></a>Stop The Presses!</h2><p>有时，你想要取消一个promise而去做别的事情，但是如果现在你的promise正处在挂起状态会怎样呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Later</span></div><div class=\"line\">pr.cancel(); <span class=\"comment\">//  &lt;-- doesn't work!</span></div></pre></td></tr></table></figure></p>\n<p>所以，为了取消promise，你需要引入一下东西：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformResult</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!pr.ignored) &#123;</div><div class=\"line\">        <span class=\"comment\">// do something!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Later</span></div><div class=\"line\">pr.ignored = <span class=\"literal\">true</span>; <span class=\"comment\">// just hacking around</span></div></pre></td></tr></table></figure></p>\n<p>换句话说，你为了能够取消你的promise，在promise上面加了一层来处理这种情况。<br>你不能从promise取消注册处理函数。并且因为一个promise必须不可变，你能够直接取消一个promise这种情况是不允许出现的。从外部取消一个promise跟改变它的状态没有什么区别。它使得promise变得不可靠。<br>许多promise库都提供了这种功能，但是这明显是一个错误。取消这种行为是不需要promise，但是它可以出现在promise上面的一个抽象层里。</p>\n<h2 id=\"冗长\"><a href=\"#冗长\" class=\"headerlink\" title=\"冗长\"></a>冗长</h2><p>另一个关于原生promise的担心是有些事情并没有被实现，所以你必须自动手动实现它们，而这些事情对于可扩展性是很重要的，但是这些东西经常会导致令人讨厌的重复代码。<br>看一个例子，在每一个promise的完成步骤中，有一个设定就是你希望保持链式结构，所以<code>then(..)</code>方法会返回一个新的promise。但是如果你想要加入一个自己创建的promise并且从一个成功处理函数中返回，这样你的promise就可以加入到链的流程控制中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformResult</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// we have to manually create and return a promise here</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// whatever</span></div><div class=\"line\">    &#125; );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</div><div class=\"line\">.then( transformResult )</div><div class=\"line\">.then(</div><div class=\"line\">    displayAnswer,</div><div class=\"line\">    reportError</div><div class=\"line\">);</div></pre></td></tr></table></figure></p>\n<p>不同的是，就像上面解释的一样，从第一个<code>then(..)</code>返回的隐藏的promise立刻就完成(或者失败)，然后你就没办法让剩下的链异步延迟。<br>如果有一个抽象层能够通过某种方式把自动创建/链接的promise暴露给你，然后你就不需要创建自己的promise来替换了，这样该多好。<br>换句话说，如果有一个设定假设你需要为了异步的目的使用链，而不是你只是需要漂亮得执行异步。（也就是说你确实是希望你的代码可以异步执行，而不是说希望整个异步流程看过去好看点）。<br>另一个例子：你不能直接传递一个已经存在的promise给<code>then(..)</code>方法，你必须传递一个返回这个promise的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> pr = doTask2();</div><div class=\"line\"></div><div class=\"line\">doTask1()</div><div class=\"line\">.then( pr ); <span class=\"comment\">// would be nice, but doesn't work!</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// instead:</span></div><div class=\"line\"></div><div class=\"line\">doTask1()</div><div class=\"line\">.then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> pr; &#125; );</div></pre></td></tr></table></figure></p>\n<p>这个限制性是有很多原因的。但是它只是减弱了有利于保持可扩展性和可预测性的用法的简洁。抽象可以容易的解决这个问题。</p>\n<h1 id=\"全剧终\"><a href=\"#全剧终\" class=\"headerlink\" title=\"全剧终\"></a>全剧终</h1><p>所有这些原因就是为什么原生的promise API是强大同时也是有局限性的。<br>关于扩展和抽象是一个成熟的领域。许多库正在做这些工作。就像我之前说的，<a href=\"http://github.com/getify/asynquence\">asynquence</a>是我自己的promise抽象库。它很小但是很强大。它解决了所有博客中提到的promise的问题。<br>我后面会写一篇详细的博客来介绍<em>asynquence</em>是如果解决这些问题的，所以敬请期待。</p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-5/\">http://blog.getify.com/promises-part-5/</a></p>\n<p><a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/#/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.转换问题</a><br><a href=\"/#/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/#/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/#/blog/2014/07/19/understand-promise-5/\">深入理解Promise五部曲–5.乐高问题</a></p>"},{"title":"(译)如何写出友好的README","date":"2016-09-06T14:46:47.000Z","_content":"> 写在最前面：\n最近陆续把工作中积累的[vue组件](https://github.com/lakb248)开源，在写组件的README的时候不知道该怎么能写得很友(bi)好(ge)一些，想起来之前看的这篇文件，很详细的介绍了写README的几个方面，所以翻译出来跟大家分享下，大家可以根据各自的项目情况来写自己的README。\n\n一个项目的README是非常重要的；别人看到你的开源项目的时候第一个看到的就是README，同时README也常常是项目唯一的文档。你的README对于你的项目来说，就相当于一个公司的官方网站一样，就像网站需要注意很多用户体验一样，我们的README也应该从用户的角度出发。\n这篇文章将告诉我们如何写一个友好的README-不论对于新手还是对你项目很了解的人来说，这个README都会非常有帮助同时可以满足开发者的需求。\n我们会利用一个叫做\"Paddington\"的虚拟的库作为例子，分部分来讲解这些东西。让我们从头开始吧。\n\n# 项目标题\n毫无疑问，一个网站最上面一部分应该用来展示最重要的信息。我们可以把这个原则放在我们的README上。\n所以什么才是最重要的东西呢？正如所起到的作用一样，项目名字是很重要的。所以我们先加上下面这些内容：\n\n![此处输入图片的描述][1]\n\n上面这个基本可以满足新用户的需求，但是README的头部也需要满足已存在的用户的需求，他们有一些很容易回答的问题。当我访问一个我很熟悉的项目的时候，我会想知道：\n\n+ 最新的版本的多少？\n+ 它构建通过了吗？\n\n作为一个新用户，我也有一些容易回答的问题：\n\n+ 它是用什么语言写的？\n+ 它支持哪个语言版本？\n+ 它是否通过测试？\n+ 它采用哪种开源证书？\n\n我们可以通过徽章来回答上面所有的问题！\n我在项目描述下面加了一行徽章，单独一行不会占据很大的空间同时又能涵盖许多信息：\n\n![此处输入图片的描述][2]\n\n是不是很好看？我使用了一个叫做[shields.io](http://shields.io/)的服务，它提供了一致的徽章图标同时也提供了一个添加自定义徽章的方式，比如开源证书信息。\n对于头部的最后一部分，如果项目足够简单的话，我们可以添加一个简单的例子。这对于新手理解你的项目是用来干什么的有很大帮助，就像项目描述一样。\n\n![此处输入图片的描述][3]\n\n我们在头部有限的空间里面涵盖了丰富的内容。好极了！现在我们需要看看一些更具体的问题。如果我们的README会变得很长，那么要导航到某个具体的内容就变得很困难，现在添加一个目录就变得很有意义。\n# 目录\n目录对于相对比较短的README来说也是很有用的。它解决了信息索引的需求，为用户提供了一些有帮助的跳转链接到文档的不同部分。\n\n![此处输入图片的描述][4]\n\n如果用户只想要看看使用说明，为什么要让他们滚动页面看到他并不需要的安装指南呢，更何况安装指南只有第一次使用项目的时候会用到。\n\n# 必要条件\n现在我们来到文档中对于新用户更有用的部分，我们要确保他们获取他们所需要的信息。这部分就是用来添加所有你项目的必要条件的地方：语言，语言版本，包管理工具，操作系统。\n\n![此处输入图片的描述][5]\n\n这些内容可以直接写上去或者通过列表来展示，明显列表更清晰一些。这对你来说也很有用，这可以帮你有效的减少因为缺少必要条件而提交的ISSUE的数量。\n在写必要条件的时候，你应该假设从0基础开始使用你的项目。确保你添加了语言和包管理工具的相关链接，这样你也许能帮助到对于项目一无所知的新手。\n\n# 用法\n你的使用手册可能是你README中最重要的部分，如果没有这个很少人可以知道怎么用你的项目。\n这部分可以用很多种方式来写，这取决于你项目的类型。你也许需要一个API手册，一个web接口或者一个命令行工具；有时需要不只一种。下面这个手册涉及到一个Javascript API，不过你可以把这个方式应用到其他的接口文档上。\n首先我们需要提到如何获取代码，是通过clone代码还是利用包管理工具来安装。别忘了添加一些有用的链接，来提供一些便利。\n\n![此处输入图片的描述][6]\n\n当给一个API写文档的时候，尽量保持简单清晰。也就是说先写出接口的主要用例。这可以吸引第一次看的用户。在这个例子中，我们突出了方法的参数和返回类型，并附上的例子。越明确，就能给你减少越多的麻烦。\n\n![此处输入图片的描述][7]\n\n我们已经涵盖了我们的主要用例，同时指明一些边界用例以及用户在使用过程中会遇到的问题也是很有帮助的。这个可以作为使用手册的子章节放在使用手册的最后。试着包括一些有问题的用户会搜索的关键词。\n\n![此处输入图片的描述][8]\n\n# 贡献\n\n这部分也是很重要的，这决定了是否会有用户来给你贡献代码。就算你有一个CONTRIBUTING文件，如果一个人没有Github或者开源的经验就很难找到它。这部分应该包括基本信息并且如果你有一个CONTRIBUTING文件应该加上一个链接。\n增加一个关于如何运行测试和提交pull request的简单介绍，对你来说也很有用。这意味着你review pull request的过程会更加有效率。\n\n![此处输入图片的描述][9]\n\n# 支持和版本变化\n一个关于项目支持状态的章节也是很有用的，特别是当你发布了很多个不同的主版本的时候。这部分对于一些要进行版本迁移的老用户来说非常有帮助。\n一个完整的迁移指南对于README来说可能太长了，所以我在项目中加入了一个MIGRATION文件，同时在README中添加了链接。\n如果你有一个对于老版本的支持计划，请突出他们。同时你也可以用一个简单的表格来列出主要的版本和他们支持的最后期限。\n\n![此处输入图片的描述][10]\n\n# 证书\n\n最后你应该加一个版权信息以及一个项目所使用开源证书的链接。如果没有这些信息很多用户无法使用你的项目，特别是一些大企业。就算你的项目里面有一个LICENSE文件，添加一个证书的链接也是很有用的。\n\n# 其他部分\n我们上面介绍的内容并没有包括了README可以写的全部内容。我项目中还包括了其他内容包括：\n\n+ 为什么？\n\n    如果你的项目做了一些其他项目已经做了的事情，或者特别复杂，提供一些解释也是很有帮助的。\n\n+ 共有的问题\n\n    一个用来列出经常出现的问题的地方，可以减少重复打开的ISSUE。\n\n+ 例子\n\n    一个指向例子的链接。\n\n+ 变更日志\n\n    一个关于项目变更日志的描述。\n\n# 一个完整的README\n\n现在我们已经拥有一个友好的README，你可以在[这里](https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-readme-md)看到所有内容。我希望更多的人在写文档的时候可以考虑用户的需求，如果你觉得漏了什么请告诉我。我对于如何写好README的建议和想法很感兴趣。\n\n  [1]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-01.png\n  [2]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-02.png\n  [3]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-03.png\n  [4]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/table-of-contents-01.png\n  [5]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/requirements-01.png\n  [6]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-01.png\n  [7]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-02.png\n  [8]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-03.png\n  [9]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/contributing-01.png\n  [10]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/support-and-migration-01.png\n","source":"_posts/writing-a-friendly-readme.md","raw":"title: (译)如何写出友好的README\ndate: 2016-09-06 22:46:47\ntags: ['others']\n---\n> 写在最前面：\n最近陆续把工作中积累的[vue组件](https://github.com/lakb248)开源，在写组件的README的时候不知道该怎么能写得很友(bi)好(ge)一些，想起来之前看的这篇文件，很详细的介绍了写README的几个方面，所以翻译出来跟大家分享下，大家可以根据各自的项目情况来写自己的README。\n\n一个项目的README是非常重要的；别人看到你的开源项目的时候第一个看到的就是README，同时README也常常是项目唯一的文档。你的README对于你的项目来说，就相当于一个公司的官方网站一样，就像网站需要注意很多用户体验一样，我们的README也应该从用户的角度出发。\n这篇文章将告诉我们如何写一个友好的README-不论对于新手还是对你项目很了解的人来说，这个README都会非常有帮助同时可以满足开发者的需求。\n我们会利用一个叫做\"Paddington\"的虚拟的库作为例子，分部分来讲解这些东西。让我们从头开始吧。\n\n# 项目标题\n毫无疑问，一个网站最上面一部分应该用来展示最重要的信息。我们可以把这个原则放在我们的README上。\n所以什么才是最重要的东西呢？正如所起到的作用一样，项目名字是很重要的。所以我们先加上下面这些内容：\n\n![此处输入图片的描述][1]\n\n上面这个基本可以满足新用户的需求，但是README的头部也需要满足已存在的用户的需求，他们有一些很容易回答的问题。当我访问一个我很熟悉的项目的时候，我会想知道：\n\n+ 最新的版本的多少？\n+ 它构建通过了吗？\n\n作为一个新用户，我也有一些容易回答的问题：\n\n+ 它是用什么语言写的？\n+ 它支持哪个语言版本？\n+ 它是否通过测试？\n+ 它采用哪种开源证书？\n\n我们可以通过徽章来回答上面所有的问题！\n我在项目描述下面加了一行徽章，单独一行不会占据很大的空间同时又能涵盖许多信息：\n\n![此处输入图片的描述][2]\n\n是不是很好看？我使用了一个叫做[shields.io](http://shields.io/)的服务，它提供了一致的徽章图标同时也提供了一个添加自定义徽章的方式，比如开源证书信息。\n对于头部的最后一部分，如果项目足够简单的话，我们可以添加一个简单的例子。这对于新手理解你的项目是用来干什么的有很大帮助，就像项目描述一样。\n\n![此处输入图片的描述][3]\n\n我们在头部有限的空间里面涵盖了丰富的内容。好极了！现在我们需要看看一些更具体的问题。如果我们的README会变得很长，那么要导航到某个具体的内容就变得很困难，现在添加一个目录就变得很有意义。\n# 目录\n目录对于相对比较短的README来说也是很有用的。它解决了信息索引的需求，为用户提供了一些有帮助的跳转链接到文档的不同部分。\n\n![此处输入图片的描述][4]\n\n如果用户只想要看看使用说明，为什么要让他们滚动页面看到他并不需要的安装指南呢，更何况安装指南只有第一次使用项目的时候会用到。\n\n# 必要条件\n现在我们来到文档中对于新用户更有用的部分，我们要确保他们获取他们所需要的信息。这部分就是用来添加所有你项目的必要条件的地方：语言，语言版本，包管理工具，操作系统。\n\n![此处输入图片的描述][5]\n\n这些内容可以直接写上去或者通过列表来展示，明显列表更清晰一些。这对你来说也很有用，这可以帮你有效的减少因为缺少必要条件而提交的ISSUE的数量。\n在写必要条件的时候，你应该假设从0基础开始使用你的项目。确保你添加了语言和包管理工具的相关链接，这样你也许能帮助到对于项目一无所知的新手。\n\n# 用法\n你的使用手册可能是你README中最重要的部分，如果没有这个很少人可以知道怎么用你的项目。\n这部分可以用很多种方式来写，这取决于你项目的类型。你也许需要一个API手册，一个web接口或者一个命令行工具；有时需要不只一种。下面这个手册涉及到一个Javascript API，不过你可以把这个方式应用到其他的接口文档上。\n首先我们需要提到如何获取代码，是通过clone代码还是利用包管理工具来安装。别忘了添加一些有用的链接，来提供一些便利。\n\n![此处输入图片的描述][6]\n\n当给一个API写文档的时候，尽量保持简单清晰。也就是说先写出接口的主要用例。这可以吸引第一次看的用户。在这个例子中，我们突出了方法的参数和返回类型，并附上的例子。越明确，就能给你减少越多的麻烦。\n\n![此处输入图片的描述][7]\n\n我们已经涵盖了我们的主要用例，同时指明一些边界用例以及用户在使用过程中会遇到的问题也是很有帮助的。这个可以作为使用手册的子章节放在使用手册的最后。试着包括一些有问题的用户会搜索的关键词。\n\n![此处输入图片的描述][8]\n\n# 贡献\n\n这部分也是很重要的，这决定了是否会有用户来给你贡献代码。就算你有一个CONTRIBUTING文件，如果一个人没有Github或者开源的经验就很难找到它。这部分应该包括基本信息并且如果你有一个CONTRIBUTING文件应该加上一个链接。\n增加一个关于如何运行测试和提交pull request的简单介绍，对你来说也很有用。这意味着你review pull request的过程会更加有效率。\n\n![此处输入图片的描述][9]\n\n# 支持和版本变化\n一个关于项目支持状态的章节也是很有用的，特别是当你发布了很多个不同的主版本的时候。这部分对于一些要进行版本迁移的老用户来说非常有帮助。\n一个完整的迁移指南对于README来说可能太长了，所以我在项目中加入了一个MIGRATION文件，同时在README中添加了链接。\n如果你有一个对于老版本的支持计划，请突出他们。同时你也可以用一个简单的表格来列出主要的版本和他们支持的最后期限。\n\n![此处输入图片的描述][10]\n\n# 证书\n\n最后你应该加一个版权信息以及一个项目所使用开源证书的链接。如果没有这些信息很多用户无法使用你的项目，特别是一些大企业。就算你的项目里面有一个LICENSE文件，添加一个证书的链接也是很有用的。\n\n# 其他部分\n我们上面介绍的内容并没有包括了README可以写的全部内容。我项目中还包括了其他内容包括：\n\n+ 为什么？\n\n    如果你的项目做了一些其他项目已经做了的事情，或者特别复杂，提供一些解释也是很有帮助的。\n\n+ 共有的问题\n\n    一个用来列出经常出现的问题的地方，可以减少重复打开的ISSUE。\n\n+ 例子\n\n    一个指向例子的链接。\n\n+ 变更日志\n\n    一个关于项目变更日志的描述。\n\n# 一个完整的README\n\n现在我们已经拥有一个友好的README，你可以在[这里](https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-readme-md)看到所有内容。我希望更多的人在写文档的时候可以考虑用户的需求，如果你觉得漏了什么请告诉我。我对于如何写好README的建议和想法很感兴趣。\n\n  [1]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-01.png\n  [2]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-02.png\n  [3]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-03.png\n  [4]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/table-of-contents-01.png\n  [5]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/requirements-01.png\n  [6]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-01.png\n  [7]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-02.png\n  [8]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-03.png\n  [9]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/contributing-01.png\n  [10]: http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/support-and-migration-01.png\n","slug":"writing-a-friendly-readme","published":1,"updated":"2016-09-06T15:13:03.000Z","_id":"cisrliah1000027ovnghwf0qi","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>写在最前面：<br>最近陆续把工作中积累的<a href=\"https://github.com/lakb248\" target=\"_blank\" rel=\"external\">vue组件</a>开源，在写组件的README的时候不知道该怎么能写得很友(bi)好(ge)一些，想起来之前看的这篇文件，很详细的介绍了写README的几个方面，所以翻译出来跟大家分享下，大家可以根据各自的项目情况来写自己的README。</p>\n</blockquote>\n<p>一个项目的README是非常重要的；别人看到你的开源项目的时候第一个看到的就是README，同时README也常常是项目唯一的文档。你的README对于你的项目来说，就相当于一个公司的官方网站一样，就像网站需要注意很多用户体验一样，我们的README也应该从用户的角度出发。<br>这篇文章将告诉我们如何写一个友好的README-不论对于新手还是对你项目很了解的人来说，这个README都会非常有帮助同时可以满足开发者的需求。<br>我们会利用一个叫做”Paddington”的虚拟的库作为例子，分部分来讲解这些东西。让我们从头开始吧。</p>\n<h1 id=\"项目标题\"><a href=\"#项目标题\" class=\"headerlink\" title=\"项目标题\"></a>项目标题</h1><p>毫无疑问，一个网站最上面一部分应该用来展示最重要的信息。我们可以把这个原则放在我们的README上。<br>所以什么才是最重要的东西呢？正如所起到的作用一样，项目名字是很重要的。所以我们先加上下面这些内容：</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>上面这个基本可以满足新用户的需求，但是README的头部也需要满足已存在的用户的需求，他们有一些很容易回答的问题。当我访问一个我很熟悉的项目的时候，我会想知道：</p>\n<ul>\n<li>最新的版本的多少？</li>\n<li>它构建通过了吗？</li>\n</ul>\n<p>作为一个新用户，我也有一些容易回答的问题：</p>\n<ul>\n<li>它是用什么语言写的？</li>\n<li>它支持哪个语言版本？</li>\n<li>它是否通过测试？</li>\n<li>它采用哪种开源证书？</li>\n</ul>\n<p>我们可以通过徽章来回答上面所有的问题！<br>我在项目描述下面加了一行徽章，单独一行不会占据很大的空间同时又能涵盖许多信息：</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-02.png\" alt=\"此处输入图片的描述\"></p>\n<p>是不是很好看？我使用了一个叫做<a href=\"http://shields.io/\" target=\"_blank\" rel=\"external\">shields.io</a>的服务，它提供了一致的徽章图标同时也提供了一个添加自定义徽章的方式，比如开源证书信息。<br>对于头部的最后一部分，如果项目足够简单的话，我们可以添加一个简单的例子。这对于新手理解你的项目是用来干什么的有很大帮助，就像项目描述一样。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-03.png\" alt=\"此处输入图片的描述\"></p>\n<p>我们在头部有限的空间里面涵盖了丰富的内容。好极了！现在我们需要看看一些更具体的问题。如果我们的README会变得很长，那么要导航到某个具体的内容就变得很困难，现在添加一个目录就变得很有意义。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p>目录对于相对比较短的README来说也是很有用的。它解决了信息索引的需求，为用户提供了一些有帮助的跳转链接到文档的不同部分。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/table-of-contents-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>如果用户只想要看看使用说明，为什么要让他们滚动页面看到他并不需要的安装指南呢，更何况安装指南只有第一次使用项目的时候会用到。</p>\n<h1 id=\"必要条件\"><a href=\"#必要条件\" class=\"headerlink\" title=\"必要条件\"></a>必要条件</h1><p>现在我们来到文档中对于新用户更有用的部分，我们要确保他们获取他们所需要的信息。这部分就是用来添加所有你项目的必要条件的地方：语言，语言版本，包管理工具，操作系统。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/requirements-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>这些内容可以直接写上去或者通过列表来展示，明显列表更清晰一些。这对你来说也很有用，这可以帮你有效的减少因为缺少必要条件而提交的ISSUE的数量。<br>在写必要条件的时候，你应该假设从0基础开始使用你的项目。确保你添加了语言和包管理工具的相关链接，这样你也许能帮助到对于项目一无所知的新手。</p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>你的使用手册可能是你README中最重要的部分，如果没有这个很少人可以知道怎么用你的项目。<br>这部分可以用很多种方式来写，这取决于你项目的类型。你也许需要一个API手册，一个web接口或者一个命令行工具；有时需要不只一种。下面这个手册涉及到一个Javascript API，不过你可以把这个方式应用到其他的接口文档上。<br>首先我们需要提到如何获取代码，是通过clone代码还是利用包管理工具来安装。别忘了添加一些有用的链接，来提供一些便利。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>当给一个API写文档的时候，尽量保持简单清晰。也就是说先写出接口的主要用例。这可以吸引第一次看的用户。在这个例子中，我们突出了方法的参数和返回类型，并附上的例子。越明确，就能给你减少越多的麻烦。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-02.png\" alt=\"此处输入图片的描述\"></p>\n<p>我们已经涵盖了我们的主要用例，同时指明一些边界用例以及用户在使用过程中会遇到的问题也是很有帮助的。这个可以作为使用手册的子章节放在使用手册的最后。试着包括一些有问题的用户会搜索的关键词。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-03.png\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"贡献\"><a href=\"#贡献\" class=\"headerlink\" title=\"贡献\"></a>贡献</h1><p>这部分也是很重要的，这决定了是否会有用户来给你贡献代码。就算你有一个CONTRIBUTING文件，如果一个人没有Github或者开源的经验就很难找到它。这部分应该包括基本信息并且如果你有一个CONTRIBUTING文件应该加上一个链接。<br>增加一个关于如何运行测试和提交pull request的简单介绍，对你来说也很有用。这意味着你review pull request的过程会更加有效率。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/contributing-01.png\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"支持和版本变化\"><a href=\"#支持和版本变化\" class=\"headerlink\" title=\"支持和版本变化\"></a>支持和版本变化</h1><p>一个关于项目支持状态的章节也是很有用的，特别是当你发布了很多个不同的主版本的时候。这部分对于一些要进行版本迁移的老用户来说非常有帮助。<br>一个完整的迁移指南对于README来说可能太长了，所以我在项目中加入了一个MIGRATION文件，同时在README中添加了链接。<br>如果你有一个对于老版本的支持计划，请突出他们。同时你也可以用一个简单的表格来列出主要的版本和他们支持的最后期限。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/support-and-migration-01.png\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h1><p>最后你应该加一个版权信息以及一个项目所使用开源证书的链接。如果没有这些信息很多用户无法使用你的项目，特别是一些大企业。就算你的项目里面有一个LICENSE文件，添加一个证书的链接也是很有用的。</p>\n<h1 id=\"其他部分\"><a href=\"#其他部分\" class=\"headerlink\" title=\"其他部分\"></a>其他部分</h1><p>我们上面介绍的内容并没有包括了README可以写的全部内容。我项目中还包括了其他内容包括：</p>\n<ul>\n<li><p>为什么？</p>\n<p>  如果你的项目做了一些其他项目已经做了的事情，或者特别复杂，提供一些解释也是很有帮助的。</p>\n</li>\n<li><p>共有的问题</p>\n<p>  一个用来列出经常出现的问题的地方，可以减少重复打开的ISSUE。</p>\n</li>\n<li><p>例子</p>\n<p>  一个指向例子的链接。</p>\n</li>\n<li><p>变更日志</p>\n<p>  一个关于项目变更日志的描述。</p>\n</li>\n</ul>\n<h1 id=\"一个完整的README\"><a href=\"#一个完整的README\" class=\"headerlink\" title=\"一个完整的README\"></a>一个完整的README</h1><p>现在我们已经拥有一个友好的README，你可以在<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-readme-md\" target=\"_blank\" rel=\"external\">这里</a>看到所有内容。我希望更多的人在写文档的时候可以考虑用户的需求，如果你觉得漏了什么请告诉我。我对于如何写好README的建议和想法很感兴趣。</p>\n","excerpt":"","more":"<blockquote>\n<p>写在最前面：<br>最近陆续把工作中积累的<a href=\"https://github.com/lakb248\">vue组件</a>开源，在写组件的README的时候不知道该怎么能写得很友(bi)好(ge)一些，想起来之前看的这篇文件，很详细的介绍了写README的几个方面，所以翻译出来跟大家分享下，大家可以根据各自的项目情况来写自己的README。</p>\n</blockquote>\n<p>一个项目的README是非常重要的；别人看到你的开源项目的时候第一个看到的就是README，同时README也常常是项目唯一的文档。你的README对于你的项目来说，就相当于一个公司的官方网站一样，就像网站需要注意很多用户体验一样，我们的README也应该从用户的角度出发。<br>这篇文章将告诉我们如何写一个友好的README-不论对于新手还是对你项目很了解的人来说，这个README都会非常有帮助同时可以满足开发者的需求。<br>我们会利用一个叫做”Paddington”的虚拟的库作为例子，分部分来讲解这些东西。让我们从头开始吧。</p>\n<h1 id=\"项目标题\"><a href=\"#项目标题\" class=\"headerlink\" title=\"项目标题\"></a>项目标题</h1><p>毫无疑问，一个网站最上面一部分应该用来展示最重要的信息。我们可以把这个原则放在我们的README上。<br>所以什么才是最重要的东西呢？正如所起到的作用一样，项目名字是很重要的。所以我们先加上下面这些内容：</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>上面这个基本可以满足新用户的需求，但是README的头部也需要满足已存在的用户的需求，他们有一些很容易回答的问题。当我访问一个我很熟悉的项目的时候，我会想知道：</p>\n<ul>\n<li>最新的版本的多少？</li>\n<li>它构建通过了吗？</li>\n</ul>\n<p>作为一个新用户，我也有一些容易回答的问题：</p>\n<ul>\n<li>它是用什么语言写的？</li>\n<li>它支持哪个语言版本？</li>\n<li>它是否通过测试？</li>\n<li>它采用哪种开源证书？</li>\n</ul>\n<p>我们可以通过徽章来回答上面所有的问题！<br>我在项目描述下面加了一行徽章，单独一行不会占据很大的空间同时又能涵盖许多信息：</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-02.png\" alt=\"此处输入图片的描述\"></p>\n<p>是不是很好看？我使用了一个叫做<a href=\"http://shields.io/\">shields.io</a>的服务，它提供了一致的徽章图标同时也提供了一个添加自定义徽章的方式，比如开源证书信息。<br>对于头部的最后一部分，如果项目足够简单的话，我们可以添加一个简单的例子。这对于新手理解你的项目是用来干什么的有很大帮助，就像项目描述一样。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/heading-03.png\" alt=\"此处输入图片的描述\"></p>\n<p>我们在头部有限的空间里面涵盖了丰富的内容。好极了！现在我们需要看看一些更具体的问题。如果我们的README会变得很长，那么要导航到某个具体的内容就变得很困难，现在添加一个目录就变得很有意义。</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><p>目录对于相对比较短的README来说也是很有用的。它解决了信息索引的需求，为用户提供了一些有帮助的跳转链接到文档的不同部分。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/table-of-contents-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>如果用户只想要看看使用说明，为什么要让他们滚动页面看到他并不需要的安装指南呢，更何况安装指南只有第一次使用项目的时候会用到。</p>\n<h1 id=\"必要条件\"><a href=\"#必要条件\" class=\"headerlink\" title=\"必要条件\"></a>必要条件</h1><p>现在我们来到文档中对于新用户更有用的部分，我们要确保他们获取他们所需要的信息。这部分就是用来添加所有你项目的必要条件的地方：语言，语言版本，包管理工具，操作系统。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/requirements-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>这些内容可以直接写上去或者通过列表来展示，明显列表更清晰一些。这对你来说也很有用，这可以帮你有效的减少因为缺少必要条件而提交的ISSUE的数量。<br>在写必要条件的时候，你应该假设从0基础开始使用你的项目。确保你添加了语言和包管理工具的相关链接，这样你也许能帮助到对于项目一无所知的新手。</p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>你的使用手册可能是你README中最重要的部分，如果没有这个很少人可以知道怎么用你的项目。<br>这部分可以用很多种方式来写，这取决于你项目的类型。你也许需要一个API手册，一个web接口或者一个命令行工具；有时需要不只一种。下面这个手册涉及到一个Javascript API，不过你可以把这个方式应用到其他的接口文档上。<br>首先我们需要提到如何获取代码，是通过clone代码还是利用包管理工具来安装。别忘了添加一些有用的链接，来提供一些便利。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-01.png\" alt=\"此处输入图片的描述\"></p>\n<p>当给一个API写文档的时候，尽量保持简单清晰。也就是说先写出接口的主要用例。这可以吸引第一次看的用户。在这个例子中，我们突出了方法的参数和返回类型，并附上的例子。越明确，就能给你减少越多的麻烦。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-02.png\" alt=\"此处输入图片的描述\"></p>\n<p>我们已经涵盖了我们的主要用例，同时指明一些边界用例以及用户在使用过程中会遇到的问题也是很有帮助的。这个可以作为使用手册的子章节放在使用手册的最后。试着包括一些有问题的用户会搜索的关键词。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/usage-03.png\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"贡献\"><a href=\"#贡献\" class=\"headerlink\" title=\"贡献\"></a>贡献</h1><p>这部分也是很重要的，这决定了是否会有用户来给你贡献代码。就算你有一个CONTRIBUTING文件，如果一个人没有Github或者开源的经验就很难找到它。这部分应该包括基本信息并且如果你有一个CONTRIBUTING文件应该加上一个链接。<br>增加一个关于如何运行测试和提交pull request的简单介绍，对你来说也很有用。这意味着你review pull request的过程会更加有效率。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/contributing-01.png\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"支持和版本变化\"><a href=\"#支持和版本变化\" class=\"headerlink\" title=\"支持和版本变化\"></a>支持和版本变化</h1><p>一个关于项目支持状态的章节也是很有用的，特别是当你发布了很多个不同的主版本的时候。这部分对于一些要进行版本迁移的老用户来说非常有帮助。<br>一个完整的迁移指南对于README来说可能太长了，所以我在项目中加入了一个MIGRATION文件，同时在README中添加了链接。<br>如果你有一个对于老版本的支持计划，请突出他们。同时你也可以用一个简单的表格来列出主要的版本和他们支持的最后期限。</p>\n<p><img src=\"http://rowanmanning.com/media/images/posts/writing-a-friendly-readme/support-and-migration-01.png\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"证书\"><a href=\"#证书\" class=\"headerlink\" title=\"证书\"></a>证书</h1><p>最后你应该加一个版权信息以及一个项目所使用开源证书的链接。如果没有这些信息很多用户无法使用你的项目，特别是一些大企业。就算你的项目里面有一个LICENSE文件，添加一个证书的链接也是很有用的。</p>\n<h1 id=\"其他部分\"><a href=\"#其他部分\" class=\"headerlink\" title=\"其他部分\"></a>其他部分</h1><p>我们上面介绍的内容并没有包括了README可以写的全部内容。我项目中还包括了其他内容包括：</p>\n<ul>\n<li><p>为什么？</p>\n<p>  如果你的项目做了一些其他项目已经做了的事情，或者特别复杂，提供一些解释也是很有帮助的。</p>\n</li>\n<li><p>共有的问题</p>\n<p>  一个用来列出经常出现的问题的地方，可以减少重复打开的ISSUE。</p>\n</li>\n<li><p>例子</p>\n<p>  一个指向例子的链接。</p>\n</li>\n<li><p>变更日志</p>\n<p>  一个关于项目变更日志的描述。</p>\n</li>\n</ul>\n<h1 id=\"一个完整的README\"><a href=\"#一个完整的README\" class=\"headerlink\" title=\"一个完整的README\"></a>一个完整的README</h1><p>现在我们已经拥有一个友好的README，你可以在<a href=\"https://gist.github.com/rowanmanning/77f31b2392dda1b58674#file-readme-md\">这里</a>看到所有内容。我希望更多的人在写文档的时候可以考虑用户的需求，如果你觉得漏了什么请告诉我。我对于如何写好README的建议和想法很感兴趣。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cisrlbvjj00000povlbhqh9ul","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvkd000a0povz2jlmf4d"},{"post_id":"cisrlbvjj00000povlbhqh9ul","tag_id":"cisrlbvjy00050povedcraznm","_id":"cisrlbvkg000c0povvipzoe87"},{"post_id":"cisrlbvkd000b0povod3f1yi3","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvkj000f0povsfoea8le"},{"post_id":"cisrlbvkd000b0povod3f1yi3","tag_id":"cisrlbvjy00050povedcraznm","_id":"cisrlbvkl000h0povtnk4xqlj"},{"post_id":"cisrlbvjp00010povqwrav3s3","tag_id":"cisrlbvkc00090povmjbc2hxl","_id":"cisrlbvko000k0povh39hpw5i"},{"post_id":"cisrlbvkg000d0povix05zpqo","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvkq000m0povmsi6dhgi"},{"post_id":"cisrlbvjw00030povn42bt94w","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvkw000q0povy3zjhwc8"},{"post_id":"cisrlbvjw00030povn42bt94w","tag_id":"cisrlbvjy00050povedcraznm","_id":"cisrlbvl0000s0povuo5oslbk"},{"post_id":"cisrlbvku000p0pov2riid8p6","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvl2000v0povaorqsem7"},{"post_id":"cisrlbvjx00040povxl3mvyf1","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvl3000x0pov5s4k99fy"},{"post_id":"cisrlbvjx00040povxl3mvyf1","tag_id":"cisrlbvjy00050povedcraznm","_id":"cisrlbvl500100povd10rk7ab"},{"post_id":"cisrlbvjz00060povvhlispjt","tag_id":"cisrlbvl0000t0povb6okz34e","_id":"cisrlbvl500110povbcbmh1ze"},{"post_id":"cisrlbvk400070povcpdbh1e3","tag_id":"cisrlbvl4000y0povi6tu61xz","_id":"cisrlbvl600130povhbh892d8"},{"post_id":"cisrlbvk700080pov3qdh60jw","tag_id":"cisrlbvl4000y0povi6tu61xz","_id":"cisrlbvl700150povu3c9nu0b"},{"post_id":"cisrlbvkk000g0povk8ducpva","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvl900170povcjeeujh6"},{"post_id":"cisrlbvkk000g0povk8ducpva","tag_id":"cisrlbvl600140povfb6mjwp5","_id":"cisrlbvl900180povdnxd34h4"},{"post_id":"cisrlbvkl000i0povlj5so3nu","tag_id":"cisrlbvl900160pov8lherxa9","_id":"cisrlbvlb001b0povuffyfc4l"},{"post_id":"cisrlbvkl000i0povlj5so3nu","tag_id":"cisrlbvl900190pov6eq3lpng","_id":"cisrlbvlb001c0povt2uq0btx"},{"post_id":"cisrlbvko000l0povckc59u0p","tag_id":"cisrlbvla001a0povu3xfxnjl","_id":"cisrlbvlb001e0pov40oib9r5"},{"post_id":"cisrlbvkr000n0pov85s571s1","tag_id":"cisrlbvlb001d0povj4u32nb2","_id":"cisrlbvlb001g0povdvrx8mel"},{"post_id":"cisrlbvky000r0pov107kd9db","tag_id":"cisrlbvlb001f0pov0msmj9ii","_id":"cisrlbvlc001i0povki0koutw"},{"post_id":"cisrlbvl1000u0povn49b6fpk","tag_id":"cisrlbvlb001h0povvfbse2wy","_id":"cisrlbvld001k0povvzmct9c4"},{"post_id":"cisrlbvl2000w0povta3wtvyb","tag_id":"cisrlbvlb001h0povvfbse2wy","_id":"cisrlbvlf001m0pov6pu0mlms"},{"post_id":"cisrlbvl4000z0povmsf44vfd","tag_id":"cisrlbvlb001h0povvfbse2wy","_id":"cisrlbvlf001n0povw8etvl75"},{"post_id":"cisrlbvlh001o0povox51g3q5","tag_id":"cisrlbvlb001h0povvfbse2wy","_id":"cisrlbvlm001q0pov8wxomp36"},{"post_id":"cisrlbvll001p0pov2mzfottt","tag_id":"cisrlbvlm001r0povi27kcg1s","_id":"cisrlbvln001t0povxc1ak0v2"},{"post_id":"cisrlbvll001p0pov2mzfottt","tag_id":"cisrlbvln001s0povqgd53i7o","_id":"cisrlbvln001u0povshr34yl7"},{"post_id":"cisrlbvlo001v0povg81qvi9n","tag_id":"cisrlbvjs00020povs0mrxsy0","_id":"cisrlbvlr001x0povm8w8foss"},{"post_id":"cisrlbvlp001w0povq0zl2ivt","tag_id":"cisrlbvlb001h0povvfbse2wy","_id":"cisrlbvlr001y0pov3p59rczm"},{"post_id":"cisrliah1000027ovnghwf0qi","tag_id":"cisrliah6000127ovqnhwslqr","_id":"cisrliahm000227ovczopsznz"}],"Tag":[{"name":"javascript","_id":"cisrlbvjs00020povs0mrxsy0"},{"name":"前端优化","_id":"cisrlbvjy00050povedcraznm"},{"name":"hexo","_id":"cisrlbvkc00090povmjbc2hxl"},{"name":"frontend","_id":"cisrlbvl0000t0povb6okz34e"},{"name":"grunt","_id":"cisrlbvl4000y0povi6tu61xz"},{"name":"es6","_id":"cisrlbvl600140povfb6mjwp5"},{"name":"html5","_id":"cisrlbvl900160pov8lherxa9"},{"name":"application-cache","_id":"cisrlbvl900190pov6eq3lpng"},{"name":"markdown","_id":"cisrlbvla001a0povu3xfxnjl"},{"name":"angular","_id":"cisrlbvlb001d0povj4u32nb2"},{"name":"css","_id":"cisrlbvlb001f0pov0msmj9ii"},{"name":"promise","_id":"cisrlbvlb001h0povvfbse2wy"},{"name":"github","_id":"cisrlbvlm001r0povi27kcg1s"},{"name":"ci","_id":"cisrlbvln001s0povqgd53i7o"},{"name":"others","_id":"cisrliah6000127ovqnhwslqr"}]}}