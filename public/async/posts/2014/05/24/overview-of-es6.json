{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"es6","permalink":"/tags/es6/","url":"/async/tags/es6.json","count":1}],"categories":[],"url":"/async/posts/2014/05/24/overview-of-es6.json","date":1400896200000,"path":{"year":2014,"month":5,"day":24,"name":"overview-of-es6"},"title":"(译)ECMAScript 6 特性速览","permalink":"/2014/05/24/overview-of-es6/","content":"<p>原文地址:<a href=\"http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/\" target=\"_blank\" rel=\"external\">http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/</a></p>\n<p>　　下一个Javascript版本，也就是ECMAScript 6(ES6或者Harmony)，给我们带来了很多令人兴奋的特性。下面我们来快速看看这些特性。下面列出的这些特性是我觉得很可能会在你日常工作中用到的。<br>　　如果你是一个Javascript新手或者原来是做服务器端开发的，那么你也不必担心，我相信现在是学习Javascript的最好时机，因为ES6有很多简介并且友好的特性。<br><a id=\"more\"></a></p>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><p>　　总所周知，Javascript不像其他面向对象语言那样支持类，但是Javascript可以通过函数和原型来模拟类。<br>　　下面是一个创建类的新语法。如果你学习过Java或者其他面向对象语言的话，你会觉得很熟悉。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  start() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Project \"</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">\" starting\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> project = <span class=\"keyword\">new</span> Project(<span class=\"string\">\"Journal\"</span>);  </div><div class=\"line\">project.start(); <span class=\"comment\">// \"Project Journal starting\"</span></div></pre></td></tr></table></figure></p>\n<p>　　所有你在类里面声明的方法都会添加到类的原型中。\n　</p>\n<h1 id=\"ES6和原型中的继承\"><a href=\"#ES6和原型中的继承\" class=\"headerlink\" title=\"ES6和原型中的继承\"></a>ES6和原型中的继承</h1><p>　　正如前面说的，Javascript不支持类。所以，既然它不支持类，那么它支持继承吗？<br>　　的确，Javascript中的继承大部分是通过原型实现。如果你对原型不熟悉，那么一个好消息就是在ES6中你没必要了解原型就可以使用类和继承。原型并不难学习但是在这里你只要知道原型是javascript中实现继承的一种方式就可以了。<br>　　下面我创建了一个Project的子类，命名为WebProject并且继承Project中的属性和方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebProject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, technologies) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.technologies = technologies;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  info() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\" uses \"</span> + arrayToString(<span class=\"keyword\">this</span>.technology);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToString</span>(<span class=\"params\">param</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"comment\">// ... some implementation</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> webJournal = <span class=\"keyword\">new</span> WebProject(<span class=\"string\">\"FrontEnd Journal\"</span>, <span class=\"string\">\"javascript\"</span>);  </div><div class=\"line\">webJournal.start(); <span class=\"comment\">// \"FrontEnd Journal starting\"  </span></div><div class=\"line\">webJournal.info(); <span class=\"comment\">// \"FrontEnd Journal uses javascript\"</span></div></pre></td></tr></table></figure></p>\n<p>　　注意到在WebProject的构造函数中调用了Project的构造函数，然后就可以使用它的属性和方法了。\n　　</p>\n<h1 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h1><p>　　如果你不想把你的JS代码都放在一个文件中或者你想在你的应用中的其他部分重用一些功能，那么你就很可能要用到模块。你需要记住的一个变量是<code>export</code>，只要在你要暴露出来的方法前面加上<code>export</code>就可以了。<br>　　下面是我们应用的结构。Project类和WebProject类被放在application.js中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myproject (folder)  </div><div class=\"line\"> |</div><div class=\"line\"> -- modules (folder)</div><div class=\"line\"> |   |</div><div class=\"line\"> |   -- helpers.js</div><div class=\"line\"> |</div><div class=\"line\"> -- application.js</div></pre></td></tr></table></figure></p>\n<p>　　让我们把<code>arrayToString()</code>方法从<code>application.js</code>中分离出来然后放在<code>modules/helpers.js</code>模块中，这样我们就可以在其他地方重用它了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// modules/helper.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arrayToString</span>(<span class=\"params\">param</span>) </span>&#123;  </div><div class=\"line\">  <span class=\"comment\">// some implementation</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　现在我们只需要在<code>application.js</code>中导入我们的模块就可以了。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// application.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; arrayToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">'modules/helpers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebProject</span> <span class=\"keyword\">extends</span> <span class=\"title\">Project</span> </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">constructor</span>(name, technologies) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.technologies = technology;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  info() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\" uses \"</span> + arrayToString(<span class=\"keyword\">this</span>.technology);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"ES6的其他特性\"><a href=\"#ES6的其他特性\" class=\"headerlink\" title=\"ES6的其他特性\"></a>ES6的其他特性</h1><p>　　下面两个ES6中的特性就比较有趣了。<code>let</code>和<code>const</code>。</p>\n<h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p>　　为了理解<code>let</code>，首先我们需要记住<code>var</code>创建的是函数作用域的变量:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　注意到，不像Java或者许多其他语言那样，Javascript中任何在一个函数内部创建的变量都会被提升到函数的顶部。这就意味着无论你在哪里声明的变量，效果就像都是在函数顶部声明的一样。这种行为就叫做<code>提升</code><br>　　所以上面的函数可以理解成下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> name; <span class=\"comment\">// variable declaration is hoisted to the top</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　那么，<code>let</code>是如何工作的呢？<br>　　我们用同样的例子来看看:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// ReferenceError: name is not defined</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　由于<code>let</code>是在块内部，所以<code>name</code>变量只能在块中访问。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printName</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  <span class=\"keyword\">var</span> name = <span class=\"string\">\"Hey\"</span>;</div><div class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">\"Rafael\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Rafael</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Hey</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　在这个例子中，由于<code>let</code>引用了已经声明的变量，所以”Rafael”只在块内部合法。在块的外部<code>name</code>的值是”Hey”。<br>　　总之，<code>var</code>是函数作用域的而<code>let</code>是块级作用域的。</p>\n<h2 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h2><p>　　Javascript在过去很长一段时间都不支持创建常量。随着ES6的到来，你将可以创建常量并且保证它的值不会被改变。<br>　　创建常量的语法如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> SERVER_URL = <span class=\"string\">\"http://frontendjournal.com\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"其他有趣的特性\"><a href=\"#其他有趣的特性\" class=\"headerlink\" title=\"其他有趣的特性\"></a>其他有趣的特性</h1><p>　　ECMAScript 6 同时还带来了很多其他特性:<code>Map</code>，<code>WeakMap</code>，<code>Generators</code>和<code>Proxies</code>。</p>\n<h1 id=\"什么时候可以开始使用ES6？\"><a href=\"#什么时候可以开始使用ES6？\" class=\"headerlink\" title=\"什么时候可以开始使用ES6？\"></a>什么时候可以开始使用ES6？</h1><p>　　Firefoxs是支持最多特性的浏览器而Juriy Zaytsev已经把主要浏览器的支持列出来了。 <a href=\"http://kangax.github.com/es5-compat-table/es6/\" target=\"_blank\" rel=\"external\">http://kangax.github.com/es5-compat-table/es6/</a><br>　　一些ES6特性在NodeJS中也可以使用。可以查看Alex Young的博客<a href=\"http://dailyjs.com/2012/10/15/preparing-for-esnext/\" target=\"_blank\" rel=\"external\">ES6 for Node</a>。</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>　　下一个版本的Javascript会带来一个更加简单更加友好的语法来帮助那些从面向对象语言转过来的开发者的学习。现在的唯一的问题就是主要浏览器对ES6的全面支持还需要一些时间。</p>\n<h1 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注:\"></a>译者注:</h1><p>　　目前对ECMAScript 6支持比较好的两个浏览器就是Chrome和Firefox，为了更好地体验ES6，我们需要下载开发者版本的浏览器，Chrome Canary <a href=\"http://www.google.com/intl/zh-CN/chrome/browser/canary.html\" target=\"_blank\" rel=\"external\">下载地址</a>，Firefox Aurora <a href=\"http://www.mozilla.org/en-US/firefox/channel/#aurora\" target=\"_blank\" rel=\"external\">下载地址</a>。<br>　　要在Firfox中开启ECMAScript 6，需要把<code>&lt;script type= &quot;text/javascript&quot;&gt;</code>标签改为<code>&lt;script type=&quot;applicationjavascript;version=1.8&quot;&gt;</code>。1.8是Firefox现在支持的版本最高的javascript。<br>　　在Chrome中开启ECMAScript 6，只需要使用严格模式就可以了，也就是在脚本前面加上<code>&quot;use strict&quot;</code>。不过在这之前还需要在地址栏中输入<code>chrome://flags/</code>，然后启用实验性 JavaScript。</p>\n"}