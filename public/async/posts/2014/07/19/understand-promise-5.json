{"tags":[{"name":"promise","permalink":"/tags/promise/","url":"\\async\\tags\\promise.json","count":5}],"categories":[],"url":"\\async\\posts\\2014\\07\\19\\understand-promise-5.json","date":1405731265000,"path":{"year":2014,"month":7,"day":19,"name":"understand-promise-5"},"title":"[译] 深入理解 Promise 五部曲：5. LEGO","permalink":"/2014/07/19/understand-promise-5/","content":"<p>在<a href=\"/blog/2014/07/09/understand-promise-4/\">Part4:扩展问题</a>中，我讨论了如何扩展和抽象Promise是多么的常见，以及这中间的一些问题。但是为什么promise对于开发者来说不是足够友好的呢？这就是它的设计用意吗？<br><a id=\"more\"></a></p>\n<h1 id=\"I’ve-Got-Friends-In-Low-Places\"><a href=\"#I’ve-Got-Friends-In-Low-Places\" class=\"headerlink\" title=\"I’ve Got Friends In Low Places\"></a>I’ve Got Friends In Low Places</h1><p>Promise被设计为低级别的构建块。一个promise就像一个乐高玩具。单个乐高只是一个有趣的玩具。但是如果把它们拼在一起，你会感受到更多的乐趣。<br>问题是promise不是你小时候玩儿的那个有趣LEGO，它们不是充满想象力的打气筒，也不是Gandalf mini-figure(一种乐高玩具)。<br>都不是，promise只是你的简单老旧的4X2的砖块。<br>这并不是使它们非常有用。但是它们是你箱子中最重要的组成部分之一。当它们彼此分开时它们只是这么个东西，但是当把它们整合在一起它们就会散发出光芒。<br>换句话说，promise本质上是一个构建在真实用户之上的低级别的API。这是对的：<strong>promise并不是给开发者使用的</strong>，它们是给库作者使用的。<br>你会从它们那收益许多，但是你很可能不是直接使用它们。你将会使用的是经过许多库组合包装之后的结果。</p>\n<h1 id=\"控制-VS-值\"><a href=\"#控制-VS-值\" class=\"headerlink\" title=\"控制 VS 值\"></a>控制 VS 值</h1><p>请允许我矫正第一个最大的关于promise的误解：<strong>它们不是真正关于流程控制的</strong>。<br>promise当然可以链接在一起来变成近似异步流程控制的东西。但是最后证明它们并不像你想象的那样擅长这个任务。<br>promises确实只是一个值的容器。这个值可能现在就存在也可能是未来的一个值。但是不管怎样，它只是一个值。<br>这是promise最有意义的好处之一。它们在值的上面创建了一个强大的抽象使得值不再是暂存的东西。换句话说，不管那个值现在是否存在，你都可以用同样的方式使用promise。在这个系列的<a href=\"http://blog.segmentfault.com/kk_470661/1190000000593885\" target=\"_blank\" rel=\"external\">第三部分</a>中，我讨论过promise必须是不可变的，它们作为值的意义也是基于这个特点的。<br>promises就像状态的小型的自包含的表现方式。它们是可组合的，也就意味着你全部的程序可以用它们来表示。</p>\n<h1 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h1><p>就像你不能奢望一个单独的4X2的乐高可以变成一个跑车，让promise成为你的异步流程控制机制也是一种奢望。<br>那么promises作为一个非暂存的不可变的值对于解决异步任务意味着什么呢？在它们设计哲学的约束中，有它们擅长并且可以有帮助的东西。<br>在剩下的内容中，我会讨论这个限制。但是我并不打算作为一个promise的批判者。我试图去强调扩展和抽象的重要性。</p>\n<h2 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h2><p>当我说promise只是一个值的容器的时候我撒了个小慌。实际上，它是一个成功值或者失败信息的容器。在任何时候，一个promise是一个未来的成功值或者在获取这个值时的失败信息。不会超过这两种情况。<br>在某种意义上说，一个promise是一个决策结构，一个<code>if..then..else</code>。其他人喜欢把它想成一个<code>try..catch</code>结构。不管是哪种理解，你就像在说”请求一个值，不管成功还是失败”。<br>就像尤达说，”Do or do not, there is no try.”。<br>考虑下面这个情况：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// make some ajax request</span></span><br><span class=\"line\">        <span class=\"comment\">// if you get a response, `resolve( answer )`</span></span><br><span class=\"line\">        <span class=\"comment\">// if it fails, `reject( excuses )`</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax( <span class=\"string\">\"http://TheMeaningOfLife.com\"</span> )</span><br><span class=\"line\">.then(</span><br><span class=\"line\">    winAtLife,</span><br><span class=\"line\">    keepSearching</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>看到<code>winAtLife()</code>和<code>keepSearching()</code>函数了吗？我们在说，”去问问生命的意义，不管你有没有找到答案，我们都继续”。<br>如果我们不传入<code>keepSearching</code>会怎样？除了作为一个乐观主义者假设你会找到答案然后在生命长河中取胜，这里会有什么危险呢？<br>如果promise没有找到生命的意义（或者如果在处理答案的过程中发生了javascript异常），它会默默地保留着错误的事实，也许会永远保留着。就算你等上一百万年，你都不会知道对于答案的请求失败了。<br>你只能通过观察才能知道它失败了。这可能需要深入到形而上学或者量子学的东西。让我们停止在这吧。<br>所以不带失败处理函数的promise是一个会默默地失败的promise。这并不好。这意味着如果你忘记了，你会陷入失败的陷阱而不是成功。<br>所以你会怀疑：为什么promises会忽略失败处理函数呢？因为你可能现在不在意失败的情况，只有以后某个时刻会关心。我们程序的暂时性意味着系统现在不会知道你以后会想做什么。现在忽略失败处理函数也许对你来说是正合适的，因为你知道你会把这个promise链接到另一个promise，并且那个promise有一个失败处理函数。<br>所以promise机制让你可以创建不需要监听失败的promise。<br>这里有一个很微妙的问题，很可能也是大多数刚接触promise的开发者会碰到的问题。</p>\n<h2 id=\"束缚我们的链子\"><a href=\"#束缚我们的链子\" class=\"headerlink\" title=\"束缚我们的链子\"></a>束缚我们的链子</h2><p>为了理解这个问题，我们首先需要理解promises是如何链接在一起的。我认为你会很快明白promise链是强大并且有一点复杂的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax( <span class=\"string\">\"http://TheMeaningOfLife.com\"</span> )</span><br><span class=\"line\">.then(</span><br><span class=\"line\">    winAtLife,</span><br><span class=\"line\">    keepSearching</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">// a second promise returned here that we ignored!</span></span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure></p>\n<p><code>ajax(..)</code>调用产生了第一个promise，然后<code>then(..)</code>调用产生了第二个promise。我们没有捕捉并且观察在这段代码中的第二个promise，但是我们可以。第二个promise是根据第一个promise处理函数如何运行来自动变成fulfilled状态(成功或者失败)。<br>第二个promise不会在意第一个promise是成功还是失败。它在意第一个promise的处理函数(不管成功还是失败)。<br>这是promise链的关键。但是这有一点不好理解，所以重复读上面那段话直到你理解为止。<br>考虑下promise代码通常是怎么写的(通过链):<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ajax( <span class=\"string\">\"..\"</span> )</span><br><span class=\"line\">.then( transformResult )</span><br><span class=\"line\">.then(</span><br><span class=\"line\">    displayAnswer,</span><br><span class=\"line\">    reportError</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>这段代码也可以像下面这么写，效果是一样的：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promiseA = ajax( <span class=\"string\">\"..\"</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promiseB = promiseA.then( transformResult );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</span><br><span class=\"line\">    displayAnswer,</span><br><span class=\"line\">    reportError</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// we don't use `promiseC` here, but we could...</span></span><br></pre></td></tr></table></figure></p>\n<p>Promise A是唯一在意<code>ajax(..)</code>结果的promise。<br>Promise B只关心Promise A在<code>transformResult(..)</code>函数内部是如何处理的(不是Promise A的结果本身),同样的，Promise C只关心Promise B在<code>displayAnswer(..)</code>或者<code>reportError(..)</code>函数内部是如何处理的(不是Promise B结果本身)。<br>再一次，重复读这段话直到理解。<br>在<code>transformResult(..)</code>内部，如果它立刻完成了它的任务，然后Promise B就会立刻完成，不管成功还是失败。然而，如果<code>transformResult(..)</code>不能立刻完成，而是创建它自己的promise，我们称它为Promise H1(‘H’是’hidden’,因为它是隐藏在内部的)。原本Promise B返回的等待我们如何处理Promise A的promise，现在概念上被Promise H1替换了(并不是真的替换了，只是被说成一样的)。<br>所以，现在当你说<code>promiseB.then(..)</code>时，它实际上就像说<code>promiseH1.then(..)</code>。如果Promise H1成功了，<code>displayAnswer(..)</code>会被调用，但是如果它失败了，<code>reportError(..)</code>会被调用。<br>这就是promise链是如何工作的。<br>但是，如果Promise A(由ajax调用返回)失败了会怎样？<code>promiseA.then(..)</code>调用没有注册一个失败处理函数。它会默默地隐藏错误吗？它会的，除了我们链接上Promise B然后在上面注册一个错误处理函数:<code>reportError(..)</code>。如果Promise A失败了，<code>transformResult(..)</code>不会被调用，并且没有错误处理函数，所以Promise B马上被标记为失败，所以<code>reportError(..)</code>会被调用。<br>如果Promise A成功了，<code>transformResult(..)</code>会被执行，然后当运行<code>transformResult(..)</code>时有一个错误会怎样？Promise B被标记为失败，然后<code>reportError(..)</code>也会被调用。<br>但是这里是危险的地方，这个地方甚至有经验的开发者都会遗漏的！<br>如果Promise A成功了(成功的<code>ajax(..)</code>)，然后Promise B成功了(成功的<code>transformResult(..)</code>)，但是当运行<code>displayAnswer(..)</code>时有一个错误会怎样？<br>你也许会认为<code>reportError(..)</code>会被调用？大多数人会这么想，但是不是的。<br>为什么？因为来自<code>displayAnswer(..)</code>的一个错误或者失败promise导致一个失败的Promise C。我们监听Promise C失败的情况了吗？仔细看看。没有。<br>为了确保你不会漏掉这种错误并且让它默默地隐藏在Promise C状态内部，你也会希望监听Promise C的失败：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</span><br><span class=\"line\">    displayAnswer,</span><br><span class=\"line\">    reportError</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// need to do this:</span></span><br><span class=\"line\">promiseC.then( <span class=\"literal\">null</span>, reportError );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or this:, which is the same thing:</span></span><br><span class=\"line\">promiseC.catch( reportError );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Note: a silently ignored *Promise D* was created here!</span></span><br></pre></td></tr></table></figure></p>\n<p>OK,所以现在我们捕获<code>displayAnswer(..)</code>内部的错误。不得不去记住这个有一点坑爹。</p>\n<h2 id=\"乌龟\"><a href=\"#乌龟\" class=\"headerlink\" title=\"乌龟\"></a>乌龟</h2><p>但是有一个更加微妙的问题！如果当处理<code>displayAnswer(..)</code>返回的错误时，<code>reportError(..)</code>函数也有一个JS异常会怎样？会有人捕获这个错误吗？没有。<br>看！上面有一个隐含的Promise D，并且它会被告知<code>reportError(..)</code>内部的异常。<br>OMG，你肯定会想。什么时候才能停止？它会这样一直下去吗？<br>一些promise库作者认为有必要解决这个问题通过让”安静的错误”被作为全局异常抛出。但是这种机制该如何得知你不想再链接promise并且提供一个错误处理函数呢？它如何知道什么时候应该通报一个全局异常或者不通报呢？你肯定不希望当你已经捕获并且处理错误的情况下仍然有很多控制台错误信息。<br>在某种意义上，你需要可以标记一个promise为“final”，就像说“这是我链子中的最后一个promise”或者“我不打算再链接了，所以这是乌龟停止的地方”。如果在链的最后发生了错误并且没有被捕获，然后它需要被报告为一个全局异常。<br>从表面上我猜测这似乎是很明智的。这种情况下的实现像下面这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promiseC = promiseB.then(</span><br><span class=\"line\">    displayAnswer,</span><br><span class=\"line\">    reportError</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">promiseC</span><br><span class=\"line\">.catch( reportError )</span><br><span class=\"line\">.done(); <span class=\"comment\">// marking the end of the chain</span></span><br></pre></td></tr></table></figure></p>\n<p>你仍然需要记住调用<code>done()</code>，要不然错误还是会隐藏在最后一个promsie中。你必须使用稳固的错误处理函数。<br>“恶心”，你肯定会这么想。欢迎来到promises的欢乐世界。</p>\n<h2 id=\"Value-vs-Values\"><a href=\"#Value-vs-Values\" class=\"headerlink\" title=\"Value vs Values\"></a>Value vs Values</h2><p>对于错误处理已经说了很多了。另一个核心promsie的限制是一个promise代表一个单独的值。什么是一个单独的值呢？它是一个对象或者一个数组或者一个字符串或者一个数字。等等，我还可以在一个容器里放入多个值，就像一个数组或对象中的多个元素。Cool！<br>一个操作的最终结果不总是一个值，但是promise并不会这样，这很微妙并且又是另一个失败陷阱：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// make some ajax request</span></span><br><span class=\"line\">        <span class=\"comment\">// if you get a response, `resolve( answer, url )`</span></span><br><span class=\"line\">        <span class=\"comment\">// if it fails, `reject( excuses, url )`</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ajax( <span class=\"string\">\"..\"</span> )</span><br><span class=\"line\">.then(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">answer,url</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( answer, url ); <span class=\"comment\">// ..  undefined</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">excuses,url</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( excuses, url ); <span class=\"comment\">// ..  undefined</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>你看出这里面的问题了吗？如果你意外的尝试传递超过一个的值过去，不管传给失败处理函数还是成功处理函数，只有第一个值能被传递过去，其他几个会被默默地丢掉。<br>为什么？我相信这和组合的可预测性有关，或者一些其他花哨的词汇有关。<br>最后，你不得不记住包裹自己的多个值要不然你就会不知不觉的丢失数据。</p>\n<h2 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h2><p>真实世界中的app经常在“同一时间”发生超过一件事情。本质上说，我们需要构建一个处理器，并行处理多个事件，等待它们全部完成再执行回调函数。<br>相比于promise问题，这是一个异步流程控制的问题。一个单独的promise不能表达两个或更多并行发生的异步事件。你需要一个抽象层来处理它。<br>在计算机科学术语中，这个概念叫做一个“门”。一个等待所有任务完成，并且不关心它们完成顺序的门。<br>在promise世界中，我们添加一个API叫做<code>Promise.all(..)</code>，它可以构建一个promise来等待所有传递进来的promise完成。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    <span class=\"comment\">// these will all proceed \"in parallel\"</span></span><br><span class=\"line\">    makePromise1(),</span><br><span class=\"line\">    makePromise2(),</span><br><span class=\"line\">    makePromise3()</span><br><span class=\"line\">])</span><br><span class=\"line\">.then( .. );</span><br></pre></td></tr></table></figure></p>\n<p>一个相近的方法是<code>race()</code>。它的作用和<code>all()</code>一样，除了它只要有一个promise返回消息就执行回调函数，而不等待其他promise的结果。<br>当你思考这些方法的时候，你可能会想到许多方式来实现这些方法。<code>Promise.all(..)</code>和<code>Promise.race(..)</code>是原生提供的，因为这两个方法是很常用到的，但是如果你还需要其他的功能那么你就需要一个库来帮助你了。<br>限制的另一个表现就是你很快就会发现你需要自己使用<code>Array</code>的相关方法来管理promise列表，比如<code>.map(..)</code>和<code>.reduce(..)</code>。如果你对map/reduce不熟悉，那么赶紧去熟悉一下，因为你会发现当处理现实世界中promise的时候你经常会需要它们。<br>幸运的是，已经有很多库来帮助你了，并且每天还有很多新的库被创造出来。</p>\n<h2 id=\"Single-Shot-Of-Espresso，Please！\"><a href=\"#Single-Shot-Of-Espresso，Please！\" class=\"headerlink\" title=\"Single Shot Of Espresso，Please！\"></a>Single Shot Of Espresso，Please！</h2><p>另一个关于promise的事情是它们只会运行一次，然后就不用了。<br>如果你只需要处理单个事件，比如初始化一个也没或者资源加载，那么这样没什么问题。但是如果你有一个重复的事件(比如用户点击按钮)，你每次都需要执行一系列异步操作会怎么样呢？<br>Promise并不提供这样的功能，因为它们是不可变的，也就是不能被重置。要重复同样的promise，唯一的方法就是重新定义一个promise。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">\"#my_button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>)</span>&#123;</span><br><span class=\"line\">    doTask1( evt.target )</span><br><span class=\"line\">    .then( doTask2 )</span><br><span class=\"line\">    .then( doTask3 )</span><br><span class=\"line\">    .catch( handleError );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>太恶心了，不仅仅是因为重复创建promise对于效率有影响，而且它对于职责分散不利。你不得不把多个事件监听函数放在同一个函数中。如果有一个方式来改变这种情况就好了，这样事件监听和事件处理函数就能够分开了。<br>Microsoft的RxJS库把这种方式叫做”观察者模式”。<br>我的<em>asynquence</em>库有一个<code>react(..)</code>方法通过简单的方式提供了一个类似的功能。</p>\n<h2 id=\"盲区…\"><a href=\"#盲区…\" class=\"headerlink\" title=\"盲区…\"></a>盲区…</h2><p>在一个已经被使用回调函数的API占据的世界中，把promise插入到代码中比我们想象的要困难。考虑下面这段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAjax</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        ajax( url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,response</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                reject( err );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resolve( response );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; )</span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我认为promise解决了回调地狱的问题，但是它们代码看起来仍然像垃圾。<br>我们需要抽象层来使得用promise表示回调变得更简单。原生的promise并没有提供这个抽象层，所以结果就是通过原生promise写出来的代码还是很丑陋。但是如果有抽象层那么事情就变得很简单了。<br>例如，我的<em>asynquence</em>库提供了一个<code>errfcb()</code><a href=\"https://github.com/getify/asynquence/tree/master/contrib#errfcb-plugin\" target=\"_blank\" rel=\"external\">插件</a>(error-first callback)，用它可以构建一个回调来处理下面这种场景:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myAjax</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> sq = ASQ();</span><br><span class=\"line\">    ajax( url, sq.errfcb() );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sq;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Stop-The-Presses\"><a href=\"#Stop-The-Presses\" class=\"headerlink\" title=\"Stop The Presses!\"></a>Stop The Presses!</h2><p>有时，你想要取消一个promise而去做别的事情，但是如果现在你的promise正处在挂起状态会怎样呢？<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</span><br><span class=\"line\">.then( transformResult )</span><br><span class=\"line\">.then(</span><br><span class=\"line\">    displayAnswer,</span><br><span class=\"line\">    reportError</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Later</span></span><br><span class=\"line\">pr.cancel(); <span class=\"comment\">//  &lt;-- doesn't work!</span></span><br></pre></td></tr></table></figure></p>\n<p>所以，为了取消promise，你需要引入一下东西：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformResult</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!pr.ignored) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something!</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</span><br><span class=\"line\">.then( transformResult )</span><br><span class=\"line\">.then(</span><br><span class=\"line\">    displayAnswer,</span><br><span class=\"line\">    reportError</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Later</span></span><br><span class=\"line\">pr.ignored = <span class=\"literal\">true</span>; <span class=\"comment\">// just hacking around</span></span><br></pre></td></tr></table></figure></p>\n<p>换句话说，你为了能够取消你的promise，在promise上面加了一层来处理这种情况。<br>你不能从promise取消注册处理函数。并且因为一个promise必须不可变，你能够直接取消一个promise这种情况是不允许出现的。从外部取消一个promise跟改变它的状态没有什么区别。它使得promise变得不可靠。<br>许多promise库都提供了这种功能，但是这明显是一个错误。取消这种行为是不需要promise，但是它可以出现在promise上面的一个抽象层里。</p>\n<h2 id=\"冗长\"><a href=\"#冗长\" class=\"headerlink\" title=\"冗长\"></a>冗长</h2><p>另一个关于原生promise的担心是有些事情并没有被实现，所以你必须自动手动实现它们，而这些事情对于可扩展性是很重要的，但是这些东西经常会导致令人讨厌的重复代码。<br>看一个例子，在每一个promise的完成步骤中，有一个设定就是你希望保持链式结构，所以<code>then(..)</code>方法会返回一个新的promise。但是如果你想要加入一个自己创建的promise并且从一个成功处理函数中返回，这样你的promise就可以加入到链的流程控制中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformResult</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// we have to manually create and return a promise here</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// whatever</span></span><br><span class=\"line\">    &#125; );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pr = ajax( <span class=\"string\">\"..\"</span> )</span><br><span class=\"line\">.then( transformResult )</span><br><span class=\"line\">.then(</span><br><span class=\"line\">    displayAnswer,</span><br><span class=\"line\">    reportError</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>不同的是，就像上面解释的一样，从第一个<code>then(..)</code>返回的隐藏的promise立刻就完成(或者失败)，然后你就没办法让剩下的链异步延迟。<br>如果有一个抽象层能够通过某种方式把自动创建/链接的promise暴露给你，然后你就不需要创建自己的promise来替换了，这样该多好。<br>换句话说，如果有一个设定假设你需要为了异步的目的使用链，而不是你只是需要漂亮得执行异步。（也就是说你确实是希望你的代码可以异步执行，而不是说希望整个异步流程看过去好看点）。<br>另一个例子：你不能直接传递一个已经存在的promise给<code>then(..)</code>方法，你必须传递一个返回这个promise的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pr = doTask2();</span><br><span class=\"line\"></span><br><span class=\"line\">doTask1()</span><br><span class=\"line\">.then( pr ); <span class=\"comment\">// would be nice, but doesn't work!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// instead:</span></span><br><span class=\"line\"></span><br><span class=\"line\">doTask1()</span><br><span class=\"line\">.then( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> pr; &#125; );</span><br></pre></td></tr></table></figure></p>\n<p>这个限制性是有很多原因的。但是它只是减弱了有利于保持可扩展性和可预测性的用法的简洁。抽象可以容易的解决这个问题。</p>\n<h1 id=\"全剧终\"><a href=\"#全剧终\" class=\"headerlink\" title=\"全剧终\"></a>全剧终</h1><p>所有这些原因就是为什么原生的promise API是强大同时也是有局限性的。<br>关于扩展和抽象是一个成熟的领域。许多库正在做这些工作。就像我之前说的，<a href=\"http://github.com/getify/asynquence\" target=\"_blank\" rel=\"external\">asynquence</a>是我自己的promise抽象库。它很小但是很强大。它解决了所有博客中提到的promise的问题。<br>我后面会写一篇详细的博客来介绍<em>asynquence</em>是如果解决这些问题的，所以敬请期待。</p>\n<p>原文地址：<a href=\"http://blog.getify.com/promises-part-5/\" target=\"_blank\" rel=\"external\">http://blog.getify.com/promises-part-5/</a></p>\n<p><a href=\"/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲–1.异步问题</a><br><a href=\"/blog/2014/06/29/understand-promise-2/\">深入理解Promise五部曲–2.控制权转换问题</a><br><a href=\"/blog/2014/07/02/understand-promise-3/\">深入理解Promise五部曲–3.可靠性问题</a><br><a href=\"/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–4.扩展性问题</a><br><a href=\"/blog/2014/07/09/understand-promise-4/\">深入理解Promise五部曲–5.乐高问题</a></p>\n"}