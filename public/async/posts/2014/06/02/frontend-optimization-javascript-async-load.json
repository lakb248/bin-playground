{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"前端优化","permalink":"/tags/前端优化/","url":"/async/tags/前端优化.json","count":4}],"categories":[],"url":"/async/posts/2014/06/02/frontend-optimization-javascript-async-load.json","date":1401691399000,"path":{"year":2014,"month":6,"day":2,"name":"frontend-optimization-javascript-async-load"},"title":"前端优化-Javascript篇(2.异步加载脚本)","permalink":"/2014/06/02/frontend-optimization-javascript-async-load/","content":"<p>上篇博客说过脚本后置可以使页面更快的加载，可是这样的优化还是有限的，如果脚本需要执行一个耗时的操作，就算后置了它还是会阻塞后续脚本加载和执行并且阻塞整个页面。下面介绍非阻塞加载脚本技术也就是异步加载。<br><a id=\"more\"></a></p>\n<h1 id=\"非阻塞加载脚本\"><a href=\"#非阻塞加载脚本\" class=\"headerlink\" title=\"非阻塞加载脚本\"></a>非阻塞加载脚本</h1><p>1.defer(关于defer的一篇<a href=\"https://hacks.mozilla.org/2009/06/defer/\" target=\"_blank\" rel=\"external\">好文</a>)<br>　　目前所有浏览器都支持defer属性，但是Chrome和Firefox中只有在加载外部脚本时defer才会生效，行内脚本使用defer是没有作用的。而IE中不论什么情况，defer都有效。<br>　　defer的作用就是阻止脚本在下载完成后立刻执行，它会让脚本延迟到所有脚本加载执行完成后，在DOMContentLoaded之前执行，通俗的说就是顺序加载延迟执行。虽然都是在DOMContentLoaded之前执行，但是在不同浏览器之间，执行的各种脚本执行的顺序还是不一样的。看下面这个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      var result = \"\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      //DOMContentLoaded</div><div class=\"line\">      if(window.addEventListener)&#123;</div><div class=\"line\">        document.addEventListener(\"DOMContentLoaded\",function()&#123;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;else&#123;</div><div class=\"line\">        document.attachEvent(\"onDOMContentLoaded\",function()&#123;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      window.onload = function()&#123;</div><div class=\"line\">      \tresult += \"window loaded\\n\";</div><div class=\"line\">      \t//console.log(\"window loaded\") ;</div><div class=\"line\">      &#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内延迟脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Head Inline Script defer\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Head Inline Script\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部外部延迟脚本 External Head Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head_defer.js\"</span> <span class=\"attr\">defer</span>=<span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本 External Head Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>SHOW<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body行内延迟脚本--&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Body Inline Script defer\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body行内脚本--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"Body Inline Script\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body外部延迟脚本 External Body Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">defer</span> = <span class=\"string\">\"defer\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_body_defer.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--Body外部脚本 External Body Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_body.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      document.getElementsByTagName(\"button\")[0].onclick = function()&#123;console.log(result);&#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行结果如下：<br><img src=\"http://segmentfault.com/img/bVcn15\" alt=\"Defer\"><br>从上面可以看出几个问题：<br>　　首先，IE9以下不支持DOMContentLoaded(后面会说明这个情况)<br>　　其次，验证了上面说的Chrome和Firefox行内脚本不支持defer属性<br>　　最后，defer确实达到了延迟执行的目的，没有阻塞后面脚本的加载和执行。但是耗时的操作还是会阻塞DOMContentLoaded事件，而大多数情况下大家都会把页面初始化的脚本附加在DOMContentLoaded事件上，所以defer方法还是不能很好解决这个问题。</p>\n<p>2.Script DOM<br>　　这是最常用也是现在普遍的解决方法。它只需要简单几句话就可以实现脚本的异步加载，并且所有浏览器都支持这个方法。但是在每个浏览器中，执行还是略有不同。看下面这个例子：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      var result = \"\\n\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      //DOMContentLoaded</div><div class=\"line\">      if(window.addEventListener)&#123;</div><div class=\"line\">        document.addEventListener(\"DOMContentLoaded\",function()&#123;</div><div class=\"line\">          alert(\"DOMContentLoaded\") ;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;else&#123;</div><div class=\"line\">        document.attachEvent(\"onDOMContentLoaded\",function()&#123;</div><div class=\"line\">          alert(\"DOMContentLoaded\") ;</div><div class=\"line\">          result += \"DOMContentLoaded\\n\" ;</div><div class=\"line\">        &#125;) ;</div><div class=\"line\">      &#125;</div><div class=\"line\">      window.onload = function()&#123;</div><div class=\"line\">      \tresult += \"window loaded\\n\";</div><div class=\"line\">      &#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部外部延迟脚本 External Head Script defer--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head_defer.js\"</span> <span class=\"attr\">defer</span>=<span class=\"string\">\"defer\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--头部行内脚本 External Head Script--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span> = <span class=\"string\">\"external_head.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>SHOW<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      document.getElementsByTagName(\"button\")[0].onclick = function()&#123;console.log(result);&#125; ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">      result += \"start\\n\" ;</div><div class=\"line\">      var head = document.getElementsByTagName(\"head\")[0] ;</div><div class=\"line\">      var script8 = document.createElement(\"script\") ;</div><div class=\"line\">      script8.type = \"text/javascript\" ;</div><div class=\"line\">      script8.onload = function()&#123;alert(\"done\");&#125; ;</div><div class=\"line\">      script8.readystatechange = function()&#123;</div><div class=\"line\">      \tif(script8.readyState == \"loaded\" || script8.readyState == \"complete\")&#123;</div><div class=\"line\">      \t\talert(\"done\") ;</div><div class=\"line\">      \t&#125;</div><div class=\"line\">      &#125; ;</div><div class=\"line\">      //Body Dynamic Script</div><div class=\"line\">      script8.src = \"dynamic_body.js\" ;</div><div class=\"line\">      head.appendChild(script8) ;</div><div class=\"line\">      result += \"end\\n\" ;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    </div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>运行结果如下:<br><img src=\"http://segmentfault.com/img/bVcn17\" alt=\"ScriptDom\"><br>　　下面这张图是在ScriptDom脚本后面加入一个耗时的脚本，使得这个脚本执行完成后，保证ScriptDOM的脚本处于可执行状态：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">length</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() ;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span>((<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() - start) &lt; <span class=\"number\">1000</span> * length)&#123;&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tdoSomething(<span class=\"number\">3</span>) ;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>\n<p>结果如下：<br><img src=\"http://segmentfault.com/img/bVcn19\" alt=\"ScriptDOM\"><br>运行结果同时也说明了几个问题：<br>　　首先，ScriptDOM不会阻塞后续脚本的执行，根据start和end 的位置可以很容易看出。<br>　　其次，在第二张图的情况下，ScriptDOM和defer同时都可以执行，在不同浏览器中它们的优先级的不一样的。在Firfox和Chrome中，ScriptDOM的优先级比defer低，而在IE中情况则相反。<br>　　最后，通过两种情况的对比发现，在Chrome中ScriptDOM不会阻塞DOMContentLoaded事件但是会阻塞onload事件；在Firefox中ScriptDOM既会阻塞DOMContentLoaded事件也会阻塞onload事件；而在IE中，情况则要根据代码执行情况来决定。如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于可执行状态，那么就会阻塞两个事件；如果在DOMContentLoaded事件或者onload事件触发之前，ScriptDOM代码处于不可执行状态，那么就不会阻塞两个事件。总结的来说就是在Chrome和IE中DOMContentLoaded事件不需要等待ScriptDOM执行，而在Firefox中需要等待ScriptDOM执行。</p>\n<p>　　通过上面两种方法的对比发现，defer和ScriptDOM都不会阻塞后续脚本的执行。但是相对来说，ScriptDOM在使用上更加灵活而且并不总是阻塞DOMContentLoaded事件，并且ScriptDOM的使用场景主要是在按需加载和模块加载器上，而一般使用这些技术的时候，页面已经处于加载完成的状态，所以对于性能不会有影响。\n　　</p>\n<h1 id=\"DOMContentLoaded\"><a href=\"#DOMContentLoaded\" class=\"headerlink\" title=\"DOMContentLoaded\"></a>DOMContentLoaded</h1><p>　　上面说到DOMContentLoaded事件，DOMcontentLoaded是现代浏览器才支持的一个事件，万恶的IE从IE9开始才支持这个事件。那么在什么情况下才会触发DOMContentLoaded事件呢？DOMContentLoaded会在浏览器接收到服务器传过来的HTML文档，整个页面DOM结构加载完成并且所有行内脚本和外部脚本执行完成后触发 (通过上面异步脚本的例子可以看出，ScriptDOM异步加载脚本不会阻塞DOMContentLoaded，或者说DOMContentLoaded不需要等待ScriptDOM执行就可以出发) ，它跟onload事件的区别是，DOMContentLoaded事件不需要等待图片，ifram和样式表等资源加载完成就会触发，而onload事件需要等待整个页面都加载完成包括各种资源才会触发。所以对于我们来说DOMContentLoaded是一个更有用的事件，因为只要DOM结构加载完成，我们就可以通过Javasscript来操作页面上的DOM节点。<br>　　但是上面关于DOMContentLoaded事件触发条件的定义只是官方文档的说法，具体情况并不总是这样。<br>　　有时样式表的加载会阻塞脚本的执行从而阻塞DOMContentLoaded事件，这种情况一般出现在样式表后面跟着脚本。也就是说如果把脚本放在样式表后面，那么脚本就必须等到样式表加载完成才能开始执行，这样就会阻塞页面的DOMContentLoaded事件。但是这样做也是有道理的，因为有时候我们的脚本会处理DOM样式方面的东西。<br>　　这种阻塞情况在不同浏览器上表现也会不一样。在IE和Firefox中，不管样式表后面跟着是行内脚本还是外部脚本，都会发生阻塞。在Chrome中，只有外部脚本才会发生阻塞。<br>　　由于IE在IE9以下不支持DOMContentLoaded事件，所以我们需要用一些Hack技术来实现这个功能。分两种情况来实现：<br>　　1.网页不嵌套在iframe中<br>　　在IE中我们可以通过一个方式来判断DOM是否加载完成，就是doScroll方法。如果DOM加载完成，那么我们就可以调用document的doScroll方法，否则就会抛出异常。我们可以利用这个特性不断轮询来做Hack。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//判断是否在iframe中</span></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> isFrame = <span class=\"built_in\">window</span>.frameElement != <span class=\"literal\">null</span> ;</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.doScroll &amp;&amp; !isFrame)&#123;</div><div class=\"line\">        <span class=\"comment\">//轮询是否可以调用doScroll方法</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryScroll</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                <span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>);</div><div class=\"line\">                handle() ;</div><div class=\"line\">            &#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">                setTimeout(tryScroll,<span class=\"number\">10</span>) ;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        tryScroll() ;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　2.网页嵌套在iframe中<br>　　如果网页嵌套在iframe中，那么是无法通过doScroll的方法来Hack实现DOMContentLoaded的。我们可以通过另外一种方式来实现—readystatechange，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span> || <span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"loaded\"</span>)&#123;</div><div class=\"line\">            handle() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>　　结合上面的讨论，我们可以得出一个通用的bindReady方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//绑定DOMContentLoaded事件，支持绑定多个处理函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> handleList = [] ;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//按顺序执行处理函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> doHandles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> length = handleList.length ;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span> ; i &lt; length ; i ++)&#123;</div><div class=\"line\">            handleList[i]() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(handleList.length == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"comment\">//在还没有处理函数时，把doHandles注册到ready上，这样后面加入的处理函数就可以一并执行</span></div><div class=\"line\">        bindReady(doHandles) ;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//把处理函数加入到函数列表中</span></div><div class=\"line\">    handleList.push(handle) ;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindReady</span>(<span class=\"params\">handle</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> called = <span class=\"literal\">false</span> ;</div><div class=\"line\">    <span class=\"keyword\">var</span> ready = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//防止重复调用</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(!called)&#123;</div><div class=\"line\">            called = <span class=\"literal\">true</span> ;</div><div class=\"line\">            handle() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"comment\">//支持DOMcontentLoaded</span></div><div class=\"line\">        <span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>,ready,<span class=\"literal\">false</span>);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"comment\">//IE</span></div><div class=\"line\">        <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> isFrame = <span class=\"built_in\">window</span>.frameElement != <span class=\"literal\">null</span> ;</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</div><div class=\"line\">        <span class=\"comment\">//网页不在iframe中</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.documentElement.doScroll &amp;&amp; !isFrame)&#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryScroll</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">                    <span class=\"built_in\">document</span>.documentElement.doScroll(<span class=\"string\">\"left\"</span>) ;</div><div class=\"line\">                    ready() ;</div><div class=\"line\">                &#125;<span class=\"keyword\">catch</span>(e)&#123;</div><div class=\"line\">                    setTimeout(tryScroll,<span class=\"number\">10</span>) ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            tryScroll() ;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            <span class=\"comment\">//网页在iframe中</span></div><div class=\"line\">            <span class=\"built_in\">document</span>.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"complete\"</span> || <span class=\"built_in\">document</span>.readyState === <span class=\"string\">\"loaded\"</span>)&#123;</div><div class=\"line\">                    ready() ;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//老式浏览器不支持上面两种事件</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.addEventListener)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>,ready,<span class=\"literal\">false</span>) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.attachEvent(<span class=\"string\">\"onload\"</span>,ready) ;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"comment\">//允许绑定多个处理函数</span></div><div class=\"line\">        <span class=\"keyword\">var</span> fn = <span class=\"built_in\">window</span>.onload ;</div><div class=\"line\">        <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            fn &amp;&amp; fn() ;</div><div class=\"line\">            ready() ;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"说在最后\"><a href=\"#说在最后\" class=\"headerlink\" title=\"说在最后\"></a>说在最后</h1><p>　　说了这么多，虽然通过脚本后置和异步加载可以降低脚本加载对页面的影响，但是就算是实现了异步加载，但是由于浏览器的脚本解析的单线程的，所以脚本执行的时候仍然会阻塞整个页面(当然除了使用Web Worker)，这时候用户是无法完成正常交互的，所以要想真正彻底的优化页面加载，还需要从代码的优化开始。从下一篇开始，我会分享关于这方面的学习。</p>\n"}