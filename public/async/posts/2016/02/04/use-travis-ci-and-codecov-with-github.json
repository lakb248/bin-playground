{"tags":[{"name":"github","permalink":"/tags/github/","url":"/async/tags/github.json","count":1},{"name":"ci","permalink":"/tags/ci/","url":"/async/tags/ci.json","count":1}],"categories":[],"url":"/async/posts/2016/02/04/use-travis-ci-and-codecov-with-github.json","date":1454568442000,"path":{"year":2016,"month":2,"day":4,"name":"use-travis-ci-and-codecov-with-github"},"title":"Github装逼指南——Travis CI 和 Codecov","permalink":"/2016/02/04/use-travis-ci-and-codecov-with-github/","content":"<p>好久没写博客了，趁着年前空闲的时间来一篇轻松点的东西。<br>最近工作中积累了一些Angular组件打算整一整把他们开源了，既然要开源那么代码可靠性就很重要了，单测不能少，为了保证每次提交的代码都能很好的运行，持续集成不能少。之前看到很多开源项目介绍中都有一些单测覆盖率和build结果的图标，就像这样：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGKF\" alt=\"clipboard.png\"><br><a id=\"more\"></a><br>觉得挺酷的。打算在自己的开源组件中也整一套。<br>经过Google决定使用TravisCI来进行持续集成，Codecov来统计单测覆盖率。</p>\n<h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p>Travis CI是国外新兴的开源持续集成构建项目，支持Github项目。使用十分方便。</p>\n<ol>\n<li>使用Github账号登录<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">Travis CI</a>；</li>\n<li>登录之后会自动同步Github项目，选择需要使用Travis CI的项目</li>\n<li>在项目的根目录新增<code>.travis.yml</code>文件，内容如下：</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#指定运行环境</span></div><div class=\"line\"><span class=\"attr\">language:</span> node_js</div><div class=\"line\"><span class=\"comment\">#指定nodejs版本，可以指定多个</span></div><div class=\"line\"><span class=\"attr\">node_js:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"number\">0.12</span><span class=\"number\">.5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#运行的脚本命令</span></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> npm run ci</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#指定分支，只有指定的分支提交时才会运行脚本</span></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">    -</span> master</div></pre></td></tr></table></figure>\n<p>更多语法请看<a href=\"https://docs.travis-ci.com/\" target=\"_blank\" rel=\"external\">这里</a>。使用起来非常方便，这样当你每次向github push代码的时候，Travis CI就会自动运行<code>.travis.yml</code>里面的<code>script</code>。自动进行编译以及运行单测。<br>由于Travis CI每次build之前都会运行<code>npm install</code>安装项目依赖的npm包，所以在提交代码的时候要保证把所有依赖的包都已经在<code>package.json</code>中声明了，否则build就会失败。</p>\n<h2 id=\"Codecov\"><a href=\"#Codecov\" class=\"headerlink\" title=\"Codecov\"></a>Codecov</h2><p>Codecov是一个开源的测试结果展示平台，将测试结果可视化。Github上许多开源项目都使用了Codecov来展示单测结果。<br>Codecov跟Travis CI一样都支持Github账号登录，同样会同步Github中的项目。在nodejs环境下使用Codecov需要安装对于的npm包，运行下面这个命令进行安装：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install codecov --save-dev</div></pre></td></tr></table></figure></p>\n<p>这个包的作用是将我们运行单测产生的结果文件上传到Codecov上进行可视化展示。同时codecov支持的结果文件类型为<code>cobertura</code>。所以需要保证单测执行的结果文件的类型为<code>cobertura</code>。<br>前端项目进行单元测试推进<code>karma</code> + ‘jasmine’的组合。这两个具体是什么东西大家Google一下就知道。使用<code>karma</code>可以通过简单的配置来运行单测。下面是我一个项目中的配置文件，供大家参考：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Karma configuration</span></div><div class=\"line\"><span class=\"comment\">// Generated on Mon Feb 01 2016 21:34:22 GMT+0800 (中国标准时间)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">  config.set(&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// base path that will be used to resolve all patterns (eg. files, exclude)</span></div><div class=\"line\">    basePath: <span class=\"string\">''</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// frameworks to use</span></div><div class=\"line\">    <span class=\"comment\">// available frameworks: https://npmjs.org/browse/keyword/karma-adapter</span></div><div class=\"line\">    <span class=\"comment\">// 使用的测试框架jasmine, requirejs支持模块化加载</span></div><div class=\"line\">    frameworks: [<span class=\"string\">'jasmine'</span>, <span class=\"string\">'requirejs'</span>],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files / patterns to load in the browser</span></div><div class=\"line\">    files: [</div><div class=\"line\">        <span class=\"comment\">// karma中用到进行requirejs配置的文件</span></div><div class=\"line\">        <span class=\"string\">'test/test-main.js'</span>,</div><div class=\"line\">        <span class=\"comment\">// 测试中需要用到的文件，includeed设为false表示在页面加载的时候不会加载相应的js文件，也就是可以通过requirejs进行异步加载</span></div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/jquery/dist/jquery.min.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/angular/angular.min.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'node_modules/angular-mocks/angular-mocks.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'src/bg-single-selector.js'</span>, included: <span class=\"literal\">false</span>&#125;,</div><div class=\"line\">        &#123;pattern: <span class=\"string\">'test/selector.spec.js'</span>, included: <span class=\"literal\">false</span>&#125;</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// list of files to exclude</span></div><div class=\"line\">    exclude: [</div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// preprocess matching files before serving them to the browser</span></div><div class=\"line\">    <span class=\"comment\">// available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor</span></div><div class=\"line\">    <span class=\"comment\">// 针对bg-single-selector.js生成单测覆盖率结果</span></div><div class=\"line\">    preprocessors: &#123;</div><div class=\"line\">        <span class=\"string\">'src/bg-single-selector.js'</span>: <span class=\"string\">'coverage'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// test results reporter to use</span></div><div class=\"line\">    <span class=\"comment\">// possible values: 'dots', 'progress'</span></div><div class=\"line\">    <span class=\"comment\">// available reporters: https://npmjs.org/browse/keyword/karma-reporter</span></div><div class=\"line\">    <span class=\"comment\">// 测试结果的几种输出方式</span></div><div class=\"line\">    reporters: [<span class=\"string\">'progress'</span>, <span class=\"string\">'coverage'</span>, <span class=\"string\">'verbose'</span>],</div><div class=\"line\">    <span class=\"comment\">// 测试结果报告的类型</span></div><div class=\"line\">    coverageReporter:&#123;</div><div class=\"line\">        reporters: [&#123;</div><div class=\"line\">            type:<span class=\"string\">'text-summary'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            type: <span class=\"string\">'html'</span>,</div><div class=\"line\">            dir: <span class=\"string\">'test/coverage'</span></div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            <span class=\"comment\">// 这就是Codecov支持的文件类型</span></div><div class=\"line\">            type: <span class=\"string\">'cobertura'</span>,</div><div class=\"line\">            subdir: <span class=\"string\">'.'</span>,</div><div class=\"line\">            dir: <span class=\"string\">'test/coverage'</span></div><div class=\"line\">        &#125;]</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// web server port</span></div><div class=\"line\">    port: <span class=\"number\">9876</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// enable / disable colors in the output (reporters and logs)</span></div><div class=\"line\">    colors: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// level of logging</span></div><div class=\"line\">    <span class=\"comment\">// possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG</span></div><div class=\"line\">    logLevel: config.LOG_INFO,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// enable / disable watching file and executing tests whenever any file changes</span></div><div class=\"line\">    autoWatch: <span class=\"literal\">true</span>,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// start these browsers</span></div><div class=\"line\">    <span class=\"comment\">// available browser launchers: https://npmjs.org/browse/keyword/karma-launcher</span></div><div class=\"line\">    browsers: [<span class=\"string\">'PhantomJS'</span>],</div><div class=\"line\">    <span class=\"comment\">// 运行测试依赖的插件</span></div><div class=\"line\">    plugins: [</div><div class=\"line\">        <span class=\"string\">'karma-jasmine'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-coverage'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-verbose-reporter'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-phantomjs-launcher'</span>,</div><div class=\"line\">        <span class=\"string\">'karma-requirejs'</span></div><div class=\"line\">    ],</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Continuous Integration mode</span></div><div class=\"line\">    <span class=\"comment\">// if true, Karma captures browsers, runs the tests and exits</span></div><div class=\"line\">    singleRun: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过karma进行单元测试，将命令写到<code>.travis.yml</code>中就可以在每次build的时候运行单测，同时运行<code>codecov [cobertura-coverage.xml路径]</code>就会把单测结果上传到Codecov。在本地运行codecov会失败，需要将这个过程加入到Travis CI的build脚本中，才能成功上传。因为在本地运行就会被作为私有项目，对于私有项目在上传结果时需要加上Codecov提供的token。</p>\n<h2 id=\"在github中加入图标\"><a href=\"#在github中加入图标\" class=\"headerlink\" title=\"在github中加入图标\"></a>在github中加入图标</h2><p>到了最后一步，Travis CI和Codecov都提供图标链接来展示结果。我们只需要将图标链接加入到项目的README中就可以看到结果了。<br>对于Travis CI来说，点击下图中的图标：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOi\" alt=\"clipboard.png\"><br>就会弹出图标的地址。<br>对于Codecov来说，打开项目的设置列表就会看到，如下：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOj\" alt=\"clipboard.png\"></p>\n<p>最后只需要将对应的链接加到README文件中就可以了。下面是最后的效果：</p>\n<p><img src=\"https://segmentfault.com/img/bVsGOq\" alt=\"clipboard.png\"></p>\n<p>是不是很赞！<br>项目地址：<a href=\"https://github.com/GaojingComponent/BGSingleSelector\" target=\"_blank\" rel=\"external\">BGSingleSelector</a>，欢迎大家试用提意见，同时不要吝啬Star。</p>\n<p>最后的最后，做一个广告。<a href=\"http://gaojing.baidu.com/#/\" target=\"_blank\" rel=\"external\">百度告警平台</a>。这是一个智能的告警平台，提供实时精确的告警送达，故障的协作处理能力。再也不需要担心遗漏监控报警，解放运维人力。</p>\n"}