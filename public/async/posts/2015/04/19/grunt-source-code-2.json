{"tags":[{"name":"grunt","permalink":"http://bin-playground.top/blog/tags/grunt/","url":"\\async\\tags\\grunt.json","count":3}],"categories":[],"url":"\\async\\posts\\2015\\04\\19\\grunt-source-code-2.json","date":1429406773000,"path":{"year":2015,"month":4,"day":19,"name":"grunt-source-code-2"},"title":"看看 Grunt 的源码（二）：grunt 任务运行相关源码解析","permalink":"http://bin-playground.top/blog/2015/04/19/grunt-source-code-2/","content":"<p>上一篇分享了关于grunt-cli的源码解析，这篇开始grunt核心部分代码的解析，还是从上一篇结束部分开始。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用grunt执行任务</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(gruntpath).cli();</span><br></pre></td></tr></table></figure>\n<p>  <code>gruntpath</code>是通过解析得到的grunt.js的文件路径，通过<code>require</code>方法加载grunt模块然后调用模块的<code>cli</code>方法来运行命令行最后运行命令行中的任务。<br><a id=\"more\"></a><br>  我们先从大体上看看grunt从输入命令行到任务运行完毕整个过程中都经过了哪些步骤。下图是我根据源码得出的一个流程图。</p>\n<p><img src=\"https://segmentfault.com/img/bVlrNU\" alt=\"图片描述\"></p>\n<ol>\n<li>首先，我们输入命令行之后调用<code>require(gruntpath).cli()</code>方法，在cli方法中会初始化命令行的默认参数列表，解析输入命令行的参数以及任务名称</li>\n<li>然后调用<code>grunt.tasks</code>方法，将任务参数和名称传入。在<code>grunt.tasks</code>方法中，会进一步对参数进行解析，初始化log功能，如果参数带有version或者help选项那么直接执行相应的函数，否则就解析任务名称。</li>\n<li>接着调用<code>task.init</code>方法。加载<code>Gruntfile.js</code>文件，注册任务信息以及配置信息。</li>\n<li>接着调用<code>task.run</code>方法。<code>task.run</code>方法并不会运行任务，而是把任务相关信息添加到任务队列中。</li>\n<li>最后才是调用<code>task.start</code>方法来依次运行任务队列中的任务。</li>\n</ol>\n<p>下面来一步步解析grunt核心源码。首先，来看看<code>lib/grunt/cli.js</code>文件中的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行命令行时执行的函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cli = <span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options, done</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 利用传递的参数设置cli.options对象，但是不覆盖命令行的参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.keys(options).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> cli.options)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果输入的命令行中不存在这个参数，那么把它加入到cli的options属性中</span></span><br><span class=\"line\">        cli.options[key] = options[key];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cli.optlist[key].type === <span class=\"built_in\">Array</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果输入的命令行中存在这个参数，并且参数的类型是数组，那么把它加入到数组尾部</span></span><br><span class=\"line\">        [].push.apply(cli.options[key], options[key]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 运行任务</span></span><br><span class=\"line\">  grunt.tasks(cli.tasks, cli.options, done);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认的参数选项列表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> optlist = cli.optlist = &#123;</span><br><span class=\"line\">  help: &#123;</span><br><span class=\"line\">    short: <span class=\"string\">'h'</span>,</span><br><span class=\"line\">    info: <span class=\"string\">'Display this help text.'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  base: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Specify an alternate base path. By default, all file paths are relative to the Gruntfile. '</span> +</span><br><span class=\"line\">          <span class=\"string\">'(grunt.file.setBase) *'</span>,</span><br><span class=\"line\">    type: path</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  color: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Disable colored output.'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    negate: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  gruntfile: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Specify an alternate Gruntfile. By default, grunt looks in the current or parent directories '</span> +</span><br><span class=\"line\">          <span class=\"string\">'for the nearest Gruntfile.js or Gruntfile.coffee file.'</span>,</span><br><span class=\"line\">    type: path</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  debug: &#123;</span><br><span class=\"line\">    short: <span class=\"string\">'d'</span>,</span><br><span class=\"line\">    info: <span class=\"string\">'Enable debugging mode for tasks that support it.'</span>,</span><br><span class=\"line\">    type: [<span class=\"built_in\">Number</span>, <span class=\"built_in\">Boolean</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  stack: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Print a stack trace when exiting with a warning or fatal error.'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  force: &#123;</span><br><span class=\"line\">    short: <span class=\"string\">'f'</span>,</span><br><span class=\"line\">    info: <span class=\"string\">'A way to force your way past warnings. Want a suggestion? Don\\'t use this option, fix your code.'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  tasks: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Additional directory paths to scan for task and \"extra\" files. (grunt.loadTasks) *'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Array</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  npm: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Array</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  write: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Disable writing files (dry run).'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">    negate: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  verbose: &#123;</span><br><span class=\"line\">    short: <span class=\"string\">'v'</span>,</span><br><span class=\"line\">    info: <span class=\"string\">'Verbose mode. A lot more information output.'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  version: &#123;</span><br><span class=\"line\">    short: <span class=\"string\">'V'</span>,</span><br><span class=\"line\">    info: <span class=\"string\">'Print the grunt version. Combine with --verbose for more info.'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">Boolean</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  completion: &#123;</span><br><span class=\"line\">    info: <span class=\"string\">'Output shell auto-completion rules. See the grunt-cli documentation for more information.'</span>,</span><br><span class=\"line\">    type: <span class=\"built_in\">String</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 利用optlist列表初始化aliases和known对象</span></span><br><span class=\"line\"><span class=\"comment\">// 传递给nopt模块进行命令行参数解析</span></span><br><span class=\"line\"><span class=\"comment\">// nopt是一个用来解析命令行参数的第三方模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> aliases = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> known = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> short = optlist[key].short;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (short) &#123;</span><br><span class=\"line\">    aliases[short] = <span class=\"string\">'--'</span> + key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  known[key] = optlist[key].type;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> parsed = nopt(known, aliases, process.argv, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取命令行中的任务名称</span></span><br><span class=\"line\">cli.tasks = parsed.argv.remain;</span><br><span class=\"line\"><span class=\"comment\">// 获得命令行中的参数</span></span><br><span class=\"line\">cli.options = parsed;</span><br><span class=\"line\"><span class=\"keyword\">delete</span> parsed.argv;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化类型为数组但是还没被初始化的参数，比如npm和task</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (optlist[key].type === <span class=\"built_in\">Array</span> &amp;&amp; !(key <span class=\"keyword\">in</span> cli.options)) &#123;</span><br><span class=\"line\">    cli.options[key] = [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这段代码相对比较简单，主要功能就是解析任务名和参数然后传递给<code>grunt.tasks</code>方法进行调用。<br>下面来看看<code>grunt.js</code>中关于<code>grunt.tasks</code>方法的代码。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个tasks方法一般只在grunt内部调用</span></span><br><span class=\"line\"><span class=\"comment\">// tasks方法用来将任务添加到任务队列中，并且运行任务</span></span><br><span class=\"line\">grunt.tasks = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tasks, options, done</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// option模块对命令行参数进行包装</span></span><br><span class=\"line\">  <span class=\"comment\">// init方法对参数进行了初始化，在方法内部判断传入参数是否为空</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果为空则初始化为空对象否则使用传入的对象进行初始化</span></span><br><span class=\"line\">  option.init(options);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _tasks, _options;</span><br><span class=\"line\">  <span class=\"comment\">// option方法接受可变属性的参数，</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果传入一个参数则在参数对象中找出对于的参数，</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果传入两个参数则根据这两个参数设置key-value键值对，并value</span></span><br><span class=\"line\">  <span class=\"comment\">// 同时方法内部会用正则匹配no-color、no-write的情况，</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果出现则设置option['color']或option['write']为false，并返回false</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (option(<span class=\"string\">'version'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果带有version参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 输出版本信息</span></span><br><span class=\"line\">    log.writeln(<span class=\"string\">'grunt v'</span> + grunt.version);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (option(<span class=\"string\">'verbose'</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// //输出详细信息，包括grunt的路径</span></span><br><span class=\"line\">      verbose.writeln(<span class=\"string\">'Install path: '</span> + path.resolve(__dirname, <span class=\"string\">'..'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      grunt.log.muted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化任务系统，解析gruntfile以便输出所有可用的任务</span></span><br><span class=\"line\">      grunt.task.init([], &#123;help: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">      grunt.log.muted = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 输出可用的任务信息</span></span><br><span class=\"line\">      _tasks = <span class=\"built_in\">Object</span>.keys(grunt.task._tasks).sort();</span><br><span class=\"line\">      verbose.writeln(<span class=\"string\">'Available tasks: '</span> + _tasks.join(<span class=\"string\">' '</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 输出所有可用参数的详细信息</span></span><br><span class=\"line\">      _options = [];</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.keys(grunt.cli.optlist).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">long</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> o = grunt.cli.optlist[long];</span><br><span class=\"line\">        _options.push(<span class=\"string\">'--'</span> + (o.negate ? <span class=\"string\">'no-'</span> : <span class=\"string\">''</span>) + long);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o.short) &#123; _options.push(<span class=\"string\">'-'</span> + o.short); &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      verbose.writeln(<span class=\"string\">'Available options: '</span> + _options.join(<span class=\"string\">' '</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 初始化log的着色功能</span></span><br><span class=\"line\">  log.initColors();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果参数带有help则输出帮助信息</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (option(<span class=\"string\">'help'</span>)) &#123;</span><br><span class=\"line\">    help.display();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据option输出命令行参数，flags方法会过滤掉值为空的参数</span></span><br><span class=\"line\">  verbose.header(<span class=\"string\">'Initializing'</span>).writeflags(option.flags(), <span class=\"string\">'Command-line options'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 判断是否有传入tasks参数并且任务长度大于0</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tasksSpecified = tasks &amp;&amp; tasks.length &gt; <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">//将传入参数进行转换，转换为任务数组，如果没有传入有效的任务那么使用默认default任务</span></span><br><span class=\"line\">  tasks = task.parseArgs([tasksSpecified ? tasks : <span class=\"string\">'default'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 根据传入的tasks参数初始化任务</span></span><br><span class=\"line\">  <span class=\"comment\">// 在方法中加载gruntfile.js文件，进行任务注册和配置的解析</span></span><br><span class=\"line\">  <span class=\"comment\">// 也就是加载我们编写的任务代码</span></span><br><span class=\"line\">  task.init(tasks, options);</span><br><span class=\"line\"></span><br><span class=\"line\">  verbose.writeln();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!tasksSpecified) &#123;</span><br><span class=\"line\">    verbose.writeln(<span class=\"string\">'No tasks specified, running default tasks.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  verbose.writeflags(tasks, <span class=\"string\">'Running tasks'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 注册异常处理函数，输出异常信息</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> uncaughtHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    fail.fatal(e, fail.code.TASK_FAILURE);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  process.on(<span class=\"string\">'uncaughtException'</span>, uncaughtHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">  task.options(&#123;</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      fail.warn(e, fail.code.TASK_FAILURE);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    done: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 当任务完成之后移除异常监听函数，减少多余的开销</span></span><br><span class=\"line\">      process.removeListener(<span class=\"string\">'uncaughtException'</span>, uncaughtHandler);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 输出最后的运行结果，失败或者成功</span></span><br><span class=\"line\">      fail.report();</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (done) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果存在done函数的话，当完成任务时执行done函数</span></span><br><span class=\"line\">        done();</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果没有done函数直接结束进程</span></span><br><span class=\"line\">        util.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将任务依次加入内部的任务队列中，run方法并不会运行任务，只是加入到队列中</span></span><br><span class=\"line\">  tasks.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123; task.run(name); &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 开始运行任务队列中的任务</span></span><br><span class=\"line\">  task.start(&#123;asyncDone:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>grunt.tasks</code>代码中，首先会进行参数的初始化，接着判断参数是否带有version或者help选项，如果带有这两个选项就进行相应的工作而不运行任务任务，否则解析任务名进行任务初始化并添加到任务队列中，最后运行任务。<br>在<code>grunt.tasks</code>方法中比较重要的三个方法就是<code>task.init</code>，<code>task.run</code>和<code>task.start</code>方法。下面看看<code>task.init</code>方法的具体实现。这个方法位于<code>lib/grunt/task.js</code>文件中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化任务</span></span><br><span class=\"line\">task.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tasks, options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options) &#123; options = &#123;&#125;; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 拥有init方法说明task是初始化任务，比如第三方插件</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> allInit = tasks.length &gt; <span class=\"number\">0</span> &amp;&amp; tasks.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = task._taskPlusArgs(name).task;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj &amp;&amp; obj.init;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取gruntfile.js路径，如果有指定路径那么直接使用否则在当前目录及父目录中查找</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> gruntfile, msg;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (allInit || options.gruntfile === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    gruntfile = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    gruntfile = grunt.option(<span class=\"string\">'gruntfile'</span>) ||</span><br><span class=\"line\">      grunt.file.findup(<span class=\"string\">'Gruntfile.&#123;js,coffee&#125;'</span>, &#123;nocase: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">    msg = <span class=\"string\">'Reading \"'</span> + (gruntfile ? path.basename(gruntfile) : <span class=\"string\">'???'</span>) + <span class=\"string\">'\" Gruntfile...'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果参数中将gruntfile设为false，那么说明任务是一个插件或者库</span></span><br><span class=\"line\">  <span class=\"comment\">// 不做任何操作</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options.gruntfile === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Grunt was run as a lib with &#123;gruntfile: false&#125;.</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (gruntfile &amp;&amp; grunt.file.exists(gruntfile)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在gruntfile</span></span><br><span class=\"line\">    grunt.verbose.writeln().write(msg).ok();</span><br><span class=\"line\">    <span class=\"comment\">// 修改进程的操作目录，如果有指定base那么使用base目录否则就使用gruntfile所在的目录</span></span><br><span class=\"line\">    process.chdir(grunt.option(<span class=\"string\">'base'</span>) || path.dirname(gruntfile));</span><br><span class=\"line\">    <span class=\"comment\">// 在verbose情况下输出Registering Gruntfile tasks信息</span></span><br><span class=\"line\">    loadTasksMessage(<span class=\"string\">'Gruntfile'</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 加载gruntfile中的任务</span></span><br><span class=\"line\">    loadTask(gruntfile);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.help || allInit) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没找到grunt但是有help参数的话，那么不做任何操作</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grunt.option(<span class=\"string\">'gruntfile'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果指定了gruntfile参数但是找不到文件那么输出错误信息</span></span><br><span class=\"line\">    grunt.log.writeln().write(msg).error();</span><br><span class=\"line\">    grunt.fatal(<span class=\"string\">'Unable to find \"'</span> + gruntfile + <span class=\"string\">'\" Gruntfile.'</span>, grunt.fail.code.MISSING_GRUNTFILE);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!grunt.option(<span class=\"string\">'help'</span>)) &#123;</span><br><span class=\"line\">    grunt.verbose.writeln().write(msg).error();</span><br><span class=\"line\">    grunt.log.writelns(</span><br><span class=\"line\">      <span class=\"string\">'A valid Gruntfile could not be found. Please see the getting '</span> +</span><br><span class=\"line\">      <span class=\"string\">'started guide for more information on how to configure grunt: '</span> +</span><br><span class=\"line\">      <span class=\"string\">'http://gruntjs.com/getting-started'</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    grunt.fatal(<span class=\"string\">'Unable to find Gruntfile.'</span>, grunt.fail.code.MISSING_GRUNTFILE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载用户指定的npm包</span></span><br><span class=\"line\">  (grunt.option(<span class=\"string\">'npm'</span>) || []).forEach(task.loadNpmTasks);</span><br><span class=\"line\">  <span class=\"comment\">// 加载用户指定的任务</span></span><br><span class=\"line\">  (grunt.option(<span class=\"string\">'tasks'</span>) || []).forEach(task.loadTasks);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在初始化任务之后<code>grunt.tasks</code>方法会调用<code>task.run</code>方法，将任务添加到任务队列中等待执行。下面是<code>task.run</code>方法的代码，它也是位于<code>lib/util/task.js</code>文件中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将任务加入到队列中</span></span><br><span class=\"line\">Task.prototype.run = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将参数转换为数组并且根据参数构建任务对象</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> things = <span class=\"keyword\">this</span>.parseArgs(<span class=\"built_in\">arguments</span>).map(<span class=\"keyword\">this</span>._taskPlusArgs, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 找出无法构建的任务</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> fails = things.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thing</span>) </span>&#123; <span class=\"keyword\">return</span> !thing.task; &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fails.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果存在无法构建的任务，抛出错误并返回</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._throwIfRunning(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Task \"'</span> + fails[<span class=\"number\">0</span>].nameArgs + <span class=\"string\">'\" not found.'</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将任务加入到任务队列相应的位置</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._push(things);</span><br><span class=\"line\">  <span class=\"comment\">// 支持链式调用</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 将任务名分离为真实运行的任务名和参数的对象，比如：</span></span><br><span class=\"line\"><span class=\"comment\">// 'foo'          ==&gt;  任务名为foo，没有参数</span></span><br><span class=\"line\"><span class=\"comment\">// 'foo:bar:baz'  ==&gt;  如果'foo:bar:baz'任务存在，那么任务名为'foo:bar:baz'，没有参数</span></span><br><span class=\"line\"><span class=\"comment\">//                ==&gt;  如果'foo:bar'任务存在，那么任务名为'foo:bar'，参数为'baz'</span></span><br><span class=\"line\"><span class=\"comment\">//                ==&gt;  如果'foo'任务存在，那么任务名为'foo'，参数为'bar'和'baz'</span></span><br><span class=\"line\">Task.prototype._taskPlusArgs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将传入的任务名根据冒号转换为数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parts = <span class=\"keyword\">this</span>.splitArgs(name);</span><br><span class=\"line\">  <span class=\"comment\">// 从数组最后开始遍历数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = parts.length;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> task;</span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将0到i的数组转换为任务名，用冒号隔开</span></span><br><span class=\"line\">    <span class=\"comment\">// 然后根据得到的任务名从任务缓存中得到相应的任务</span></span><br><span class=\"line\">    task = <span class=\"keyword\">this</span>._tasks[parts.slice(<span class=\"number\">0</span>, i).join(<span class=\"string\">':'</span>)];</span><br><span class=\"line\">    <span class=\"comment\">// 如果相应任务不存在，那么i减1，知道i等于0</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (!task &amp;&amp; --i &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 除了任务名以外的部分属于参数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = parts.slice(i);</span><br><span class=\"line\">  <span class=\"comment\">// 根据参数列表，得到相应的boolean型标记</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> flags = &#123;&#125;;</span><br><span class=\"line\">  args.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123; flags[arg] = <span class=\"literal\">true</span>; &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 返回构建的任务对象，包括任务名和任务参数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;task: task, nameArgs: name, args: args, flags: flags&#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>task.run</code>方法中，首先将参数进行分离，分隔出任务名和参数，然后利用任务名和参数构建一个任务对象，最后将这个对象放入任务队列中，参数分离的实现方法为<code>_taskPlusArgs</code>。调用<code>task.run</code>之后，<code>grunt.tasks</code>方法马上就会调用<code>task.start</code>方法运行任务队列中的任务。<code>task.start</code>方法的实现也在<code>lib/util/task.js</code>文件中，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开始运行任务队列中的任务</span></span><br><span class=\"line\">Task.prototype.start = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">opts</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//初始化opts对象</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!opts) &#123;</span><br><span class=\"line\">    opts = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果任务正在运行则退出</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._running) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通过nextTask依次运行队列中的任务</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> nextTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来保存从队列中取出的任务对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> thing;</span><br><span class=\"line\">    <span class=\"comment\">// 取出队列中的元素，直到取出的元素不是placeholder和marker</span></span><br><span class=\"line\">    <span class=\"comment\">// placeholder用来处理嵌套任务的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//取出队列中的任务对象</span></span><br><span class=\"line\">      thing = <span class=\"keyword\">this</span>._queue.shift();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (thing === <span class=\"keyword\">this</span>._placeholder || thing === <span class=\"keyword\">this</span>._marker);</span><br><span class=\"line\">    <span class=\"comment\">// 如果队列为空，那么完成任务，执行可选的done函数并返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!thing) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._options.done) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._options.done();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 向队列中插入一个placeholder</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._queue.unshift(<span class=\"keyword\">this</span>._placeholder);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 使用取出的任务对象构造任务函数的上下文对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 任务名称:target名称:参数</span></span><br><span class=\"line\">      nameArgs: thing.nameArgs,</span><br><span class=\"line\">      <span class=\"comment\">// 任务名称</span></span><br><span class=\"line\">      name: thing.task.name,</span><br><span class=\"line\">      <span class=\"comment\">// 任务参数，这个参数包括了除了任务名以外的东西，包括target名称和参数</span></span><br><span class=\"line\">      args: thing.args,</span><br><span class=\"line\">      <span class=\"comment\">// 以args为键的键值对，值为true</span></span><br><span class=\"line\">      flags: thing.flags</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 运行任务的注册函数，上下文设置为上面构造的context函数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.runTaskFn(context, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> thing.task.fn.apply(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.args);</span><br><span class=\"line\">    &#125;, nextTask, !!opts.asyncDone);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把任务标记为正在运行</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._running = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 运行任务队列中的下一个任务</span></span><br><span class=\"line\">  nextTask();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 运行任务的注册函数</span></span><br><span class=\"line\">Task.prototype.runTaskFn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context, fn, done, asyncDone</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 标记是否异步</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"keyword\">async</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 执行函数完成之后的工作，更新任务状态，执行done函数也就是运行下一个任务</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> complete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> err = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 任务运行失败，创建错误对象</span></span><br><span class=\"line\">      err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Task \"'</span> + context.nameArgs + <span class=\"string\">'\" failed.'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (success <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span> || &#123;&#125;.toString.call(success) === <span class=\"string\">'[object Error]'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果传入的是错误对象，表示任务执行失败</span></span><br><span class=\"line\">      err = success;</span><br><span class=\"line\">      success = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 任务运行成功</span></span><br><span class=\"line\">      success = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 任务结束后重置当前运行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.current = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 记录任务执行结构</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._success[context.nameArgs] = success;</span><br><span class=\"line\">    <span class=\"comment\">// 如果任务失败则调用错误处理函数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!success &amp;&amp; <span class=\"keyword\">this</span>._options.error) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>._options.error.call(&#123;name: context.name, nameArgs: context.nameArgs&#125;, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果指定了异步执行，那么使用node自带的nextTick来运行done</span></span><br><span class=\"line\">    <span class=\"comment\">// 否则直接运行done</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (asyncDone) &#123;</span><br><span class=\"line\">      process.nextTick(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        done(err, success);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      done(err, success);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用来支持异步任务，也就是this.async()方法的实现，</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回函数在异步任务完成时被调用执行complete方法</span></span><br><span class=\"line\">  context.async = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回的函数在任务中的异步工作完成后被调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">success</span>) </span>&#123;</span><br><span class=\"line\">      setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; complete(success); &#125;, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 记录当前正在运行的任务上下文</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.current = context;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行任务的注册函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = fn.call(context);</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有使用this.async</span></span><br><span class=\"line\">    <span class=\"comment\">// 也就是说async标记为false时在任务完成之后直接调用complete方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">async</span>) &#123;</span><br><span class=\"line\">      complete(success);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    complete(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>在<code>task.start</code>方法中定义了一个<code>nextTask</code>方法，方法的作用是依次执行任务队列中的任务，从任务队列中取出任务对象，利用任务对象构建一个上下文对象，然后在这个上下文中执行任务的注册函数，执行完注册函数之后执行队列中的下一个任务。执行注册函数的功能有<code>task.runTaskFn</code>方法实现。在这个方法中定义了一个<code>complele</code>方法，会在任务注册函数执行完成后备调用，进行错误处理工作。同时在<code>task.runTaskFn</code>方法中还向上下文对象<code>context</code>中添加了一个<code>async</code>方法，这个方法就是当我们需要在任务中进行一些异步操作是首先需要调用的方法，调用这个方法之后会返回一个函数，这个函数会异步执行<code>complete</code>方法，如果没有<code>async</code>方法，那么在我们任务中的异步操作还未返回时，grunt内部就会调用<code>complete</code>方法，这样就会造成错误。有了<code>async</code>方法，我们就可以确保<code>complete</code>方法是在我们任务完成之后才被调用。</p>\n<p>上面所涉及到的几个方法就是grunt中运行任务过程中主要的几个方法。大家肯定还觉得少了点什么，想要运行任务首先需要在<code>gruntfile.js</code>中注册任务，所以下一次我将和大家分享任务注册相关的源码解析，敬请期待。</p>\n"}