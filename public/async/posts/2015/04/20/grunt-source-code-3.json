{"tags":[{"name":"grunt","permalink":"/tags/grunt/","url":"\\async\\tags\\grunt.json","count":3}],"categories":[],"url":"\\async\\posts\\2015\\04\\20\\grunt-source-code-3.json","date":1429493312000,"path":{"year":2015,"month":4,"day":20,"name":"grunt-source-code-3"},"title":"看看 Grunt 的源码（三）：grunt 任务注册相关源码解析","permalink":"/2015/04/20/grunt-source-code-3/","content":"<p>上一篇分享了关于grunt中任务运行相关源码的解析，这一篇来分享grunt中跟任务注册相关的源码解析，废话不多说，开始吧。<br><a id=\"more\"></a><br>跟任务注册相关的两个方法是 <code>grunt.registerTask</code> 和<code>grunt.registerMultiTask</code> 。这两个方法都位于 <code>lib/grunt/task.js</code> 文件中。首先来看看 <code>grunt.registerTask</code> 方法的实现，这个方法还涉及到了 <code>lib/util/task.js</code> 文件中的 <code>registerTask</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//lib/grunt/task.js</span></span><br><span class=\"line\">task.registerTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将任务加入到registry中</span></span><br><span class=\"line\">  registry.tasks.push(name);</span><br><span class=\"line\">  <span class=\"comment\">// 调用parent的registerTask方法注册任务</span></span><br><span class=\"line\">  parent.registerTask.apply(task, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 调用parent.registerTask方法之后，任务会被加入到_tasks缓存中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> thisTask = task._tasks[name];</span><br><span class=\"line\">  <span class=\"comment\">// 复制任务的元数据</span></span><br><span class=\"line\">  thisTask.meta = grunt.util._.clone(registry.meta);</span><br><span class=\"line\">  <span class=\"comment\">// 对注册的任务函数进行封装</span></span><br><span class=\"line\">  <span class=\"comment\">// 在真实函数执行之前进行一些预处理</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> _fn = thisTask.fn;</span><br><span class=\"line\">  thisTask.fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存任务名称</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = thisTask.name;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化任务的errorcount</span></span><br><span class=\"line\">    errorcount = grunt.fail.errorcount;</span><br><span class=\"line\">    <span class=\"comment\">// 返回任务运行期间的errorcount</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'errorCount'</span>, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> grunt.fail.errorcount - errorcount;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 将task.requires方法添加到this对象中</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requires = task.requires.bind(task);</span><br><span class=\"line\">    <span class=\"comment\">// 将grunt.config.requires方法添加到this对象中</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requiresConfig = grunt.config.requires;</span><br><span class=\"line\">    <span class=\"comment\">// options方法返回任务的相关option参数，可以通过参数覆盖默认的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = [&#123;&#125;].concat(grunt.util.toArray(<span class=\"built_in\">arguments</span>)).concat([</span><br><span class=\"line\">        grunt.config([name, <span class=\"string\">'options'</span>])</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> options = grunt.util._.extend.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">      grunt.verbose.writeflags(options, <span class=\"string\">'Options'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化log输出工作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> logger = _fn.alias || (thisTask.multi &amp;&amp; (!arg || arg === <span class=\"string\">'*'</span>)) ? <span class=\"string\">'verbose'</span> : <span class=\"string\">'log'</span>;</span><br><span class=\"line\">    grunt[logger].header(<span class=\"string\">'Running \"'</span> + <span class=\"keyword\">this</span>.nameArgs + <span class=\"string\">'\"'</span> +</span><br><span class=\"line\">      (<span class=\"keyword\">this</span>.name !== <span class=\"keyword\">this</span>.nameArgs ? <span class=\"string\">' ('</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">')'</span> : <span class=\"string\">''</span>) + <span class=\"string\">' task'</span>);</span><br><span class=\"line\">    grunt[logger].debug(<span class=\"string\">'Task source: '</span> + thisTask.meta.filepath);</span><br><span class=\"line\">    <span class=\"comment\">// 运行真实注册的任务函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> task;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//lib/util/task.js</span></span><br><span class=\"line\"><span class=\"comment\">// 注册任务</span></span><br><span class=\"line\">Task.prototype.registerTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, info, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有传递info，调整参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如grunt.registerTask('taskName',function()&#123;&#125;)的情况</span></span><br><span class=\"line\">  <span class=\"comment\">// 这时候info为function函数，所以把info赋值给fn</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    fn = info;</span><br><span class=\"line\">    info = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果fn是字符串或者字符串数组</span></span><br><span class=\"line\">  <span class=\"comment\">// 比如grunt.registerTask('task',['task1','task2','task3'])的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tasks;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 针对上面的情况，这时候tasks=['task1','task2','task3']</span></span><br><span class=\"line\">    tasks = <span class=\"keyword\">this</span>.parseArgs([fn]);</span><br><span class=\"line\">    <span class=\"comment\">// 将任务的函数改为将每个子任务添加到任务队列中</span></span><br><span class=\"line\">    <span class=\"comment\">// 也就是分别将task1,task2和task3加入任务队列中</span></span><br><span class=\"line\">    fn = <span class=\"keyword\">this</span>.run.bind(<span class=\"keyword\">this</span>, fn);</span><br><span class=\"line\">    fn.alias = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这种情况下task相当于task1,task2和task3任务组合的别名</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!info) &#123;</span><br><span class=\"line\">      info = <span class=\"string\">'Alias for \"'</span> + tasks.join(<span class=\"string\">'\", \"'</span>) + <span class=\"string\">'\" task'</span> +</span><br><span class=\"line\">        (tasks.length === <span class=\"number\">1</span> ? <span class=\"string\">''</span> : <span class=\"string\">'s'</span>) + <span class=\"string\">'.'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!info) &#123;</span><br><span class=\"line\">    info = <span class=\"string\">'Custom task.'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 将任务加入到缓存中</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._tasks[name] = &#123;name: name, info: info, fn: fn&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 返回任务对象，支持链式调用</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>registerTask</code> 方法中，首先会调用 <code>lib/util/task.js</code> 中的 <code>registerTask</code> 方法，而在这个方法中会修正方法的参数，然后将任务对象加入到任务缓存中；接着回到 <code>registerTask</code> 方法中对注册的函数进行封装，在封装的函数中会在函数执行前进行一些初始化工作，最后再执行注册函数。</p>\n<p>下面来看看 <code>grunt.registerMultiTask</code> 方法的实现。这个方法是针对具有多个target的任务的注册。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组成含有多target的task</span></span><br><span class=\"line\">task.registerMultiTask = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, info, fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 针对grunt.registerMultiTask('taskName',function()&#123;&#125;)的情况</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    fn = info;</span><br><span class=\"line\">    info = <span class=\"string\">'Custom multi task.'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> thisTask;</span><br><span class=\"line\">  task.registerTask(name, info, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = thisTask.name;</span><br><span class=\"line\">    <span class=\"comment\">// 获得除了任务名以外的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.args = grunt.util.toArray(<span class=\"built_in\">arguments</span>).slice(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有指定target或者指定为*，那么运行所以target</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!target || target === <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> task.runAllTargets(name, <span class=\"keyword\">this</span>.args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!isValidMultiTaskTarget(target)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果存在不合法的target则抛出错误</span></span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Invalid target \"'</span> + target + <span class=\"string\">'\" specified.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否存在对应target的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.requiresConfig([name, target]);</span><br><span class=\"line\">    <span class=\"comment\">// options方法返回任务的相关option参数，可以通过参数覆盖默认的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.options = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> targetObj = grunt.config([name, target]);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = [&#123;&#125;].concat(grunt.util.toArray(<span class=\"built_in\">arguments</span>)).concat([</span><br><span class=\"line\">        grunt.config([name, <span class=\"string\">'options'</span>]),</span><br><span class=\"line\">        grunt.util.kindOf(targetObj) === <span class=\"string\">'object'</span> ? targetObj.options : &#123;&#125;</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> options = grunt.util._.extend.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\">      grunt.verbose.writeflags(options, <span class=\"string\">'Options'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> options;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 将target添加到this对象中</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    <span class=\"comment\">// 为this对象添加flags属性，并且初始化flags对象</span></span><br><span class=\"line\">    <span class=\"comment\">// flags对象用来记录参数列表中是否存在对象的参数</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果存在值为true</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.flags = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.args.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>) </span>&#123; <span class=\"keyword\">this</span>.flags[arg] = <span class=\"literal\">true</span>; &#125;, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 将target的对于配置添加到this对象中</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个配置也就是我们通过initConfig定义的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = grunt.config([name, target]);</span><br><span class=\"line\">    <span class=\"comment\">// 将封装之后的files对象添加到this对象中</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.files = task.normalizeMultiTaskFiles(<span class=\"keyword\">this</span>.data, target);</span><br><span class=\"line\">    <span class=\"comment\">// 将src的相关值添加到this的filesSrc属性中</span></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(<span class=\"keyword\">this</span>, <span class=\"string\">'filesSrc'</span>, &#123;</span><br><span class=\"line\">      enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> grunt.util._(<span class=\"keyword\">this</span>.files).chain().pluck(<span class=\"string\">'src'</span>).flatten().uniq().value();</span><br><span class=\"line\">      &#125;.bind(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 调用任务注册函数，传入相应参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, <span class=\"keyword\">this</span>.args);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 缓存任务</span></span><br><span class=\"line\">  thisTask = task._tasks[name];</span><br><span class=\"line\">  <span class=\"comment\">// 将任务标记为多任务</span></span><br><span class=\"line\">  thisTask.multi = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>registerMultiTask</code> 方法中会调用 <code>registerTask</code> 方法注册任务，而在注册的函数中首先会根据传入的target执行相应操作，如果没有传入target或者传入 <code>*</code> 那么就调用 <code>runAllTargets</code> 方法将所有target都加入任务队列中，否则执行对应的target，接着获取target的相应配置，调用 <code>normalizeMultiTaskFiles</code> 方法将配置数据转换为内部的file对象（PS：这个过程是grunt比较方便的一个地方，它有多种形式来定义文件路径之间的映射，并且支持多种表达式，file对象也是我一开始看grunt的东西，觉得这很神奇。后面我会说到这个方法），最后调用任务实际注册的函数。</p>\n<p>下面我们就来看看 <code>normalizeMultiTaskFiles</code> 方法的具体实现。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task.normalizeMultiTaskFiles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prop, obj;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> files = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grunt.util.kindOf(data) === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> data || <span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/*</span><br><span class=\"line\">      *Compact Format的情况，比如：</span><br><span class=\"line\">      *'bar' : &#123;</span><br><span class=\"line\">      *  'src' : ['a.js','b.js'] ,</span><br><span class=\"line\">      *  'dest' : 'c.js'</span><br><span class=\"line\">      *&#125;</span><br><span class=\"line\">      */</span></span><br><span class=\"line\">      obj = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"comment\">// 将除了options以外的配置复制到obj对象中</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prop !== <span class=\"string\">'options'</span>) &#123;</span><br><span class=\"line\">          obj[prop] = data[prop];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      files.push(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grunt.util.kindOf(data.files) === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/*</span><br><span class=\"line\">      *Files Object Format的情况，比如：</span><br><span class=\"line\">      *'bar' : &#123;</span><br><span class=\"line\">      *  'files' : &#123;</span><br><span class=\"line\">      *     'c.js' : ['a.js','b.js']</span><br><span class=\"line\">      *   &#125;</span><br><span class=\"line\">      *&#125;</span><br><span class=\"line\">      */</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> data.files) &#123;</span><br><span class=\"line\">        files.push(&#123;src: data.files[prop], dest: grunt.config.process(prop)&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(data.files)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/*</span><br><span class=\"line\">      *Files Array Format的情况，比如：</span><br><span class=\"line\">      *'bar' : &#123;</span><br><span class=\"line\">      *  'files' : [</span><br><span class=\"line\">      *     &#123;'src':['a.js','b.js'],'dest':'c.js'&#125;,</span><br><span class=\"line\">      *     &#123;'src':['a.js','b.js'],'dest':'d.js'&#125;</span><br><span class=\"line\">      *   ]</span><br><span class=\"line\">      *&#125;</span><br><span class=\"line\">      */</span></span><br><span class=\"line\">      grunt.util._.flatten(data.files).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prop;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj || <span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">          files.push(obj);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (prop <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            files.push(&#123;src: obj[prop], dest: grunt.config.process(prop)&#125;);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span><br><span class=\"line\">    *Older Format的情况，比如：</span><br><span class=\"line\">    *'bar' : ['a.js','b.js']</span><br><span class=\"line\">    */</span></span><br><span class=\"line\">    files.push(&#123;src: data, dest: grunt.config.process(target)&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果没找到合法的文件配置对象，那么返回空的文件数组</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (files.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    grunt.verbose.writeln(<span class=\"string\">'File: '</span> + <span class=\"string\">'[no files]'</span>.yellow);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 对需要扩展的文件对象进行扩展</span></span><br><span class=\"line\">  files = grunt.util._(files).chain().forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调整obj.src属性，使其成为一维数组</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果不存在src属性，则直接返回不需要进行任何操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj) || !obj.src) &#123; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果obj.src是数组则压缩成一维数组，否则直接转换为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(obj.src)) &#123;</span><br><span class=\"line\">      obj.src = grunt.util._.flatten(obj.src);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      obj.src = [obj.src];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在obj的基础上创建对象，移除不需要的属性，处理动态生成src到dest的映射</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> expandOptions = grunt.util._.extend(&#123;&#125;, obj);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> expandOptions.src;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> expandOptions.dest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 利用expand中的配置，扩展文件映射关系，并返回扩展后的file对象</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.expand) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> grunt.file.expandMapping(obj.src, obj.dest, expandOptions).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mapObj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将obj对象复制为result对象</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = grunt.util._.extend(&#123;&#125;, obj);</span><br><span class=\"line\">        <span class=\"comment\">// 将obj对象复制为result的orig属性</span></span><br><span class=\"line\">        result.orig = grunt.util._.extend(&#123;&#125;, obj);</span><br><span class=\"line\">        <span class=\"comment\">// 如果src或dest为模板，则解析为真正的路径</span></span><br><span class=\"line\">        result.src = grunt.config.process(mapObj.src);</span><br><span class=\"line\">        result.dest = grunt.config.process(mapObj.dest);</span><br><span class=\"line\">        <span class=\"comment\">// 移除不需要的属性</span></span><br><span class=\"line\">        [<span class=\"string\">'expand'</span>, <span class=\"string\">'cwd'</span>, <span class=\"string\">'flatten'</span>, <span class=\"string\">'rename'</span>, <span class=\"string\">'ext'</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prop</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> result[prop];</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 复制obj对象，并且向副本添加一个orig属性，属性的值也是obj对象的一个副本</span></span><br><span class=\"line\">    <span class=\"comment\">// 保存一个obj的副本orig是因为在后面可能会对result中的属性进行修改</span></span><br><span class=\"line\">    <span class=\"comment\">// orig使得result中可以访问到原始的file对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = grunt.util._.extend(&#123;&#125;, obj);</span><br><span class=\"line\">    result.orig = grunt.util._.extend(&#123;&#125;, obj);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> result) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果result对象中具有src属性，那么给src属性添加一个get方法，</span></span><br><span class=\"line\">      <span class=\"comment\">// 方法中对src根据expand进行扩展</span></span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.defineProperty(result, <span class=\"string\">'src'</span>, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> src;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!(<span class=\"string\">'result'</span> <span class=\"keyword\">in</span> fn)) &#123;</span><br><span class=\"line\">            src = obj.src;</span><br><span class=\"line\">            <span class=\"comment\">// 将src转换为数组</span></span><br><span class=\"line\">            src = <span class=\"built_in\">Array</span>.isArray(src) ? grunt.util._.flatten(src) : [src];</span><br><span class=\"line\">            <span class=\"comment\">// 根据expand参数扩展src属性，并把结果缓存在fn中</span></span><br><span class=\"line\">            fn.result = grunt.file.expand(expandOptions, src);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> fn.result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> result) &#123;</span><br><span class=\"line\">      result.dest = obj.dest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;).flatten().value();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果命令行带有--verbose参数，则在log中输出文件路径</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (grunt.option(<span class=\"string\">'verbose'</span>)) &#123;</span><br><span class=\"line\">    files.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> output = [];</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">'src'</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        output.push(obj.src.length &gt; <span class=\"number\">0</span> ? grunt.log.wordlist(obj.src) : <span class=\"string\">'[no src]'</span>.yellow);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">'dest'</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        output.push(<span class=\"string\">'-&gt; '</span> + (obj.dest ? <span class=\"built_in\">String</span>(obj.dest).cyan : <span class=\"string\">'[no dest]'</span>.yellow));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (output.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        grunt.verbose.writeln(<span class=\"string\">'Files: '</span> + output.join(<span class=\"string\">' '</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> files;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>grunt提供了多种格式来进行文件参数的配置，<code>normalizeMultiTaskFiles</code>方法会将相应target的配置转换为一个<code>files</code>数组，这个数组中存放的是每对文件的源地址和目的地址，该方法还负责对<code>expand</code>属性相关参数进行解析，最后生成多个源地址和目的地址对存在在<code>files</code>数组中。这个方法大大方便了grunt中关于文件的操作和配置。</p>\n<p>到这里 grunt 源码的解析就差不多了，更多的东西需要不断在实践中去理解，关于源码的详细注释请看 <a href=\"https://github.com/lakb248/grunt\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n"}