{"tags":[{"name":"angular","permalink":"/tags/angular/","url":"/async/tags/angular.json","count":1}],"categories":[],"url":"/async/posts/2015/03/10/some-angular-practice.json","date":1425969972000,"path":{"year":2015,"month":3,"day":10,"name":"some-angular-practice"},"title":"angularjs实践过程中的心得总结","permalink":"/2015/03/10/some-angular-practice/","content":"<p>利用寒假的时间给我家女神做了一个WebApp作为情人节礼物，一为表表忠心，二为练练手，在过程中也发现一些问题，在此总结总结。这里面除了angular方面的问题，还有一些单页面应用开发过程中的问题。<br><a id=\"more\"></a></p>\n<p>##加载优化<br>WebApp第一个版本完成之后兴高采烈的打开浏览器测试，结果Chrome的加载时间让我大跌眼镜，整整用了八秒钟的时间首页在显示出来，这明显是不可接受的。所以必须进行拆分加载。整个WebApp分为一个首页和三个功能模块，所以很自然把三个模块拆分出来，优先加载首页，在点击导航的时候再依次加载对应模块代码。<br>功能模块的延迟加载实际上就是与功能有关的控制器，服务和路由的延迟加载，所以在拆分加载中遇到的问题就是来自这些方面。首先常用的<code>module.controller</code>的controller定义方式无法满足App启动之后的controller动态定义，也就是说如果在angular启动了App之后再使用<code>module.controller</code>的方式定义controller是无效的，仍然会报controller undefined的错误。这时候就需要使用<code>$controllerProvider</code>的<code>register</code>方法来动态定义controller。功能模块的异步加载自然而然想到了<code>requirejs</code>,具体实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> meng = angular.module(<span class=\"string\">'meng'</span>,[<span class=\"string\">'ionic'</span>,<span class=\"string\">'ngRoute'</span>]) ;</div><div class=\"line\"><span class=\"comment\">//异步加载功能模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> resolveController = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">names</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">     loadController : [<span class=\"string\">'$q'</span>,<span class=\"string\">'$rootScope'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$q,$rootScope</span>)</span>&#123;</div><div class=\"line\">         <span class=\"keyword\">var</span> defer = $q.defer() ;</div><div class=\"line\">         <span class=\"built_in\">require</span>(names,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">             defer.resolve() ;</div><div class=\"line\">             $rootScope.$apply() ;</div><div class=\"line\">         &#125;) ;</div><div class=\"line\">         <span class=\"keyword\">return</span> defer.promise ;</div><div class=\"line\">     &#125;]</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125; ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//route config</span></div><div class=\"line\">meng.config(</div><div class=\"line\">  [<span class=\"string\">'$routeProvider'</span>,<span class=\"string\">'$controllerProvider'</span>,<span class=\"string\">'$provide'</span>,<span class=\"string\">'$compileProvider'</span>,</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$routeProvider,$controllerProvider,$provide,$compileProvider</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  meng.register = &#123;</div><div class=\"line\">      controller: $controllerProvider.register,</div><div class=\"line\">      factory: $provide.factory,</div><div class=\"line\">      directive: $compileProvider.directive</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  $provide.decorator(<span class=\"string\">'$route'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$delegate</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> $route = $delegate ;</div><div class=\"line\">      $route.when = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> path, route </span>) </span>&#123;</div><div class=\"line\">          $routeProvider.when( path, route );</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span> ;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      <span class=\"keyword\">return</span> $route ;</div><div class=\"line\">  &#125;) ;</div><div class=\"line\"></div><div class=\"line\">  $routeProvider</div><div class=\"line\">      .when(<span class=\"string\">'/'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/main.html'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/info'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/info.html'</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/task'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/task/task.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'taskController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'TaskModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/wallet'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/wallet/wallet.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'walletController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'WalletModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .when(<span class=\"string\">'/note'</span>,&#123;</div><div class=\"line\">          templateUrl : <span class=\"string\">'views/note/note_list.html'</span>,</div><div class=\"line\">          controller : <span class=\"string\">'noteController'</span>,</div><div class=\"line\">          resolve : resolveController([<span class=\"string\">'NoteModule'</span>])</div><div class=\"line\">      &#125;)</div><div class=\"line\">      .otherwise(<span class=\"string\">'/'</span>);</div><div class=\"line\">&#125;]) ;</div></pre></td></tr></table></figure></p>\n<p>上面的实现的关键就是<code>resolveController</code>方法，它在路由过程中利用require方法去加载功能对应的模块代码，在代码加载完成后进行路由跳转。上面省略了require的配置部分，<code>TaskModule</code>，<code>WalletModule</code>，<code>NoteModule</code>分别对于task.js，wallet.js和note.js三个文件。<br>上面代码中还解决了延迟加载中的另一个问题，angular中路由配置是通过<code>$routeProvider</code>完成的，但是这个服务在config的时候才能获取，在App启动之后是无法获取进行路由配置的，而<code>$route</code>对象是随时都可以获取的，所以这里在config过程中对利用angular提供的装饰方法对<code>$route</code>进行了扩展，增加了一个when方法指向<code>$routeProvider</code>的<code>when</code>方法，这样就可以在其他地方对路由进行配置。<br>通过上面的方法进行加载拆分有一个问题，它并没有很好的利用angular中模块化的特性，为了延迟加载功能不得不把原来分为三个module的代码都合并到一个module中，这样破坏了模块的独立性，如何在angular的module上进行延迟加载我还在寻找方法。</p>\n<p>##数据缓存<br>高响应是单页面应用的一大优势，这是因为单页面应用会尽可能少的刷新页面。除了通过减少刷新来提高响应以外，减少不必要的数据交互也是一个关键。而为了减少不必要的数据交互，对数据进行缓存是很有必要的。在首次请求数据返回之后，将数据缓存下来，在下一次请求数据是先在缓存中查找，如果没有再去请求服务器数据，在这个过程中我们必须要保证缓存的数据与服务器数据保持同步，所以在进行增删改的时候需要同时对本地和服务器的数据进行增删改。而我在开发过程中把这部分功能实现放在Model中，这样向上隐藏内部的数据层实现。在数据缓存这方面大家如果有更好的办法，欢迎交流。</p>\n<p>##离线存储<br>HTML5中的ApplicationCache离线存储是一个很好的提高App加载速度的途径，但是它也会给开发过程中带来一些不便，经常出现更新资源但是没有更新manifest文件带来的失误，而且希望更新生效需要进行两次页面刷新，这是比较不方便的。所以这个东西好用确实好用，只是加入离线存储应该放在开发过程的最后，在完成功能实现的前提下再把ApplicationCache加上去，这样可以避免它给开发过程中带来的不便。</p>\n<p>##小结<br>上面所说的三个问题只是目前遇到的主要的三个问题，App还在改进中。对于angular的使用还不够熟练，对于单页面中的组织结构划分和模块化的理解还不够透彻，除了上面所说的问题以外还有几个问题有待继续钻研，比如如何更高效的处理数据缓存，移动设备上点击的击穿现象，还有CSS动画的问题，总之就是多动手多思考少吃零食多睡觉。<br>PS:做了这个App之后发现自己真是不适合做设计，改了又改界面才勉强达到我家女神的要求，再接再厉吧。</p>\n"}