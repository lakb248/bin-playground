{"tags":[{"name":"javascript","permalink":"http://bin-playground.top/blog/tags/javascript/","url":"\\async\\tags\\javascript.json","count":2}],"categories":[],"url":"\\async\\posts\\2015\\03\\14\\why-prototype-important.json","date":1426296847000,"path":{"year":2015,"month":3,"day":14,"name":"why-prototype-important"},"title":"[译] 为什么原型继承很重要","permalink":"http://bin-playground.top/blog/2015/03/14/why-prototype-important/","content":"<p>五天之前我写了一个关于ES6标准中Class的<a href=\"http://aaditmshah.github.io/standardizing-harmony-classes\" target=\"_blank\" rel=\"external\">文章</a>。在里面我介绍了如何用现有的Javascript来模拟类并且介绍了ES6中类的用法，其实它只是一个语法糖。感谢<a href=\"http://geekyogi.tumblr.com/\" target=\"_blank\" rel=\"external\">Om Shakar</a>以及<a href=\"http://rlemon.github.io/so-chat-javascript-rules/\" target=\"_blank\" rel=\"external\">Javascript Room</a>中的各位，我的编程风格从那时候开始发生了改变；就像<a href=\"http://www.crockford.com/\" target=\"_blank\" rel=\"external\">Dougla Crockford</a>2006年做的一样，我也学习了很多来完全理解基于原型的编程方式。<br><a id=\"more\"></a></p>\n<p>Javascript是一个多样化的编程语言。它拥有面向对象和函数式的编程特点，你可以使用任何一种风格来编写代码。然而这两个编程风格并不能很好的融合。例如，你不无法同时使用<code>new</code>(典型的面向对象的特点)和<code>apply</code>(函数式编程的特点).原型继承一直都作为连接这两种风格的桥梁。</p>\n<h2 id=\"基于类继承的问题\"><a href=\"#基于类继承的问题\" class=\"headerlink\" title=\"基于类继承的问题\"></a>基于类继承的问题</h2><p>大部分Javascript程序员会告诉你基于类的继承不好。然而它们中只有很少一部分知道其中的原因。事实实际上是基于类的基础并没有什么不好。Python是基于类继承的，并且它是一门很好的编程语言。但是，基于类的继承并不适合用于Javascript。Python正确的使用了类，它们只有简单的工厂方法不能当成构造函数使用。而在Javascript中任何函数都可以被当成构造函数使用。</p>\n<p>Javascript中的问题是由于每个函数都可以被当成构造函数使用，所以我们需要区分普通的函数调用和构造函数调用；我们一般使用<code>new</code>关键字来进行区别。然而，这样就破坏了Javascript中的函数式特点，因为<code>new</code>是一个关键字而不是函数。因而函数式的特点无法和对象实例化一起使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">firstname,lastname</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.firstname = firstname ;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.lastname = lastname ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>考虑上面这段程序。你可以通过<code>new</code>关键字来调用<code>Person</code>方法来创建一个函数<code>Person</code>的实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person(<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>) ;</span><br></pre></td></tr></table></figure>\n<p>然而，没有任何办法来使用<code>apply</code>方法来为构造函数指定参数列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> author = <span class=\"keyword\">new</span> Person.apply(<span class=\"literal\">null</span>,[<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>]);<span class=\"comment\">//error</span></span><br></pre></td></tr></table></figure>\n<p>但是，如果<code>new</code>是一个方法那么上面的需求就可以通过下面这种方式实现了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> author = Person.new.apply(Person,[<span class=\"string\">'Aadit'</span>,<span class=\"string\">'Shah'</span>]) ;</span><br></pre></td></tr></table></figure>\n<p>幸运的是，因为Javascript有原型继承，所以我们可以实现一个<code>new</code>的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.new = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functor</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">constructor</span>.apply(this, args); &#125;</span><br><span class=\"line\">    var args = Array.prototype.slice.call(arguments);</span><br><span class=\"line\">    functor.prototype = this.prototype;</span><br><span class=\"line\">    var <span class=\"keyword\">constructor</span> = this;</span><br><span class=\"line\">    return new functor;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在像Java这样对象只能通过<code>new</code>关键字来实例化的语言中，上面这种方式是不可能实现的。</p>\n<p>下面这张表列出了原型继承相比于基于类的基础的优点：</p>\n<table>\n<thead>\n<tr>\n<th>基于类的继承</th>\n<th>原型继承</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类是不可变的。在运行时，你无法修改或者添加新的方法</td>\n<td>原型是灵活的。它们可以是不可变的也可以是可变的</td>\n</tr>\n<tr>\n<td>类可能会不支持多重继承</td>\n<td>对象可以继承多个原型对象</td>\n</tr>\n<tr>\n<td>基于类的继承比较复杂。你需要使用抽象类，接口和final类等等</td>\n<td>原型继承比较简洁。你只有对象，你只需要对对象进行扩展就可以了</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"不要再使用关键词new了\"><a href=\"#不要再使用关键词new了\" class=\"headerlink\" title=\"不要再使用关键词new了\"></a>不要再使用关键词new了</h2><p>到现在你应该知道为什么我觉得<code>new</code>关键字是不会的了吧—你不能把它和函数式特点混合使用。然后，这并不代表你应该停止使用它。<code>new</code>关键字有合理的用处。但是我仍然建议你不要再使用它了。<code>new</code>关键字掩盖了Javascript中真正的原型继承，使得它更像是基于类的继承。就像<a href=\"http://stackoverflow.com/users/419970/raynos\" target=\"_blank\" rel=\"external\">Raynos</a>说的:</p>\n<blockquote>\n<p><code>new</code>是Javascript在为了获得流行度而加入与Java类似的语法时期留下来的一个残留物</p>\n</blockquote>\n<p>Javascript是一个源于<a href=\"http://www.selflanguage.org/\" target=\"_blank\" rel=\"external\">Self</a>的基于原型的语言。然而，为了市场需求，Brendan Eich把它当成Java的小兄弟推出：</p>\n<blockquote>\n<p>并且我们当时把Javascript当成Java的一个小兄弟，就像在微软语言家庭中Visual Basic相对于C++一样。</p>\n</blockquote>\n<p>这个设计决策导致了<code>new</code>的问题。当人们看到Javascript中的<code>new</code>关键字，他们就想到类，然后当他们使用继承时就遇到了傻了。就像Douglas Crockford说的：</p>\n<blockquote>\n<p>这个间接的行为是为了使传统的程序员对这门语言更熟悉，但是却失败了，就像我们看到的很少Java程序员选择了Javascript。Javascript的构造模式并没有吸引传统的人群。它也掩盖了Javascript基于原型的本质。结果就是，很少的程序员知道如何高效的使用这门语言</p>\n</blockquote>\n<p>因此我建议停止使用<code>new</code>关键字。Javascript在传统面向对象假象下面有着更加强大的原型系统。然大部分程序员并没有看见这些还处于黑暗中。</p>\n<h2 id=\"理解原型继承\"><a href=\"#理解原型继承\" class=\"headerlink\" title=\"理解原型继承\"></a>理解原型继承</h2><p>原型继承很简单。在基于原型的语言中你只有对象。没有类。有两种方式来创建一个新对象—“无中生有”对象创建法或者通过现有对象创建。在Javascript中<code>Object.create</code>方法用来创建新的对象。新的对象之后会通过新的属性进行扩展。</p>\n<h3 id=\"“无中生有”对象创建法\"><a href=\"#“无中生有”对象创建法\" class=\"headerlink\" title=\"“无中生有”对象创建法\"></a>“无中生有”对象创建法</h3><p>Javascript中的<code>Object.create</code>方法用来从0开始创建一个对象，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) ;</span><br></pre></td></tr></table></figure>\n<p>上面例子中新创建的<code>object</code>没有任何属性。</p>\n<h3 id=\"克隆一个现有的对象\"><a href=\"#克隆一个现有的对象\" class=\"headerlink\" title=\"克隆一个现有的对象\"></a>克隆一个现有的对象</h3><p><code>Object.create</code>方法也可以克隆一个现有的对象，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</span><br><span class=\"line\">    area : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"built_in\">Object</span>.create(rectangle) ;</span><br></pre></td></tr></table></figure>\n<p>上面例子中<code>rect</code>从<code>rectangle</code>中继承了<code>area</code>方法。同时注意到<code>rectangle</code>是一个对象字面量。对象字面量是一个简洁的方法用来创建一个<code>Object.prototype</code>的克隆然后用新的属性来扩展它。它等价于:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rectangle = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">Object</span>.prototype) ;</span><br><span class=\"line\">rectangle.area = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展一个新创建的对象\"><a href=\"#扩展一个新创建的对象\" class=\"headerlink\" title=\"扩展一个新创建的对象\"></a>扩展一个新创建的对象</h3><p>上面的例子中我们克隆了<code>rectangle</code>对象命名为<code>rect</code>，但是在我们使用<code>rect</code>的<code>area</code>方法之前我们需要扩展它的<code>width</code>和<code>height</code>属性，像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rect.width = <span class=\"number\">5</span> ;</span><br><span class=\"line\">rect.height = <span class=\"number\">10</span> ;</span><br><span class=\"line\">alert(rect.area()) ;</span><br></pre></td></tr></table></figure>\n<p>然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个<code>rectangle</code>对象的克隆上手动定义<code>width</code>和<code>height</code>属性。如果有一个方法能够为我们来完成这些工作就很好了。是不是听起来有点熟悉？确实是。我要来说说构造函数。我们把这个函数叫做<code>create</code>然后在<code>rectangle</code>对象上定义它:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</span><br><span class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">width,height</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</span><br><span class=\"line\">        self.height = height ;</span><br><span class=\"line\">        self.width = width ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self ;</span><br><span class=\"line\">    &#125; ,</span><br><span class=\"line\">    area : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rect = rectangle.create(<span class=\"number\">5</span>,<span class=\"number\">10</span>) ;</span><br><span class=\"line\">alert(rect.area()) ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"构造函数-VS-原型\"><a href=\"#构造函数-VS-原型\" class=\"headerlink\" title=\"构造函数 VS 原型\"></a>构造函数 VS 原型</h3><p>等等。这看起来很像Javascript中的正常构造模式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rectangle</span>(<span class=\"params\">width, height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">Rectangle.prototype.area = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rect = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">5</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(rect.area());</span><br></pre></td></tr></table></figure>\n<p>是的，确实很像。为了使得Javascript看起来更像Java原型模式被迫屈服于构造模式。因此每个Javascript中的函数都有一个<code>prototype</code>对象然后可以用来作为构造器(这里构造器的意思应该是说新的对象是在<code>prototype</code>对象的基础上进行构造的)。<code>new</code>关键字允许我们把函数当做构造函数使用。它会克隆构造函数的<code>prototype</code>属性然后把它绑定到<code>this</code>对象中，如果没有显式返回对象则会返回<code>this</code>。</p>\n<p>原型模式和构造模式都是平等的。因此你也许会怀疑为什么有人会困扰于是否应该使用原型模式而不是构造模式。毕竟构造模式比原型模式更加简洁。但是原型模式相比构造模式有许多优势。具体如下：</p>\n<table>\n<thead>\n<tr>\n<th>构造模式</th>\n<th>原型模式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>函数式特点无法与<code>new</code>关键字一起使用</td>\n<td>函数式特点可以与<code>create</code>结合使用</td>\n</tr>\n<tr>\n<td>忘记使用<code>new</code>会导致无法预期的bug并且会污染全局变量</td>\n<td>由于<code>create</code>是一个函数，所以程序总是会按照预期工作</td>\n</tr>\n<tr>\n<td>使用构造函数的原型继承比较复杂并且混乱</td>\n<td>使用原型的原型继承简洁易懂</td>\n</tr>\n</tbody>\n</table>\n<p>最后一点可能需要解释一下。使用构造函数的原型继承相比使用原型的原型继承更加复杂，我们先看看使用原型的原型继承:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"built_in\">Object</span>.create(rectangle);</span><br><span class=\"line\">square.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">side</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>, side, side);</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</span><br><span class=\"line\">alert(sq.area()) ;</span><br></pre></td></tr></table></figure>\n<p>上面的代码很容易理解。首先我们创建一个<code>rectangle</code>的克隆然后命名为<code>square</code>。接着我们用新的<code>create</code>方法重写<code>square</code>对象的<code>create</code>方法。最终我们从新的<code>create</code>方法中调用<code>rectangle</code>的<code>create</code>函数并且返回对象。相反的，使用构造函数的原型继承像下面这样:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Square</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    Rectangle.call(<span class=\"keyword\">this</span>,side,side) ;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\">Square.prototype = <span class=\"built_in\">Object</span>.create(Rectangle.prototype) ;</span><br><span class=\"line\"></span><br><span class=\"line\">Square.prototype.constructor = Square ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sq = <span class=\"keyword\">new</span> Square(<span class=\"number\">5</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(sq.area()) ;</span><br></pre></td></tr></table></figure>\n<p>当然，构造函数的方式更简单。然后这样的话，向一个不了解情况的人解释原型继承就变得非常困难。如果想一个了解类继承的人解释则会更加困难。</p>\n<p>当使用原型模式时一个对象继承自另一个对象就变得很明显。当使用方法构造模式时就没有这么明显，因为你需要根据其他构造函数来考虑构造继承。</p>\n<h3 id=\"对象创建和扩展相结合\"><a href=\"#对象创建和扩展相结合\" class=\"headerlink\" title=\"对象创建和扩展相结合\"></a>对象创建和扩展相结合</h3><p>在上面的例子中我们创建一个<code>rectangle</code>的克隆然后命名为<code>square</code>。然后我们利用新的<code>create</code>属性扩展它，重写继承自<code>rectangle</code>对象的<code>create</code>方法。如果把这两个操作合并成一个就很好了，就像对象字面量是用来创建<code>Object.prototype</code>的克隆然后用新的属性扩展它。这个操作叫做<code>extend</code>，可以像下面这样实现:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">extension</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property) ||</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> obejct[property] === <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">            <span class=\"comment\">//这段代码有问题，按照文章意思，这里应该使用深复制，而不是简单的浅复制,deepClone(extension[property],object[property]),deepClone的实现可以看我之前关于继承的博客</span></span><br><span class=\"line\">            object[properyty] = extension[property] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object ;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>译者注：我觉得博主这里的实现有点不符合逻辑，正常<code>extend</code>的实现应该是可以配置当被扩展对象和用来扩展的对象属性重复时是否覆盖原有属性，而博主的实现就只是简单的覆盖。同时博主的实现在<code>if</code>判断中的做法个人觉得是值得学习的，首先判断<code>extension</code>属性是否是对象自身的，如果是就直接复制到<code>object</code>上，否则再判断<code>object</code>上是否有这个属性，如果没有那么也会把属性复制到<code>object</code>上，这种实现的结果就使得被扩展的对象不仅仅只扩展了<code>extension</code>中的属性，还包括了<code>extension</code>原型中的属性。不难理解，<code>extension</code>原型中的属性会在<code>extension</code>中表现出来，所以它们也应该作为<code>extension</code>所具有的特性而被用来扩展<code>object</code>。所以我对这个方法进行了改写:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">extension,override</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property) ||</span><br><span class=\"line\">            <span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(object[property] !== <span class=\"string\">'undefined'</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(override)&#123;</span><br><span class=\"line\">                    deepClone(extension[property],object[property]) ;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                deepClone(extension[property],object[property]) ;</span><br><span class=\"line\">            &#125;    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>利用上面的<code>extend</code>方法，我们可以重写<code>square</code>的代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(&#123;</span><br><span class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;) ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</span><br><span class=\"line\">alert(sq.area()) ;</span><br></pre></td></tr></table></figure>\n<p><code>extend</code>方法是原型继承中唯一需要的操作。它是<code>Object.create</code>函数的超集，因此它可以用在对象的创建和扩展上。因此我们可以用<code>extend</code>来重写<code>rectangle</code>，使得<code>create</code>函数更加结构化看起来就像<a href=\"http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html\" target=\"_blank\" rel=\"external\">模块模式</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> rectangle = &#123;</span><br><span class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">width,height</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.extend(&#123;</span><br><span class=\"line\">            height : height ,</span><br><span class=\"line\">            width : width</span><br><span class=\"line\">        &#125;) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> rect = rectangle.create(<span class=\"number\">5</span>,<span class=\"number\">10</span>) ;</span><br><span class=\"line\">alert(rect.area()) ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型继承的两种方法\"><a href=\"#原型继承的两种方法\" class=\"headerlink\" title=\"原型继承的两种方法\"></a>原型继承的两种方法</h3><p>一些人可能已经注意到<code>extend</code>函数返回的对象实际上是继承了两个对象的属性，一个是被扩展的对象，另一个是用来扩展的对象。另外从两个对象继承属性的方式也不一样。第一种情况下是通过委派来继承属性(也就是使用<code>Object.create()</code>来继承属性)，第二种情况下使用合并属性的方式来继承属性。</p>\n<h4 id=\"委派-差异化继承\"><a href=\"#委派-差异化继承\" class=\"headerlink\" title=\"委派(差异化继承)\"></a>委派(差异化继承)</h4><p>很多Javascript程序员对于差别继承比较熟悉。维基百科是这么解释的:</p>\n<blockquote>\n<p>大部分对象是从其他更一般的对象中得到的，只是在一些很小的地方进行了修改。每个对象通常在内部维护一个指向其他对象的引用列表，这些对象就是该对象本身进行差异化继承的对象。</p>\n</blockquote>\n<p>Javascript中的原型继承是基于差异化继承的。每个对象都有个内部指针叫做<code>[[proto]]</code> (在大部分浏览器中可以通过<code>\\__proto\\__</code>属性访问)，这个指针指向对象的原型。多个对象之间通过内部<code>[[proto]]</code>属性链接起来形成了原型链，链的最后指向<code>null</code>。</p>\n<p>当你试图获取一个对象的属性时Javascript引擎会首先查找对象自身的属性。如果在对象上没找到该属性，那么它就会去对象的原型中去查找。以此类推，它会沿着原型链一直查找知道找到或者到原型链的末尾。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">object,property</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"built_in\">Object</span>.hasOwnProperty.call(object,property))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> prototype = <span class=\"built_in\">Object</span>.getPrototypeOf(object) ;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prototype) <span class=\"keyword\">return</span> get(prototype,property) ;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object[property] ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<p>Javascript中属性查找的过程就像上面的程序那样。</p>\n<h4 id=\"克隆-合并式继承\"><a href=\"#克隆-合并式继承\" class=\"headerlink\" title=\"克隆(合并式继承)\"></a>克隆(合并式继承)</h4><p>大多数Javascript程序员会觉得复制一个对象的属性到另一个对象上并不是一个正确的继承的方式，因为任何对原始对象的修改都不会反映在克隆的对象上。五天前我会同意这个观点。然而现在我相信合并式继承是原型继承的一种正确方式。对于原始对象的修改可以发送到它的副本来实现真正的原型继承。</p>\n<p>合并式继承和代理有他们的优点和缺点。下表列出了它们的优缺点:</p>\n<table>\n<thead>\n<tr>\n<th>代理</th>\n<th>合并</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>任何对于原型的修改都会反映在所有副本上</td>\n<td>任何对于原型的修改都需要手动更新到副本中</td>\n</tr>\n<tr>\n<td>属性查找效率较低因为需要进行原型链查找</td>\n<td>属性查找更搞笑因为继承的属性是通过复制的方式附加在对象本身的</td>\n</tr>\n<tr>\n<td>使用<code>Object.create()</code>方法只能继承单一对象</td>\n<td>对象可以从任意数量的对象中通过复制继承属性</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"从多个原型继承\"><a href=\"#从多个原型继承\" class=\"headerlink\" title=\"从多个原型继承\"></a>从多个原型继承</h3><p>上表中最后一点告诉我们对象可以通过合并的方式从多个原型中继承属性。这是一个重要的特点因为这证明原型继承比Java中的类继承更强大并且与C++中的类继承一样强大。为了实现多重继承，你只需要修改<code>extend</code>方法来从多个原型中复制属性。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = length ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> extension = <span class=\"built_in\">arguments</span>[length - (index--)] ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hasOwnProperty.call(extension,property)||</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//这里同样应该使用深复制</span></span><br><span class=\"line\">                object[property] = extension[property] ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<p>多重继承是非常有用的因为它提高了代码的可重用性和模块化。对象通过委派继承一个原型对象然后通过合并继承其他属性。比如说你有一个事件发射器的原型，像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> eventEmitter = &#123;</span><br><span class=\"line\">    on : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,listener</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[event] !== <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>[event].push(listener) ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>[event] = [listener] ;</span><br><span class=\"line\">    &#125; ,</span><br><span class=\"line\">    emit : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span>[event] !== <span class=\"string\">'undefined'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> listeners = <span class=\"keyword\">this</span>[event] ;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length,index = length ;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> listener = listeners[length - (index--)] ;</span><br><span class=\"line\">                listener.apply(<span class=\"keyword\">this</span>,args) ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<p>现在你希望<code>square</code>表现得像一个事件发射器。因为<code>square</code>已经通过委派的方式继承了<code>rectangle</code>，所以它必须通过合并的方式继承<code>eventEmitter</code>。这个修改可以很容易地通过使用<code>extend</code>方法实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(eventEmitter,&#123;</span><br><span class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</span><br><span class=\"line\">    &#125; ,</span><br><span class=\"line\">    resize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newSize</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'resize'</span>,oldSize,newSize) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;) ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</span><br><span class=\"line\">sq.on(<span class=\"string\">'resize'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldSize,newSize</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'sq resized from '</span> + oldSize + <span class=\"string\">'to'</span> + newSize + <span class=\"string\">'.'</span>) ;</span><br><span class=\"line\">&#125;) ;</span><br><span class=\"line\"></span><br><span class=\"line\">sq.resize(<span class=\"number\">10</span>) ;</span><br><span class=\"line\">alert(sq.area()) ;</span><br></pre></td></tr></table></figure>\n<p>在Java中是不可能实现上面的程序的，因为它不支持多重继承。相应的你必须另外再创建一个<code>EventEmitter</code>类或者使用一个<code>EventEmitter</code>接口并且在每个实现该接口的类中分别实现<code>on</code>和<code>emit</code>方法。当然你在C++中不需要面对这个问题。我们都知道Java sucks(呵呵呵)。</p>\n<h3 id=\"Mixin的蓝图-Buleprint\"><a href=\"#Mixin的蓝图-Buleprint\" class=\"headerlink\" title=\"Mixin的蓝图(Buleprint)\"></a>Mixin的蓝图(Buleprint)</h3><p>在上面的例子中你肯定注意到<code>eventEmitter</code>原型并没有一个<code>create</code>方法。这是因为你不应该直接创建一个<code>eventEmitter</code>对象。相反<code>eventEmitter</code>是用来作为其他原型的原型。这类原型称为mixin。它们等价于抽象类。mixin用来通过提供一系列可重用的方法来扩展对象的功能。</p>\n<p>然而有时候mixin需要私有的状态。例如<code>eventEmitter</code>如果能够把它的事件监听者列表放在私有变量中而不是放在<code>this</code>对象上会安全得多。但是mixin没有<code>create</code>方法来封装私有状态。因此我们需要为mixin创建一个蓝图(blueprint)来创建闭包。蓝图(blueprint)看起来会像是构造函数但是它们并不用像构造函数那样使用。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eventEmitter</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> evnets = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event,listener</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">            events[event].push(listener) ;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            events[event] = [listener] ;</span><br><span class=\"line\">    &#125; ;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">'undefined'</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> listeners = events[event] ;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length ,index = length ;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>) ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; ;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<p>一个蓝图用来在一个对象创建之后通过合并来扩展它(我觉得有点像装饰者模式)。<a href=\"http://ericleads.com/\" target=\"_blank\" rel=\"external\">Eric Elliot</a>把它们叫做<a href=\"http://ericleads.com/2013/02/fluent-javascript-three-different-kinds-of-prototypal-oo/\" target=\"_blank\" rel=\"external\">闭包原型</a>。我们可以使用蓝图版本的<code>eventEmitter</code>来重写<code>square</code>的代码，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(&#123;</span><br><span class=\"line\">    create : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">side</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = rectangle.create.call(<span class=\"keyword\">this</span>,side,side) ;</span><br><span class=\"line\">        eventEmitter.call(self) ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self ;</span><br><span class=\"line\">    &#125; ,</span><br><span class=\"line\">    resize : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newSize</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'resize'</span>,oldSize,newSize) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;) ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">sq.on(<span class=\"string\">'resize'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">oldSize,newSize</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'sq resized from '</span> + oldSize + <span class=\"string\">'to'</span> + newSize + <span class=\"string\">'.'</span>) ;</span><br><span class=\"line\">&#125;) ;</span><br><span class=\"line\"></span><br><span class=\"line\">sq.resize(<span class=\"number\">10</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(sq.area()) ;</span><br></pre></td></tr></table></figure>\n<p>蓝图在Javascript中是独一无二的。它是一个很强大的特性。然而它们也有自己的缺点。下表列出了mixin和蓝图的优缺点：</p>\n<table>\n<thead>\n<tr>\n<th>Mixin</th>\n<th>蓝图</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>它们用来扩展对象的原型。因此对象共享同一个原型</td>\n<td>它们用来扩展新创建的对象。因此每个对象都是在自己对象本身进行修改</td>\n</tr>\n<tr>\n<td>因为缺少封装方法所以不存在私有状态</td>\n<td>它们是函数，所以可以封装私有状态</td>\n</tr>\n<tr>\n<td>它们是静态原型并且不能被自定义</td>\n<td>它们可以传递参数来自定义对象，可以向蓝图函数传递一些用来自定义的参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"修复instanceof操作\"><a href=\"#修复instanceof操作\" class=\"headerlink\" title=\"修复instanceof操作\"></a>修复instanceof操作</h3><p>许多Javascript程序员会觉得使用原型模式来继承违背了语言的精髓。他们更偏向于构造模式因为他们觉得通过构造函数创建的对象才是真正的实例，因为<code>instanceof</code>操作会返回<code>true</code>。然而，这个争论是没有意义的，因为<code>instanceof</code>操作可以像下面这样实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.instanceof = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"keyword\">this</span> ;</span><br><span class=\"line\">\t<span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(object === prototype) <span class=\"keyword\">return</span> <span class=\"literal\">true</span> ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.getPrototypeOf(object) ;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">while</span>(object) ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个<code>instanceof</code>方法现在可以被用来测试一个对象是否是通过委派从一个原型继承的。例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sq.instanceof(square) ;</span><br></pre></td></tr></table></figure>\n<p>然而还是没有办法判断一个对象是否是通过合并的方式从一个原型继承的，因为实例的关联信息丢失了。为了解决这个问题我们将一个原型的所有克隆的引用保存在原型自身中，然后使用这个信息来判断一个对象是否是一个原型的实例。这个可以通过修改<code>extend</code>方法来实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.extend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty ;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.create(<span class=\"keyword\">this</span>) ;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.lenght ;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> index = length ;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(index)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> extension = <span class=\"built_in\">arguments</span>[length - (index--)] ;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> extension)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(property !== <span class=\"string\">'clones'</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\thasOwnProperty.call(extension,property) ||</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">typeof</span> object[property] === <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">\t\t\t\tobject[property] = extension[property] ;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(hasOwnProperty.call(extension,<span class=\"string\">'clones'</span>)&#125;)</span><br><span class=\"line\">\t\t\textension.clones.unshift(object) ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\textension.clones = [object] ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<p>通过合并继承自原型的对象形成了一个克隆树，这些树从根对象开始然后向下一直到叶子对象。一个克隆链是一个从根对象到叶子对象的单一路径，这跟遍历原型链很相似。我们可以使用这个信息来判断一个对象是否是通过合并继承自一个原型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.instanceof = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(prototype, <span class=\"string\">\"clones\"</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> clones = prototype.clones;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> object = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (object === prototype ||</span><br><span class=\"line\">\t\t\tclones &amp;&amp; clones.indexOf(object) &gt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> object = <span class=\"built_in\">Object</span>.getPrototypeOf(o  bject);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">while</span> (object);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125; ;</span><br></pre></td></tr></table></figure>\n<p>这个<code>instanceof</code>方法现在可以用来判断一个对象是否是通过合并继承自一个原型。例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sq.instanceof(eventEmitter);</span><br></pre></td></tr></table></figure>\n<p>在上面的程序中<code>instanceof</code>会返回<code>true</code>如果我妈使用mixin版本的<code>eventEmitter</code>。然而如果我们使用蓝图版本的<code>eventEmitter</code>它会返回<code>false</code>。为了解决这个问题我创建了一个蓝图函数，这个函数接收一个蓝图作为参数，向它添加一个<code>clones</code>属性然后返回一个记录了它的克隆的新蓝图：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blueprint</span>(<span class=\"params\">f</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\tf.apply(<span class=\"keyword\">this</span>,<span class=\"built_in\">arguments</span>) ;</span><br><span class=\"line\">\t\tg.clones.unshift(<span class=\"keyword\">this</span>) ;</span><br><span class=\"line\">\t&#125; ;</span><br><span class=\"line\">\tg.clones = [] ;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> g ;</span><br><span class=\"line\">&#125; ;</span><br><span class=\"line\"><span class=\"keyword\">var</span> eventEmitter = blueprint(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> events = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, listener</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">\"undefined\"</span>)</span><br><span class=\"line\">            events[event].push(listener);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> events[event] = [listener];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.emit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> events[event] !== <span class=\"string\">\"undefined\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> listeners = events[event];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> length = listeners.length, index = length;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (index) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> listener = listeners[length - (index--)];</span><br><span class=\"line\">                listener.apply(<span class=\"keyword\">this</span>, args);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;) ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"向原型发送变化\"><a href=\"#向原型发送变化\" class=\"headerlink\" title=\"向原型发送变化\"></a>向原型发送变化</h3><p>上面例子中的<code>clones</code>属性有双重作用。它可以用来判断一个对象是否是通过合并继承自一个原型的，然后他可以用来发送原型改变给所有它的克隆。原型继承相比类继承最大的优势就是你可以修改一个原型在它创建之后。为了使克隆可以继承对于原型的修改，我们创建了一个叫做<code>define</code>的函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.define = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">property, value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>[property] = value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.hasOwnProperty.call(<span class=\"keyword\">this</span>, <span class=\"string\">\"clones\"</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> clones = <span class=\"keyword\">this</span>.clones;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> length = clones.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clone = clones[--length];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> clone[property] === <span class=\"string\">\"undefined\"</span>)</span><br><span class=\"line\">                clone.define(property, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以修改原型然后这个修改会反映在所有的克隆上。例如我们可以创建创建一个别名<code>addEventListener</code>针对<code>eventEmitter</code>上的<code>on</code>方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> square = rectangle.extend(eventEmitter, &#123;</span><br><span class=\"line\">    create: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">side</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rectangle.create.call(<span class=\"keyword\">this</span>, side, side);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newSize</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldSize = <span class=\"keyword\">this</span>.width;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = <span class=\"keyword\">this</span>.height = newSize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">\"resize\"</span>, oldSize, newSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sq = square.create(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">eventEmitter.define(<span class=\"string\">\"addEventListener\"</span>, eventEmitter.on);</span><br><span class=\"line\"></span><br><span class=\"line\">sq.addEventListener(<span class=\"string\">\"resize\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oldSize, newSize</span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"sq resized from \"</span> + oldSize + <span class=\"string\">\" to \"</span> + newSize + <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">sq.resize(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">alert(sq.area());</span><br></pre></td></tr></table></figure>\n<p>蓝图需要特别注意。尽管对于蓝图的修改会被发送到它的克隆，但是蓝图的新的克隆并不会反映这些修改。幸运的是这个问题的解决方法很简单。我们只需要对<code>blueprint</code>方法进行小小的修改，然后任何对于蓝图的修改就会反映在克隆上了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blueprint</span>(<span class=\"params\">f</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> g = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        f.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">        g.clones.unshift(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> hasOwnProperty = <span class=\"built_in\">Object</span>.hasOwnProperty;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> g)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (property !== <span class=\"string\">\"clones\"</span> &amp;&amp; hasOwnProperty.call(g, property))</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>[property] = g[property];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    g.clones = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>恭喜你。如果你读完了整篇文章并且理解了我所说的东西，你现在就了解了 原型继承并且为什么它很重要。很感谢你们看完了这篇文章。我希望这个博客能帮到你们。原型继承是强大的并且值得更多的信任。然后大部分人从来不明白这个因为Javascript中的原型继承被构造模式所掩盖了。</p>\n<h2 id=\"译者注\"><a href=\"#译者注\" class=\"headerlink\" title=\"译者注\"></a>译者注</h2><p>这篇文章针对几种继承方式进行了对比。文章中说到的几种扩展的方法我觉得是比较有用的。蓝图(blueprint，这个实在不知道该怎么翻译)的扩展方式比较像设计模式中的装饰者模式，通过函数对对象进行扩展，这个是一种比较好玩的扩展方式，可以跟原型继承配合使用。另外文中提到了<code>new</code>关键字的弊端，个人觉得主要的原因还是<code>new</code>关键字的出现掩盖了Javascript本身原型继承的特点，人们自然而然就会想到传统的类继承，这样就无法发挥原型继承的最大威力。最后说到的属性修改传播的问题也挺有意思的，应该会有相应的应用场景。总之，我觉得原型继承相比于传统的类继承提供了更大的灵活性，可以给我们开发者提供很大的发挥空间，不过不管怎样，到最后还是要涉及到基本的原型继承的原理上，所以掌握了原型继承的原理就可以根据不同的应用场景使用各种各样的扩展方式。</p>\n<hr>\n<blockquote>\n<p>原文地址：<a href=\"http://aaditmshah.github.io/why-prototypal-inheritance-matters/\" target=\"_blank\" rel=\"external\">http://aaditmshah.github.io/why-prototypal-inheritance-matters/</a></p>\n</blockquote>\n"}