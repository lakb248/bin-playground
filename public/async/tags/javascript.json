{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8,"_total":8,"_totalPage":1,"_page":1,"posts":[{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"前端优化","permalink":"/tags/前端优化/","url":"/async/tags/前端优化.json","count":4}],"categories":[],"url":"/async/posts/2014/05/24/frontend-optimization-javascript-bottom.json","date":1400913772000,"path":{"year":2014,"month":5,"day":24,"name":"frontend-optimization-javascript-bottom"},"title":"前端优化-Javascript篇(1.脚本放在底部)","permalink":"/2014/05/24/frontend-optimization-javascript-bottom/","content":"<p>从本篇博客开始，我会跟大家分享下我关于前端优化方面的学习，由于时间原因每篇博客只能分享一小点内容，一点点深入前端优化的细节。<br>　　做过前端的人都知道，前端优化是一个永远都不会停止的话题(当然，不管是哪个技术，优化总是无止境的)。在前端优化这个问题上，最被大家熟知的应该就是雅虎前端优化14条军规以及雅虎前端优化34条规则。大部分也都已经应用到了实际开发中。而我的分享并不是按照优化建议来进行的，我的计划是整个优化按照不同模块进行划分，分别是Javascript，CSS，HTML还有其他的一些细节。今天就先从Javascript开始。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"前端优化","permalink":"/tags/前端优化/","url":"/async/tags/前端优化.json","count":4}],"categories":[],"url":"/async/posts/2014/06/02/frontend-optimization-javascript-async-load.json","date":1401691399000,"path":{"year":2014,"month":6,"day":2,"name":"frontend-optimization-javascript-async-load"},"title":"前端优化-Javascript篇(2.异步加载脚本)","permalink":"/2014/06/02/frontend-optimization-javascript-async-load/","content":"<p>上篇博客说过脚本后置可以使页面更快的加载，可是这样的优化还是有限的，如果脚本需要执行一个耗时的操作，就算后置了它还是会阻塞后续脚本加载和执行并且阻塞整个页面。下面介绍非阻塞加载脚本技术也就是异步加载。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"前端优化","permalink":"/tags/前端优化/","url":"/async/tags/前端优化.json","count":4}],"categories":[],"url":"/async/posts/2014/06/16/frontend-optimization-javascript-dom.json","date":1402901051000,"path":{"year":2014,"month":6,"day":16,"name":"frontend-optimization-javascript-dom"},"title":"前端优化-Javascript篇(4.DOM优化)","permalink":"/2014/06/16/frontend-optimization-javascript-dom/","content":"<p>上篇我介绍了Javascript标识符查找方面的优化，可以看出在这方面的优化给性能带来的提升并不明显，甚至可以说基本没有影响。但是，我今天要分享的是前端Javascript优化的一个大头。众所周知，在浏览器端Javascript中DOM操作相比普通Javascript代码来说是比较耗时的，所以在DOM优化上下功夫可以收到相当可观的性能优化。下面我将分享几个DOM方面的性能优化策略。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"前端优化","permalink":"/tags/前端优化/","url":"/async/tags/前端优化.json","count":4}],"categories":[],"url":"/async/posts/2014/06/05/frontend-optimization-javascript-identifier.json","date":1401950625000,"path":{"year":2014,"month":6,"day":5,"name":"frontend-optimization-javascript-identifier"},"title":"前端优化-Javascript篇(3.标识符查找优化)","permalink":"/2014/06/05/frontend-optimization-javascript-identifier/","content":"<p>前面两篇文章介绍了Javascript文件在页面中位置以及异步加载问题对前端性能的影响。不过受限于单线程的原因，不管采用哪种方法，只要Javascript进行了耗时的工作，就都会引起页面的阻塞。所以在写代码的过程中应该注意一些会影响代码性能的问题，这样才能让我们的优化尽量做到极致。下面我跟大家分享关于标识符查找方面的优化问题。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8}],"categories":[],"url":"/async/posts/2015/04/20/grunt-source-code-3.json","date":1429512418000,"path":{"year":2015,"month":4,"day":20,"name":"grunt-source-code-3"},"title":"看看 Grunt 的源码（三）：grunt 任务注册相关源码解析","permalink":"/2015/04/20/grunt-source-code-3/","content":"<p>上一篇分享了关于grunt中任务运行相关源码的解析，这一篇来分享grunt中跟任务注册相关的源码解析，废话不多说，开始吧。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8},{"name":"es6","permalink":"/tags/es6/","url":"/async/tags/es6.json","count":1}],"categories":[],"url":"/async/posts/2014/05/24/overview-of-es6.json","date":1400896200000,"path":{"year":2014,"month":5,"day":24,"name":"overview-of-es6"},"title":"(译)ECMAScript 6 特性速览","permalink":"/2014/05/24/overview-of-es6/","content":"<p>原文地址:<a href=\"http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/\">http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/</a></p>\n<p>　　下一个Javascript版本，也就是ECMAScript 6(ES6或者Harmony)，给我们带来了很多令人兴奋的特性。下面我们来快速看看这些特性。下面列出的这些特性是我觉得很可能会在你日常工作中用到的。<br>　　如果你是一个Javascript新手或者原来是做服务器端开发的，那么你也不必担心，我相信现在是学习Javascript的最好时机，因为ES6有很多简介并且友好的特性。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8}],"categories":[],"url":"/async/posts/2014/11/09/talk-about-javascript-prototype-inheritance.json","date":1415515550000,"path":{"year":2014,"month":11,"day":9,"name":"talk-about-javascript-prototype-inheritance"},"title":"再谈Javascript原型继承","permalink":"/2014/11/09/talk-about-javascript-prototype-inheritance/","content":"<p>真正意义上来说Javascript并不是一门面向对象的语言，没有提供传统的继承方式，但是它提供了一种原型继承的方式，利用自身提供的原型属性来实现继承。Javascript原型继承是一个被说烂掉了的话题，但是自己对于这个问题一直没有彻底理解，今天花了点时间又看了一遍《Javascript模式》中关于原型实现继承的几种方法，下面来一一说明下，在最后我根据自己的理解提出了一个关于继承比较完整的实现，如果大家有不同意见，欢迎建议。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8}],"categories":[],"url":"/async/posts/2015/03/14/why-prototype-important.json","date":1426315595000,"path":{"year":2015,"month":3,"day":14,"name":"why-prototype-important"},"title":"(译)为什么原型继承很重要","permalink":"/2015/03/14/why-prototype-important/","content":"<p>五天之前我写了一个关于ES6标准中Class的<a href=\"http://aaditmshah.github.io/standardizing-harmony-classes\">文章</a>。在里面我介绍了如何用现有的Javascript来模拟类并且介绍了ES6中类的用法，其实它只是一个语法糖。感谢<a href=\"http://geekyogi.tumblr.com/\">Om Shakar</a>以及<a href=\"http://rlemon.github.io/so-chat-javascript-rules/\">Javascript Room</a>中的各位，我的编程风格从那时候开始发生了改变；就像<a href=\"http://www.crockford.com/\">Dougla Crockford</a>2006年做的一样，我也学习了很多来完全理解基于原型的编程方式。</p>\n<p>Javascript是一个多样化的编程语言。它拥有面向对象和函数式的编程特点，你可以使用任何一种风格来编写代码。然而这两个编程风格并不能很好的融合。例如，你不无法同时使用<code>new</code>(典型的面向对象的特点)和<code>apply</code>(函数式编程的特点).原型继承一直都作为连接这两种风格的桥梁。<br>"}]}