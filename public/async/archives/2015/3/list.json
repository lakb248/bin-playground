{"year":"2015","month":"3","permalink":"archives/2015/3","_total":2,"_totalPage":1,"_page":1,"posts":[{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"/async/tags/javascript.json","count":8}],"categories":[],"url":"/async/posts/2015/03/14/why-prototype-important.json","date":1426315595000,"path":{"year":2015,"month":3,"day":14,"name":"why-prototype-important"},"title":"(译)为什么原型继承很重要","permalink":"/2015/03/14/why-prototype-important/","content":"<p>五天之前我写了一个关于ES6标准中Class的<a href=\"http://aaditmshah.github.io/standardizing-harmony-classes\">文章</a>。在里面我介绍了如何用现有的Javascript来模拟类并且介绍了ES6中类的用法，其实它只是一个语法糖。感谢<a href=\"http://geekyogi.tumblr.com/\">Om Shakar</a>以及<a href=\"http://rlemon.github.io/so-chat-javascript-rules/\">Javascript Room</a>中的各位，我的编程风格从那时候开始发生了改变；就像<a href=\"http://www.crockford.com/\">Dougla Crockford</a>2006年做的一样，我也学习了很多来完全理解基于原型的编程方式。</p>\n<p>Javascript是一个多样化的编程语言。它拥有面向对象和函数式的编程特点，你可以使用任何一种风格来编写代码。然而这两个编程风格并不能很好的融合。例如，你不无法同时使用<code>new</code>(典型的面向对象的特点)和<code>apply</code>(函数式编程的特点).原型继承一直都作为连接这两种风格的桥梁。<br>"},{"tags":[{"name":"angular","permalink":"/tags/angular/","url":"/async/tags/angular.json","count":1}],"categories":[],"url":"/async/posts/2015/03/10/some-angular-practice.json","date":1425969972000,"path":{"year":2015,"month":3,"day":10,"name":"some-angular-practice"},"title":"angularjs实践过程中的心得总结","permalink":"/2015/03/10/some-angular-practice/","content":"<p>利用寒假的时间给我家女神做了一个WebApp作为情人节礼物，一为表表忠心，二为练练手，在过程中也发现一些问题，在此总结总结。这里面除了angular方面的问题，还有一些单页面应用开发过程中的问题。<br>"}]}