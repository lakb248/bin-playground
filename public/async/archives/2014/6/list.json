{"year":"2014","month":"6","permalink":"archives\\2014\\6","_total":5,"_totalPage":1,"_page":1,"posts":[{"tags":[{"name":"promise","permalink":"/tags/promise/","url":"\\async\\tags\\promise.json","count":5}],"categories":[],"url":"\\async\\posts\\2014\\06\\29\\understand-promise-2.json","date":1404003271000,"path":{"year":2014,"month":6,"day":29,"name":"understand-promise-2"},"title":"[译] 深入理解 Promise 五部曲：2. 控制权转换问题","permalink":"/2014/06/29/understand-promise-2/","content":"<blockquote>\n<p>厦门旅行归来，继续理解Promise</p>\n</blockquote>\n<p>在上一篇<a href=\"/#/blog/2014/06/23/understand-promise-1/\">深入理解Promise五部曲:1.异步问题</a>中，我们揭示了JS的异步事件轮询并发模型并且解释了多任务是如何相互穿插使得它们看起来像是同时运行的。然后我们讨论了为什么我们努力地在我们的代码里表达这些东西以及为什么我们的大脑不善于理解它们。<br>我们现在要找出一个更好的方式来表达异步流程，然后看看Promises是怎么解决这个问题的。</p>"},{"tags":[{"name":"promise","permalink":"/tags/promise/","url":"\\async\\tags\\promise.json","count":5}],"categories":[],"url":"\\async\\posts\\2014\\06\\23\\understand-promise-1.json","date":1403484865000,"path":{"year":2014,"month":6,"day":23,"name":"understand-promise-1"},"title":"[译] 深入理解 Promise 五部曲：1. 异步问题","permalink":"/2014/06/23/understand-promise-1/","content":"<p>在微博上看到有人分享LabJS作者写的关于Promise的博客，看了下觉得写得很好，分五个部分讲解了Promise的来龙去脉。从这篇文章开始，我会陆续把五篇博客翻译出来跟大家分享，在大牛的带领下真正理解Promise。卖个关子，作者看待Promise的角度跟我一直以来看到的讲解Promise的角度完全不一样，不只是定留在解决回调金字塔上，至少我没想到Promise竟然有这么重要的意义。先上第一篇。</p>\n<p>在这篇文章中，我会解释我们为什么需要使用一个更好的方式(比如Promise)来进行异步流程的编写。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"\\async\\tags\\javascript.json","count":7},{"name":"前端优化","permalink":"/tags/前端优化/","url":"\\async\\tags\\前端优化.json","count":4}],"categories":[],"url":"\\async\\posts\\2014\\06\\16\\frontend-optimization-javascript-dom.json","date":1402882666000,"path":{"year":2014,"month":6,"day":16,"name":"frontend-optimization-javascript-dom"},"title":"前端优化-Javascript篇(4.DOM优化)","permalink":"/2014/06/16/frontend-optimization-javascript-dom/","content":"<p>上篇我介绍了Javascript标识符查找方面的优化，可以看出在这方面的优化给性能带来的提升并不明显，甚至可以说基本没有影响。但是，我今天要分享的是前端Javascript优化的一个大头。众所周知，在浏览器端Javascript中DOM操作相比普通Javascript代码来说是比较耗时的，所以在DOM优化上下功夫可以收到相当可观的性能优化。下面我将分享几个DOM方面的性能优化策略。<br>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"\\async\\tags\\javascript.json","count":7},{"name":"前端优化","permalink":"/tags/前端优化/","url":"\\async\\tags\\前端优化.json","count":4}],"categories":[],"url":"\\async\\posts\\2014\\06\\05\\frontend-optimization-javascript-identifier.json","date":1401932558000,"path":{"year":2014,"month":6,"day":5,"name":"frontend-optimization-javascript-identifier"},"title":"前端优化-Javascript篇(3.标识符查找优化)","permalink":"/2014/06/05/frontend-optimization-javascript-identifier/","content":"<p>前面两篇文章介绍了Javascript文件在页面中位置以及异步加载问题对前端性能的影响。不过受限于单线程的原因，不管采用哪种方法，只要Javascript进行了耗时的工作，就都会引起页面的阻塞。所以在写代码的过程中应该注意一些会影响代码性能的问题，这样才能让我们的优化尽量做到极致。下面我跟大家分享关于标识符查找方面的优化问题。</p>"},{"tags":[{"name":"javascript","permalink":"/tags/javascript/","url":"\\async\\tags\\javascript.json","count":7},{"name":"前端优化","permalink":"/tags/前端优化/","url":"\\async\\tags\\前端优化.json","count":4}],"categories":[],"url":"\\async\\posts\\2014\\06\\02\\frontend-optimization-javascript-async-load.json","date":1401673436000,"path":{"year":2014,"month":6,"day":2,"name":"frontend-optimization-javascript-async-load"},"title":"前端优化-Javascript篇(2.异步加载脚本)","permalink":"/2014/06/02/frontend-optimization-javascript-async-load/","content":"<p>上篇博客说过脚本后置可以使页面更快的加载，可是这样的优化还是有限的，如果脚本需要执行一个耗时的操作，就算后置了它还是会阻塞后续脚本加载和执行并且阻塞整个页面。下面介绍非阻塞加载脚本技术也就是异步加载。<br>"}]}